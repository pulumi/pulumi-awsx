// *** WARNING: this file was generated by pulumi-gen-awsx. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

import * as pulumiAws from "@pulumi/aws";

/**
 * A [Repository] represents an [aws.ecr.Repository] along with an associated [LifecyclePolicy] controlling how images are retained in the repo.
 *
 * Docker images can be built and pushed to the repo using the [buildAndPushImage] method.  This will call into the `@pulumi/docker/buildAndPushImage` function using this repo as the appropriate destination registry.
 */
export class Repository extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'awsx:ecr:Repository';

    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }

    /**
     * Underlying repository lifecycle policy
     */
    public readonly lifecyclePolicy!: pulumi.Output<pulumiAws.ecr.LifecyclePolicy | undefined>;
    /**
     * Underlying Repository resource
     */
    public /*out*/ readonly repository!: pulumi.Output<pulumiAws.ecr.Repository>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RepositoryArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["encryptionConfigurations"] = args ? args.encryptionConfigurations : undefined;
            resourceInputs["imageScanningConfiguration"] = args ? args.imageScanningConfiguration : undefined;
            resourceInputs["imageTagMutability"] = args ? args.imageTagMutability : undefined;
            resourceInputs["lifecyclePolicy"] = args ? args.lifecyclePolicy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["repository"] = undefined /*out*/;
        } else {
            resourceInputs["lifecyclePolicy"] = undefined /*out*/;
            resourceInputs["repository"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Repository.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }

    /**
     * Build and push a docker image to ECR
     */
    buildAndPushImage(args?: Repository.BuildAndPushImageArgs): pulumi.Output<Repository.BuildAndPushImageResult> {
        args = args || {};
        return pulumi.runtime.call("awsx:ecr:Repository/buildAndPushImage", {
            "__self__": this,
            "args": args.args,
            "cacheFrom": args.cacheFrom,
            "dockerfile": args.dockerfile,
            "env": args.env,
            "extraOptions": args.extraOptions,
            "path": args.path,
            "target": args.target,
        }, this);
    }
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    /**
     * Encryption configuration for the repository. See below for schema.
     */
    encryptionConfigurations?: pulumi.Input<pulumi.Input<pulumiAws.types.input.ecr.RepositoryEncryptionConfiguration>[]>;
    /**
     * Configuration block that defines image scanning configuration for the repository. By default, image scanning must be manually triggered. See the [ECR User Guide](https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html) for more information about image scanning.
     */
    imageScanningConfiguration?: pulumi.Input<pulumiAws.types.input.ecr.RepositoryImageScanningConfiguration>;
    /**
     * The tag mutability setting for the repository. Must be one of: `MUTABLE` or `IMMUTABLE`. Defaults to `MUTABLE`.
     */
    imageTagMutability?: pulumi.Input<string>;
    /**
     * A lifecycle policy consists of one or more rules that determine which images in a repository should be expired. If not provided, this will default to untagged images expiring after 1 day.
     */
    lifecyclePolicy?: inputs.ecr.LifecyclePolicyArgs;
    /**
     * Name of the repository.
     */
    name?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export namespace Repository {
    /**
     * Arguments for building and publishing a docker image to ECR
     */
    export interface BuildAndPushImageArgs {
        /**
         * An optional map of named build-time argument variables to set during the Docker build.  This flag allows you to pass built-time variables that can be accessed like environment variables inside the `RUN` instruction.
         */
        args?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * Images to consider as cache sources
         */
        cacheFrom?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * dockerfile may be used to override the default Dockerfile name and/or location.  By default, it is assumed to be a file named Dockerfile in the root of the build context.
         */
        dockerfile?: pulumi.Input<string>;
        /**
         * Environment variables to set on the invocation of `docker build`, for example to support `DOCKER_BUILDKIT=1 docker build`.
         */
        env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * An optional catch-all list of arguments to provide extra CLI options to the docker build command.  For example `['--network', 'host']`.
         */
        extraOptions?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Path to a directory to use for the Docker build context, usually the directory in which the Dockerfile resides (although dockerfile may be used to choose a custom location independent of this choice). If not specified, the context defaults to the current working directory; if a relative path is used, it is relative to the current working directory that Pulumi is evaluating.
         */
        path?: pulumi.Input<string>;
        /**
         * The target of the dockerfile to build
         */
        target?: pulumi.Input<string>;
    }

    /**
     * Arguments for building and publishing a docker image to ECR
     */
    export interface BuildAndPushImageResult {
        /**
         * Unique identifier of the pushed image
         */
        readonly image: string;
    }

}
