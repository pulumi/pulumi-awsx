// *** WARNING: this file was generated by pulumi-gen-awsx. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";

import * as pulumiAws from "@pulumi/aws";
import * as utilities from "../utilities";

export namespace apigatewayv2 {
    /**
     * Manages an Amazon API Gateway Version 2 API mapping.
     * More information can be found in the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html).
     *
     * {{% examples %}}
     * ## Example Usage
     * {{% example %}}
     * ### Basic
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const example = new aws.apigatewayv2.ApiMapping("example", {
     *     apiId: aws_apigatewayv2_api.example.id,
     *     domainName: aws_apigatewayv2_domain_name.example.id,
     *     stage: aws_apigatewayv2_stage.example.id,
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * example = aws.apigatewayv2.ApiMapping("example",
     *     api_id=aws_apigatewayv2_api["example"]["id"],
     *     domain_name=aws_apigatewayv2_domain_name["example"]["id"],
     *     stage=aws_apigatewayv2_stage["example"]["id"])
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var example = new Aws.ApiGatewayV2.ApiMapping("example", new()
     *     {
     *         ApiId = aws_apigatewayv2_api.Example.Id,
     *         DomainName = aws_apigatewayv2_domain_name.Example.Id,
     *         Stage = aws_apigatewayv2_stage.Example.Id,
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigatewayv2"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		_, err := apigatewayv2.NewApiMapping(ctx, "example", &apigatewayv2.ApiMappingArgs{
     * 			ApiId:      pulumi.Any(aws_apigatewayv2_api.Example.Id),
     * 			DomainName: pulumi.Any(aws_apigatewayv2_domain_name.Example.Id),
     * 			Stage:      pulumi.Any(aws_apigatewayv2_stage.Example.Id),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.apigatewayv2.ApiMapping;
     * import com.pulumi.aws.apigatewayv2.ApiMappingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var example = new ApiMapping("example", ApiMappingArgs.builder()        
     *             .apiId(aws_apigatewayv2_api.example().id())
     *             .domainName(aws_apigatewayv2_domain_name.example().id())
     *             .stage(aws_apigatewayv2_stage.example().id())
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   example:
     *     type: aws:apigatewayv2:ApiMapping
     *     properties:
     *       apiId: ${aws_apigatewayv2_api.example.id}
     *       domainName: ${aws_apigatewayv2_domain_name.example.id}
     *       stage: ${aws_apigatewayv2_stage.example.id}
     * ```
     * {{% /example %}}
     * {{% /examples %}}
     *
     * ## Import
     *
     * Using `pulumi import`, import `aws_apigatewayv2_api_mapping` using the API mapping identifier and domain name. For example:
     *
     * ```sh
     *  $ pulumi import aws:apigatewayv2/apiMapping:ApiMapping example 1122334/ws-api.example.com
     * ```
     *  
     */
    export interface DomainMappingArgs {
        /**
         * The API mapping key. Refer to [REST API](https://docs.aws.amazon.com/apigateway/latest/developerguide/rest-api-mappings.html), [HTTP API](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-mappings.html) or [WebSocket API](https://docs.aws.amazon.com/apigateway/latest/developerguide/websocket-api-mappings.html).
         */
        apiMappingKey?: pulumi.Input<string>;
        /**
         * Identifier of an existing domain. Cannot be specified together with `DomainName`.
         */
        domainId?: pulumi.Input<string>;
        /**
         * Configuration of the domain name to create. Cannot be specified together with `domainId`.
         */
        domainName?: inputs.apigatewayv2.DomainNameArgs;
        /**
         * API stage. Use the `aws.apigatewayv2.Stage` resource to configure an API stage.
         */
        stage: pulumi.Input<string>;
    }

    /**
     * Manages an Amazon API Gateway Version 2 domain name.
     * More information can be found in the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html).
     *
     * > **Note:** This resource establishes ownership of and the TLS settings for
     * a particular domain name. An API stage can be associated with the domain name using the `aws.apigatewayv2.ApiMapping` resource.
     *
     * {{% examples %}}
     * ## Example Usage
     * {{% example %}}
     * ### Basic
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const example = new aws.apigatewayv2.DomainName("example", {
     *     domainName: "ws-api.example.com",
     *     domainNameConfiguration: {
     *         certificateArn: aws_acm_certificate.example.arn,
     *         endpointType: "REGIONAL",
     *         securityPolicy: "TLS_1_2",
     *     },
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * example = aws.apigatewayv2.DomainName("example",
     *     domain_name="ws-api.example.com",
     *     domain_name_configuration=aws.apigatewayv2.DomainNameDomainNameConfigurationArgs(
     *         certificate_arn=aws_acm_certificate["example"]["arn"],
     *         endpoint_type="REGIONAL",
     *         security_policy="TLS_1_2",
     *     ))
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var example = new Aws.ApiGatewayV2.DomainName("example", new()
     *     {
     *         Domain = "ws-api.example.com",
     *         DomainNameConfiguration = new Aws.ApiGatewayV2.Inputs.DomainNameDomainNameConfigurationArgs
     *         {
     *             CertificateArn = aws_acm_certificate.Example.Arn,
     *             EndpointType = "REGIONAL",
     *             SecurityPolicy = "TLS_1_2",
     *         },
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigatewayv2"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		_, err := apigatewayv2.NewDomainName(ctx, "example", &apigatewayv2.DomainNameArgs{
     * 			DomainName: pulumi.String("ws-api.example.com"),
     * 			DomainNameConfiguration: &apigatewayv2.DomainNameDomainNameConfigurationArgs{
     * 				CertificateArn: pulumi.Any(aws_acm_certificate.Example.Arn),
     * 				EndpointType:   pulumi.String("REGIONAL"),
     * 				SecurityPolicy: pulumi.String("TLS_1_2"),
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.apigatewayv2.DomainName;
     * import com.pulumi.aws.apigatewayv2.DomainNameArgs;
     * import com.pulumi.aws.apigatewayv2.inputs.DomainNameDomainNameConfigurationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var example = new DomainName("example", DomainNameArgs.builder()        
     *             .domainName("ws-api.example.com")
     *             .domainNameConfiguration(DomainNameDomainNameConfigurationArgs.builder()
     *                 .certificateArn(aws_acm_certificate.example().arn())
     *                 .endpointType("REGIONAL")
     *                 .securityPolicy("TLS_1_2")
     *                 .build())
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   example:
     *     type: aws:apigatewayv2:DomainName
     *     properties:
     *       domainName: ws-api.example.com
     *       domainNameConfiguration:
     *         certificateArn: ${aws_acm_certificate.example.arn}
     *         endpointType: REGIONAL
     *         securityPolicy: TLS_1_2
     * ```
     * {{% /example %}}
     * {{% example %}}
     * ### Associated Route 53 Resource Record
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const exampleDomainName = new aws.apigatewayv2.DomainName("exampleDomainName", {
     *     domainName: "http-api.example.com",
     *     domainNameConfiguration: {
     *         certificateArn: aws_acm_certificate.example.arn,
     *         endpointType: "REGIONAL",
     *         securityPolicy: "TLS_1_2",
     *     },
     * });
     * const exampleRecord = new aws.route53.Record("exampleRecord", {
     *     name: exampleDomainName.domainName,
     *     type: "A",
     *     zoneId: aws_route53_zone.example.zone_id,
     *     aliases: [{
     *         name: exampleDomainName.domainNameConfiguration.apply(domainNameConfiguration => domainNameConfiguration.targetDomainName),
     *         zoneId: exampleDomainName.domainNameConfiguration.apply(domainNameConfiguration => domainNameConfiguration.hostedZoneId),
     *         evaluateTargetHealth: false,
     *     }],
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * example_domain_name = aws.apigatewayv2.DomainName("exampleDomainName",
     *     domain_name="http-api.example.com",
     *     domain_name_configuration=aws.apigatewayv2.DomainNameDomainNameConfigurationArgs(
     *         certificate_arn=aws_acm_certificate["example"]["arn"],
     *         endpoint_type="REGIONAL",
     *         security_policy="TLS_1_2",
     *     ))
     * example_record = aws.route53.Record("exampleRecord",
     *     name=example_domain_name.domain_name,
     *     type="A",
     *     zone_id=aws_route53_zone["example"]["zone_id"],
     *     aliases=[aws.route53.RecordAliasArgs(
     *         name=example_domain_name.domain_name_configuration.target_domain_name,
     *         zone_id=example_domain_name.domain_name_configuration.hosted_zone_id,
     *         evaluate_target_health=False,
     *     )])
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var exampleDomainName = new Aws.ApiGatewayV2.DomainName("exampleDomainName", new()
     *     {
     *         Domain = "http-api.example.com",
     *         DomainNameConfiguration = new Aws.ApiGatewayV2.Inputs.DomainNameDomainNameConfigurationArgs
     *         {
     *             CertificateArn = aws_acm_certificate.Example.Arn,
     *             EndpointType = "REGIONAL",
     *             SecurityPolicy = "TLS_1_2",
     *         },
     *     });
     *
     *     var exampleRecord = new Aws.Route53.Record("exampleRecord", new()
     *     {
     *         Name = exampleDomainName.Domain,
     *         Type = "A",
     *         ZoneId = aws_route53_zone.Example.Zone_id,
     *         Aliases = new[]
     *         {
     *             new Aws.Route53.Inputs.RecordAliasArgs
     *             {
     *                 Name = exampleDomainName.DomainNameConfiguration.Apply(domainNameConfiguration => domainNameConfiguration.TargetDomainName),
     *                 ZoneId = exampleDomainName.DomainNameConfiguration.Apply(domainNameConfiguration => domainNameConfiguration.HostedZoneId),
     *                 EvaluateTargetHealth = false,
     *             },
     *         },
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigatewayv2"
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/route53"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		exampleDomainName, err := apigatewayv2.NewDomainName(ctx, "exampleDomainName", &apigatewayv2.DomainNameArgs{
     * 			DomainName: pulumi.String("http-api.example.com"),
     * 			DomainNameConfiguration: &apigatewayv2.DomainNameDomainNameConfigurationArgs{
     * 				CertificateArn: pulumi.Any(aws_acm_certificate.Example.Arn),
     * 				EndpointType:   pulumi.String("REGIONAL"),
     * 				SecurityPolicy: pulumi.String("TLS_1_2"),
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		_, err = route53.NewRecord(ctx, "exampleRecord", &route53.RecordArgs{
     * 			Name:   exampleDomainName.DomainName,
     * 			Type:   pulumi.String("A"),
     * 			ZoneId: pulumi.Any(aws_route53_zone.Example.Zone_id),
     * 			Aliases: route53.RecordAliasArray{
     * 				&route53.RecordAliasArgs{
     * 					Name: exampleDomainName.DomainNameConfiguration.ApplyT(func(domainNameConfiguration apigatewayv2.DomainNameDomainNameConfiguration) (*string, error) {
     * 						return &domainNameConfiguration.TargetDomainName, nil
     * 					}).(pulumi.StringPtrOutput),
     * 					ZoneId: exampleDomainName.DomainNameConfiguration.ApplyT(func(domainNameConfiguration apigatewayv2.DomainNameDomainNameConfiguration) (*string, error) {
     * 						return &domainNameConfiguration.HostedZoneId, nil
     * 					}).(pulumi.StringPtrOutput),
     * 					EvaluateTargetHealth: pulumi.Bool(false),
     * 				},
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.apigatewayv2.DomainName;
     * import com.pulumi.aws.apigatewayv2.DomainNameArgs;
     * import com.pulumi.aws.apigatewayv2.inputs.DomainNameDomainNameConfigurationArgs;
     * import com.pulumi.aws.route53.Record;
     * import com.pulumi.aws.route53.RecordArgs;
     * import com.pulumi.aws.route53.inputs.RecordAliasArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var exampleDomainName = new DomainName("exampleDomainName", DomainNameArgs.builder()        
     *             .domainName("http-api.example.com")
     *             .domainNameConfiguration(DomainNameDomainNameConfigurationArgs.builder()
     *                 .certificateArn(aws_acm_certificate.example().arn())
     *                 .endpointType("REGIONAL")
     *                 .securityPolicy("TLS_1_2")
     *                 .build())
     *             .build());
     *
     *         var exampleRecord = new Record("exampleRecord", RecordArgs.builder()        
     *             .name(exampleDomainName.domainName())
     *             .type("A")
     *             .zoneId(aws_route53_zone.example().zone_id())
     *             .aliases(RecordAliasArgs.builder()
     *                 .name(exampleDomainName.domainNameConfiguration().applyValue(domainNameConfiguration -> domainNameConfiguration.targetDomainName()))
     *                 .zoneId(exampleDomainName.domainNameConfiguration().applyValue(domainNameConfiguration -> domainNameConfiguration.hostedZoneId()))
     *                 .evaluateTargetHealth(false)
     *                 .build())
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   exampleDomainName:
     *     type: aws:apigatewayv2:DomainName
     *     properties:
     *       domainName: http-api.example.com
     *       domainNameConfiguration:
     *         certificateArn: ${aws_acm_certificate.example.arn}
     *         endpointType: REGIONAL
     *         securityPolicy: TLS_1_2
     *   exampleRecord:
     *     type: aws:route53:Record
     *     properties:
     *       name: ${exampleDomainName.domainName}
     *       type: A
     *       zoneId: ${aws_route53_zone.example.zone_id}
     *       aliases:
     *         - name: ${exampleDomainName.domainNameConfiguration.targetDomainName}
     *           zoneId: ${exampleDomainName.domainNameConfiguration.hostedZoneId}
     *           evaluateTargetHealth: false
     * ```
     * {{% /example %}}
     * {{% /examples %}}
     *
     * ## Import
     *
     * Using `pulumi import`, import `aws_apigatewayv2_domain_name` using the domain name. For example:
     *
     * ```sh
     *  $ pulumi import aws:apigatewayv2/domainName:DomainName example ws-api.example.com
     * ```
     *  
     */
    export interface DomainNameArgs {
        /**
         * Domain name configuration. See below.
         */
        domainNameConfiguration: pulumi.Input<pulumiAws.types.input.apigatewayv2.DomainNameDomainNameConfiguration>;
        /**
         * Mutual TLS authentication configuration for the domain name.
         */
        mutualTlsAuthentication?: pulumi.Input<pulumiAws.types.input.apigatewayv2.DomainNameMutualTlsAuthentication>;
        /**
         * Map of tags to assign to the domain name. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         */
        tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    }

    /**
     * Manages an Amazon API Gateway Version 2 authorizer.
     * More information can be found in the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html).
     *
     * {{% examples %}}
     * ## Example Usage
     * {{% example %}}
     * ### Basic WebSocket API
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const example = new aws.apigatewayv2.Authorizer("example", {
     *     apiId: aws_apigatewayv2_api.example.id,
     *     authorizerType: "REQUEST",
     *     authorizerUri: aws_lambda_function.example.invoke_arn,
     *     identitySources: ["route.request.header.Auth"],
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * example = aws.apigatewayv2.Authorizer("example",
     *     api_id=aws_apigatewayv2_api["example"]["id"],
     *     authorizer_type="REQUEST",
     *     authorizer_uri=aws_lambda_function["example"]["invoke_arn"],
     *     identity_sources=["route.request.header.Auth"])
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var example = new Aws.ApiGatewayV2.Authorizer("example", new()
     *     {
     *         ApiId = aws_apigatewayv2_api.Example.Id,
     *         AuthorizerType = "REQUEST",
     *         AuthorizerUri = aws_lambda_function.Example.Invoke_arn,
     *         IdentitySources = new[]
     *         {
     *             "route.request.header.Auth",
     *         },
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigatewayv2"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		_, err := apigatewayv2.NewAuthorizer(ctx, "example", &apigatewayv2.AuthorizerArgs{
     * 			ApiId:          pulumi.Any(aws_apigatewayv2_api.Example.Id),
     * 			AuthorizerType: pulumi.String("REQUEST"),
     * 			AuthorizerUri:  pulumi.Any(aws_lambda_function.Example.Invoke_arn),
     * 			IdentitySources: pulumi.StringArray{
     * 				pulumi.String("route.request.header.Auth"),
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.apigatewayv2.Authorizer;
     * import com.pulumi.aws.apigatewayv2.AuthorizerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var example = new Authorizer("example", AuthorizerArgs.builder()        
     *             .apiId(aws_apigatewayv2_api.example().id())
     *             .authorizerType("REQUEST")
     *             .authorizerUri(aws_lambda_function.example().invoke_arn())
     *             .identitySources("route.request.header.Auth")
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   example:
     *     type: aws:apigatewayv2:Authorizer
     *     properties:
     *       apiId: ${aws_apigatewayv2_api.example.id}
     *       authorizerType: REQUEST
     *       authorizerUri: ${aws_lambda_function.example.invoke_arn}
     *       identitySources:
     *         - route.request.header.Auth
     * ```
     * {{% /example %}}
     * {{% example %}}
     * ### Basic HTTP API
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const example = new aws.apigatewayv2.Authorizer("example", {
     *     apiId: aws_apigatewayv2_api.example.id,
     *     authorizerType: "REQUEST",
     *     authorizerUri: aws_lambda_function.example.invoke_arn,
     *     identitySources: ["$request.header.Authorization"],
     *     authorizerPayloadFormatVersion: "2.0",
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * example = aws.apigatewayv2.Authorizer("example",
     *     api_id=aws_apigatewayv2_api["example"]["id"],
     *     authorizer_type="REQUEST",
     *     authorizer_uri=aws_lambda_function["example"]["invoke_arn"],
     *     identity_sources=["$request.header.Authorization"],
     *     authorizer_payload_format_version="2.0")
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var example = new Aws.ApiGatewayV2.Authorizer("example", new()
     *     {
     *         ApiId = aws_apigatewayv2_api.Example.Id,
     *         AuthorizerType = "REQUEST",
     *         AuthorizerUri = aws_lambda_function.Example.Invoke_arn,
     *         IdentitySources = new[]
     *         {
     *             "$request.header.Authorization",
     *         },
     *         AuthorizerPayloadFormatVersion = "2.0",
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigatewayv2"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		_, err := apigatewayv2.NewAuthorizer(ctx, "example", &apigatewayv2.AuthorizerArgs{
     * 			ApiId:          pulumi.Any(aws_apigatewayv2_api.Example.Id),
     * 			AuthorizerType: pulumi.String("REQUEST"),
     * 			AuthorizerUri:  pulumi.Any(aws_lambda_function.Example.Invoke_arn),
     * 			IdentitySources: pulumi.StringArray{
     * 				pulumi.String("$request.header.Authorization"),
     * 			},
     * 			AuthorizerPayloadFormatVersion: pulumi.String("2.0"),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.apigatewayv2.Authorizer;
     * import com.pulumi.aws.apigatewayv2.AuthorizerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var example = new Authorizer("example", AuthorizerArgs.builder()        
     *             .apiId(aws_apigatewayv2_api.example().id())
     *             .authorizerType("REQUEST")
     *             .authorizerUri(aws_lambda_function.example().invoke_arn())
     *             .identitySources("$request.header.Authorization")
     *             .authorizerPayloadFormatVersion("2.0")
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   example:
     *     type: aws:apigatewayv2:Authorizer
     *     properties:
     *       apiId: ${aws_apigatewayv2_api.example.id}
     *       authorizerType: REQUEST
     *       authorizerUri: ${aws_lambda_function.example.invoke_arn}
     *       identitySources:
     *         - $request.header.Authorization
     *       authorizerPayloadFormatVersion: '2.0'
     * ```
     * {{% /example %}}
     * {{% /examples %}}
     *
     * ## Import
     *
     * Using `pulumi import`, import `aws_apigatewayv2_authorizer` using the API identifier and authorizer identifier. For example:
     *
     * ```sh
     *  $ pulumi import aws:apigatewayv2/authorizer:Authorizer example aabbccddee/1122334
     * ```
     *  
     */
    export interface HttpAuthorizerArgs {
        /**
         * Required credentials as an IAM role for API Gateway to invoke the authorizer.
         * Supported only for `REQUEST` authorizers.
         */
        authorizerCredentialsArn?: pulumi.Input<string>;
        /**
         * Format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers.
         * Valid values: `1.0`, `2.0`.
         */
        authorizerPayloadFormatVersion?: pulumi.Input<string>;
        /**
         * Time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled.
         * If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Defaults to `300`.
         * Supported only for HTTP API Lambda authorizers.
         */
        authorizerResultTtlInSeconds?: pulumi.Input<number>;
        /**
         * Authorizer type. Valid values: `JWT`, `REQUEST`.
         * Specify `REQUEST` for a Lambda function using incoming request parameters.
         * For HTTP APIs, specify `JWT` to use JSON Web Tokens.
         */
        authorizerType: pulumi.Input<string>;
        /**
         * Authorizer's Uniform Resource Identifier (URI).
         * For `REQUEST` authorizers this must be a well-formed Lambda function URI, such as the `invoke_arn` attribute of the `aws.lambda.Function` resource.
         * Supported only for `REQUEST` authorizers. Must be between 1 and 2048 characters in length.
         */
        authorizerUri?: pulumi.Input<string>;
        /**
         * Whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy.
         * Supported only for HTTP APIs.
         */
        enableSimpleResponses?: pulumi.Input<boolean>;
        /**
         * Identity sources for which authorization is requested.
         * For `REQUEST` authorizers the value is a list of one or more mapping expressions of the specified request parameters.
         * For `JWT` authorizers the single entry specifies where to extract the JSON Web Token (JWT) from inbound requests.
         */
        identitySources?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Configuration of a JWT authorizer. Required for the `JWT` authorizer type.
         * Supported only for HTTP APIs.
         */
        jwtConfiguration?: pulumi.Input<pulumiAws.types.input.apigatewayv2.AuthorizerJwtConfiguration>;
        /**
         * Name of the authorizer. Must be between 1 and 128 characters in length.
         */
        name?: pulumi.Input<string>;
    }

    /**
     * Manages an Amazon API Gateway Version 2 integration.
     * More information can be found in the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html).
     *
     * {{% examples %}}
     * ## Example Usage
     * {{% example %}}
     * ### Basic
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const example = new aws.apigatewayv2.Integration("example", {
     *     apiId: aws_apigatewayv2_api.example.id,
     *     integrationType: "MOCK",
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * example = aws.apigatewayv2.Integration("example",
     *     api_id=aws_apigatewayv2_api["example"]["id"],
     *     integration_type="MOCK")
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var example = new Aws.ApiGatewayV2.Integration("example", new()
     *     {
     *         ApiId = aws_apigatewayv2_api.Example.Id,
     *         IntegrationType = "MOCK",
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigatewayv2"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		_, err := apigatewayv2.NewIntegration(ctx, "example", &apigatewayv2.IntegrationArgs{
     * 			ApiId:           pulumi.Any(aws_apigatewayv2_api.Example.Id),
     * 			IntegrationType: pulumi.String("MOCK"),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.apigatewayv2.Integration;
     * import com.pulumi.aws.apigatewayv2.IntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var example = new Integration("example", IntegrationArgs.builder()        
     *             .apiId(aws_apigatewayv2_api.example().id())
     *             .integrationType("MOCK")
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   example:
     *     type: aws:apigatewayv2:Integration
     *     properties:
     *       apiId: ${aws_apigatewayv2_api.example.id}
     *       integrationType: MOCK
     * ```
     * {{% /example %}}
     * {{% example %}}
     * ### Lambda Integration
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const exampleFunction = new aws.lambda.Function("exampleFunction", {
     *     code: new pulumi.asset.FileArchive("example.zip"),
     *     role: aws_iam_role.example.arn,
     *     handler: "index.handler",
     *     runtime: "nodejs16.x",
     * });
     * const exampleIntegration = new aws.apigatewayv2.Integration("exampleIntegration", {
     *     apiId: aws_apigatewayv2_api.example.id,
     *     integrationType: "AWS_PROXY",
     *     connectionType: "INTERNET",
     *     contentHandlingStrategy: "CONVERT_TO_TEXT",
     *     description: "Lambda example",
     *     integrationMethod: "POST",
     *     integrationUri: exampleFunction.invokeArn,
     *     passthroughBehavior: "WHEN_NO_MATCH",
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * example_function = aws.lambda_.Function("exampleFunction",
     *     code=pulumi.FileArchive("example.zip"),
     *     role=aws_iam_role["example"]["arn"],
     *     handler="index.handler",
     *     runtime="nodejs16.x")
     * example_integration = aws.apigatewayv2.Integration("exampleIntegration",
     *     api_id=aws_apigatewayv2_api["example"]["id"],
     *     integration_type="AWS_PROXY",
     *     connection_type="INTERNET",
     *     content_handling_strategy="CONVERT_TO_TEXT",
     *     description="Lambda example",
     *     integration_method="POST",
     *     integration_uri=example_function.invoke_arn,
     *     passthrough_behavior="WHEN_NO_MATCH")
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var exampleFunction = new Aws.Lambda.Function("exampleFunction", new()
     *     {
     *         Code = new FileArchive("example.zip"),
     *         Role = aws_iam_role.Example.Arn,
     *         Handler = "index.handler",
     *         Runtime = "nodejs16.x",
     *     });
     *
     *     var exampleIntegration = new Aws.ApiGatewayV2.Integration("exampleIntegration", new()
     *     {
     *         ApiId = aws_apigatewayv2_api.Example.Id,
     *         IntegrationType = "AWS_PROXY",
     *         ConnectionType = "INTERNET",
     *         ContentHandlingStrategy = "CONVERT_TO_TEXT",
     *         Description = "Lambda example",
     *         IntegrationMethod = "POST",
     *         IntegrationUri = exampleFunction.InvokeArn,
     *         PassthroughBehavior = "WHEN_NO_MATCH",
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigatewayv2"
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lambda"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		exampleFunction, err := lambda.NewFunction(ctx, "exampleFunction", &lambda.FunctionArgs{
     * 			Code:    pulumi.NewFileArchive("example.zip"),
     * 			Role:    pulumi.Any(aws_iam_role.Example.Arn),
     * 			Handler: pulumi.String("index.handler"),
     * 			Runtime: pulumi.String("nodejs16.x"),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		_, err = apigatewayv2.NewIntegration(ctx, "exampleIntegration", &apigatewayv2.IntegrationArgs{
     * 			ApiId:                   pulumi.Any(aws_apigatewayv2_api.Example.Id),
     * 			IntegrationType:         pulumi.String("AWS_PROXY"),
     * 			ConnectionType:          pulumi.String("INTERNET"),
     * 			ContentHandlingStrategy: pulumi.String("CONVERT_TO_TEXT"),
     * 			Description:             pulumi.String("Lambda example"),
     * 			IntegrationMethod:       pulumi.String("POST"),
     * 			IntegrationUri:          exampleFunction.InvokeArn,
     * 			PassthroughBehavior:     pulumi.String("WHEN_NO_MATCH"),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lambda.Function;
     * import com.pulumi.aws.lambda.FunctionArgs;
     * import com.pulumi.aws.apigatewayv2.Integration;
     * import com.pulumi.aws.apigatewayv2.IntegrationArgs;
     * import com.pulumi.asset.FileArchive;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var exampleFunction = new Function("exampleFunction", FunctionArgs.builder()        
     *             .code(new FileArchive("example.zip"))
     *             .role(aws_iam_role.example().arn())
     *             .handler("index.handler")
     *             .runtime("nodejs16.x")
     *             .build());
     *
     *         var exampleIntegration = new Integration("exampleIntegration", IntegrationArgs.builder()        
     *             .apiId(aws_apigatewayv2_api.example().id())
     *             .integrationType("AWS_PROXY")
     *             .connectionType("INTERNET")
     *             .contentHandlingStrategy("CONVERT_TO_TEXT")
     *             .description("Lambda example")
     *             .integrationMethod("POST")
     *             .integrationUri(exampleFunction.invokeArn())
     *             .passthroughBehavior("WHEN_NO_MATCH")
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   exampleFunction:
     *     type: aws:lambda:Function
     *     properties:
     *       code:
     *         fn::FileArchive: example.zip
     *       role: ${aws_iam_role.example.arn}
     *       handler: index.handler
     *       runtime: nodejs16.x
     *   exampleIntegration:
     *     type: aws:apigatewayv2:Integration
     *     properties:
     *       apiId: ${aws_apigatewayv2_api.example.id}
     *       integrationType: AWS_PROXY
     *       connectionType: INTERNET
     *       contentHandlingStrategy: CONVERT_TO_TEXT
     *       description: Lambda example
     *       integrationMethod: POST
     *       integrationUri: ${exampleFunction.invokeArn}
     *       passthroughBehavior: WHEN_NO_MATCH
     * ```
     * {{% /example %}}
     * {{% example %}}
     * ### AWS Service Integration
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const example = new aws.apigatewayv2.Integration("example", {
     *     apiId: aws_apigatewayv2_api.example.id,
     *     credentialsArn: aws_iam_role.example.arn,
     *     description: "SQS example",
     *     integrationType: "AWS_PROXY",
     *     integrationSubtype: "SQS-SendMessage",
     *     requestParameters: {
     *         QueueUrl: "$request.header.queueUrl",
     *         MessageBody: "$request.body.message",
     *     },
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * example = aws.apigatewayv2.Integration("example",
     *     api_id=aws_apigatewayv2_api["example"]["id"],
     *     credentials_arn=aws_iam_role["example"]["arn"],
     *     description="SQS example",
     *     integration_type="AWS_PROXY",
     *     integration_subtype="SQS-SendMessage",
     *     request_parameters={
     *         "QueueUrl": "$request.header.queueUrl",
     *         "MessageBody": "$request.body.message",
     *     })
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var example = new Aws.ApiGatewayV2.Integration("example", new()
     *     {
     *         ApiId = aws_apigatewayv2_api.Example.Id,
     *         CredentialsArn = aws_iam_role.Example.Arn,
     *         Description = "SQS example",
     *         IntegrationType = "AWS_PROXY",
     *         IntegrationSubtype = "SQS-SendMessage",
     *         RequestParameters = 
     *         {
     *             { "QueueUrl", "$request.header.queueUrl" },
     *             { "MessageBody", "$request.body.message" },
     *         },
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigatewayv2"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		_, err := apigatewayv2.NewIntegration(ctx, "example", &apigatewayv2.IntegrationArgs{
     * 			ApiId:              pulumi.Any(aws_apigatewayv2_api.Example.Id),
     * 			CredentialsArn:     pulumi.Any(aws_iam_role.Example.Arn),
     * 			Description:        pulumi.String("SQS example"),
     * 			IntegrationType:    pulumi.String("AWS_PROXY"),
     * 			IntegrationSubtype: pulumi.String("SQS-SendMessage"),
     * 			RequestParameters: pulumi.StringMap{
     * 				"QueueUrl":    pulumi.String("$request.header.queueUrl"),
     * 				"MessageBody": pulumi.String("$request.body.message"),
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.apigatewayv2.Integration;
     * import com.pulumi.aws.apigatewayv2.IntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var example = new Integration("example", IntegrationArgs.builder()        
     *             .apiId(aws_apigatewayv2_api.example().id())
     *             .credentialsArn(aws_iam_role.example().arn())
     *             .description("SQS example")
     *             .integrationType("AWS_PROXY")
     *             .integrationSubtype("SQS-SendMessage")
     *             .requestParameters(Map.ofEntries(
     *                 Map.entry("QueueUrl", "$request.header.queueUrl"),
     *                 Map.entry("MessageBody", "$request.body.message")
     *             ))
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   example:
     *     type: aws:apigatewayv2:Integration
     *     properties:
     *       apiId: ${aws_apigatewayv2_api.example.id}
     *       credentialsArn: ${aws_iam_role.example.arn}
     *       description: SQS example
     *       integrationType: AWS_PROXY
     *       integrationSubtype: SQS-SendMessage
     *       requestParameters:
     *         QueueUrl: $request.header.queueUrl
     *         MessageBody: $request.body.message
     * ```
     * {{% /example %}}
     * {{% example %}}
     * ### Private Integration
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const example = new aws.apigatewayv2.Integration("example", {
     *     apiId: aws_apigatewayv2_api.example.id,
     *     credentialsArn: aws_iam_role.example.arn,
     *     description: "Example with a load balancer",
     *     integrationType: "HTTP_PROXY",
     *     integrationUri: aws_lb_listener.example.arn,
     *     integrationMethod: "ANY",
     *     connectionType: "VPC_LINK",
     *     connectionId: aws_apigatewayv2_vpc_link.example.id,
     *     tlsConfig: {
     *         serverNameToVerify: "example.com",
     *     },
     *     requestParameters: {
     *         "append:header.authforintegration": "$context.authorizer.authorizerResponse",
     *         "overwrite:path": "staticValueForIntegration",
     *     },
     *     responseParameters: [
     *         {
     *             statusCode: "403",
     *             mappings: {
     *                 "append:header.auth": "$context.authorizer.authorizerResponse",
     *             },
     *         },
     *         {
     *             statusCode: "200",
     *             mappings: {
     *                 "overwrite:statuscode": "204",
     *             },
     *         },
     *     ],
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * example = aws.apigatewayv2.Integration("example",
     *     api_id=aws_apigatewayv2_api["example"]["id"],
     *     credentials_arn=aws_iam_role["example"]["arn"],
     *     description="Example with a load balancer",
     *     integration_type="HTTP_PROXY",
     *     integration_uri=aws_lb_listener["example"]["arn"],
     *     integration_method="ANY",
     *     connection_type="VPC_LINK",
     *     connection_id=aws_apigatewayv2_vpc_link["example"]["id"],
     *     tls_config=aws.apigatewayv2.IntegrationTlsConfigArgs(
     *         server_name_to_verify="example.com",
     *     ),
     *     request_parameters={
     *         "append:header.authforintegration": "$context.authorizer.authorizerResponse",
     *         "overwrite:path": "staticValueForIntegration",
     *     },
     *     response_parameters=[
     *         aws.apigatewayv2.IntegrationResponseParameterArgs(
     *             status_code="403",
     *             mappings={
     *                 "append:header.auth": "$context.authorizer.authorizerResponse",
     *             },
     *         ),
     *         aws.apigatewayv2.IntegrationResponseParameterArgs(
     *             status_code="200",
     *             mappings={
     *                 "overwrite:statuscode": "204",
     *             },
     *         ),
     *     ])
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var example = new Aws.ApiGatewayV2.Integration("example", new()
     *     {
     *         ApiId = aws_apigatewayv2_api.Example.Id,
     *         CredentialsArn = aws_iam_role.Example.Arn,
     *         Description = "Example with a load balancer",
     *         IntegrationType = "HTTP_PROXY",
     *         IntegrationUri = aws_lb_listener.Example.Arn,
     *         IntegrationMethod = "ANY",
     *         ConnectionType = "VPC_LINK",
     *         ConnectionId = aws_apigatewayv2_vpc_link.Example.Id,
     *         TlsConfig = new Aws.ApiGatewayV2.Inputs.IntegrationTlsConfigArgs
     *         {
     *             ServerNameToVerify = "example.com",
     *         },
     *         RequestParameters = 
     *         {
     *             { "append:header.authforintegration", "$context.authorizer.authorizerResponse" },
     *             { "overwrite:path", "staticValueForIntegration" },
     *         },
     *         ResponseParameters = new[]
     *         {
     *             new Aws.ApiGatewayV2.Inputs.IntegrationResponseParameterArgs
     *             {
     *                 StatusCode = "403",
     *                 Mappings = 
     *                 {
     *                     { "append:header.auth", "$context.authorizer.authorizerResponse" },
     *                 },
     *             },
     *             new Aws.ApiGatewayV2.Inputs.IntegrationResponseParameterArgs
     *             {
     *                 StatusCode = "200",
     *                 Mappings = 
     *                 {
     *                     { "overwrite:statuscode", "204" },
     *                 },
     *             },
     *         },
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigatewayv2"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		_, err := apigatewayv2.NewIntegration(ctx, "example", &apigatewayv2.IntegrationArgs{
     * 			ApiId:             pulumi.Any(aws_apigatewayv2_api.Example.Id),
     * 			CredentialsArn:    pulumi.Any(aws_iam_role.Example.Arn),
     * 			Description:       pulumi.String("Example with a load balancer"),
     * 			IntegrationType:   pulumi.String("HTTP_PROXY"),
     * 			IntegrationUri:    pulumi.Any(aws_lb_listener.Example.Arn),
     * 			IntegrationMethod: pulumi.String("ANY"),
     * 			ConnectionType:    pulumi.String("VPC_LINK"),
     * 			ConnectionId:      pulumi.Any(aws_apigatewayv2_vpc_link.Example.Id),
     * 			TlsConfig: &apigatewayv2.IntegrationTlsConfigArgs{
     * 				ServerNameToVerify: pulumi.String("example.com"),
     * 			},
     * 			RequestParameters: pulumi.StringMap{
     * 				"append:header.authforintegration": pulumi.String("$context.authorizer.authorizerResponse"),
     * 				"overwrite:path":                   pulumi.String("staticValueForIntegration"),
     * 			},
     * 			ResponseParameters: apigatewayv2.IntegrationResponseParameterArray{
     * 				&apigatewayv2.IntegrationResponseParameterArgs{
     * 					StatusCode: pulumi.String("403"),
     * 					Mappings: pulumi.StringMap{
     * 						"append:header.auth": pulumi.String("$context.authorizer.authorizerResponse"),
     * 					},
     * 				},
     * 				&apigatewayv2.IntegrationResponseParameterArgs{
     * 					StatusCode: pulumi.String("200"),
     * 					Mappings: pulumi.StringMap{
     * 						"overwrite:statuscode": pulumi.String("204"),
     * 					},
     * 				},
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.apigatewayv2.Integration;
     * import com.pulumi.aws.apigatewayv2.IntegrationArgs;
     * import com.pulumi.aws.apigatewayv2.inputs.IntegrationTlsConfigArgs;
     * import com.pulumi.aws.apigatewayv2.inputs.IntegrationResponseParameterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var example = new Integration("example", IntegrationArgs.builder()        
     *             .apiId(aws_apigatewayv2_api.example().id())
     *             .credentialsArn(aws_iam_role.example().arn())
     *             .description("Example with a load balancer")
     *             .integrationType("HTTP_PROXY")
     *             .integrationUri(aws_lb_listener.example().arn())
     *             .integrationMethod("ANY")
     *             .connectionType("VPC_LINK")
     *             .connectionId(aws_apigatewayv2_vpc_link.example().id())
     *             .tlsConfig(IntegrationTlsConfigArgs.builder()
     *                 .serverNameToVerify("example.com")
     *                 .build())
     *             .requestParameters(Map.ofEntries(
     *                 Map.entry("append:header.authforintegration", "$context.authorizer.authorizerResponse"),
     *                 Map.entry("overwrite:path", "staticValueForIntegration")
     *             ))
     *             .responseParameters(            
     *                 IntegrationResponseParameterArgs.builder()
     *                     .statusCode(403)
     *                     .mappings(Map.of("append:header.auth", "$context.authorizer.authorizerResponse"))
     *                     .build(),
     *                 IntegrationResponseParameterArgs.builder()
     *                     .statusCode(200)
     *                     .mappings(Map.of("overwrite:statuscode", "204"))
     *                     .build())
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   example:
     *     type: aws:apigatewayv2:Integration
     *     properties:
     *       apiId: ${aws_apigatewayv2_api.example.id}
     *       credentialsArn: ${aws_iam_role.example.arn}
     *       description: Example with a load balancer
     *       integrationType: HTTP_PROXY
     *       integrationUri: ${aws_lb_listener.example.arn}
     *       integrationMethod: ANY
     *       connectionType: VPC_LINK
     *       connectionId: ${aws_apigatewayv2_vpc_link.example.id}
     *       tlsConfig:
     *         serverNameToVerify: example.com
     *       requestParameters:
     *         append:header.authforintegration: $context.authorizer.authorizerResponse
     *         overwrite:path: staticValueForIntegration
     *       responseParameters:
     *         - statusCode: 403
     *           mappings:
     *             append:header.auth: $context.authorizer.authorizerResponse
     *         - statusCode: 200
     *           mappings:
     *             overwrite:statuscode: '204'
     * ```
     * {{% /example %}}
     * {{% /examples %}}
     *
     * ## Import
     *
     * Using `pulumi import`, import `aws_apigatewayv2_integration` using the API identifier and integration identifier. For example:
     *
     * ```sh
     *  $ pulumi import aws:apigatewayv2/integration:Integration example aabbccddee/1122334
     * ```
     *  -> __Note:__ The API Gateway managed integration created as part of [_quick_create_](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-basic-concept.html#apigateway-definition-quick-create) cannot be imported.
     */
    export interface HttpIntegrationArgs {
        /**
         * ID of the VPC link for a private integration. Supported only for HTTP APIs. Must be between 1 and 1024 characters in length.
         */
        connectionId?: pulumi.Input<string>;
        /**
         * Type of the network connection to the integration endpoint. Valid values: `INTERNET`, `VPC_LINK`. Default is `INTERNET`.
         */
        connectionType?: pulumi.Input<string>;
        /**
         * Credentials required for the integration, if any.
         */
        credentialsArn?: pulumi.Input<string>;
        /**
         * Description of the integration.
         */
        description?: pulumi.Input<string>;
        /**
         * Integration's HTTP method. Must be specified if `integration_type` is not `MOCK`.
         */
        integrationMethod?: pulumi.Input<string>;
        /**
         * AWS service action to invoke. Supported only for HTTP APIs when `integration_type` is `AWS_PROXY`. See the [AWS service integration reference](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html) documentation for supported values. Must be between 1 and 128 characters in length.
         */
        integrationSubtype?: pulumi.Input<string>;
        /**
         * Integration type of an integration.
         * Valid values: `AWS` (supported only for WebSocket APIs), `AWS_PROXY`, `HTTP` (supported only for WebSocket APIs), `HTTP_PROXY`, `MOCK` (supported only for WebSocket APIs). For an HTTP API private integration, use `HTTP_PROXY`.
         */
        integrationType?: pulumi.Input<string>;
        /**
         * URI of the Lambda function for a Lambda proxy integration, when `integration_type` is `AWS_PROXY`.
         * For an `HTTP` integration, specify a fully-qualified URL. For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service.
         *  Exactly one of `lambda`, `lambdaInvokeArn` or `integrationUri` must be specified.
         */
        integrationUri?: pulumi.Input<string>;
        /**
         * The ARN of a lambda function to invoke for the integration. This is used to automatically calculate the `integrationType` and `integrationUri` property of the integration and give permission for the API Gateway to execute the lambda. Exactly one of `lambdaArn` or `integrationUri` must be specified.
         */
        lambdaArn?: pulumi.Input<string>;
        /**
         * The [format of the payload](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html#http-api-develop-integrations-lambda.proxy-format) sent to an integration. Valid values: `1.0`, `2.0`. Default is `1.0`.
         */
        payloadFormatVersion?: pulumi.Input<string>;
        /**
         * For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend.
         * For HTTP APIs with a specified `integration_subtype`, a key-value map specifying parameters that are passed to `AWS_PROXY` integrations.
         * For HTTP APIs without a specified `integration_subtype`, a key-value map specifying how to transform HTTP requests before sending them to the backend.
         * See the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html) for details.
         */
        requestParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * Mappings to transform the HTTP response from a backend integration before returning the response to clients. Supported only for HTTP APIs.
         */
        responseParameters?: pulumi.Input<pulumi.Input<pulumiAws.types.input.apigatewayv2.IntegrationResponseParameter>[]>;
        /**
         * Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs.
         * The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.
         * this provider will only perform drift detection of its value when present in a configuration.
         */
        timeoutMilliseconds?: pulumi.Input<number>;
        /**
         * TLS configuration for a private integration. Supported only for HTTP APIs.
         */
        tlsConfig?: pulumi.Input<pulumiAws.types.input.apigatewayv2.IntegrationTlsConfig>;
    }

    /**
     * Manages an Amazon API Gateway Version 2 route.
     * More information can be found in the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/welcome.html) for [WebSocket](https://docs.aws.amazon.com/apigateway/latest/developerguide/websocket-api-develop-routes.html) and [HTTP](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-routes.html) APIs.
     *
     * {{% examples %}}
     * ## Example Usage
     * {{% example %}}
     * ### Basic
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const exampleApi = new aws.apigatewayv2.Api("exampleApi", {
     *     protocolType: "WEBSOCKET",
     *     routeSelectionExpression: "$request.body.action",
     * });
     * const exampleRoute = new aws.apigatewayv2.Route("exampleRoute", {
     *     apiId: exampleApi.id,
     *     routeKey: "$default",
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * example_api = aws.apigatewayv2.Api("exampleApi",
     *     protocol_type="WEBSOCKET",
     *     route_selection_expression="$request.body.action")
     * example_route = aws.apigatewayv2.Route("exampleRoute",
     *     api_id=example_api.id,
     *     route_key="$default")
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var exampleApi = new Aws.ApiGatewayV2.Api("exampleApi", new()
     *     {
     *         ProtocolType = "WEBSOCKET",
     *         RouteSelectionExpression = "$request.body.action",
     *     });
     *
     *     var exampleRoute = new Aws.ApiGatewayV2.Route("exampleRoute", new()
     *     {
     *         ApiId = exampleApi.Id,
     *         RouteKey = "$default",
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigatewayv2"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		exampleApi, err := apigatewayv2.NewApi(ctx, "exampleApi", &apigatewayv2.ApiArgs{
     * 			ProtocolType:             pulumi.String("WEBSOCKET"),
     * 			RouteSelectionExpression: pulumi.String("$request.body.action"),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		_, err = apigatewayv2.NewRoute(ctx, "exampleRoute", &apigatewayv2.RouteArgs{
     * 			ApiId:    exampleApi.ID(),
     * 			RouteKey: pulumi.String("$default"),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.apigatewayv2.Api;
     * import com.pulumi.aws.apigatewayv2.ApiArgs;
     * import com.pulumi.aws.apigatewayv2.Route;
     * import com.pulumi.aws.apigatewayv2.RouteArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var exampleApi = new Api("exampleApi", ApiArgs.builder()        
     *             .protocolType("WEBSOCKET")
     *             .routeSelectionExpression("$request.body.action")
     *             .build());
     *
     *         var exampleRoute = new Route("exampleRoute", RouteArgs.builder()        
     *             .apiId(exampleApi.id())
     *             .routeKey("$default")
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   exampleApi:
     *     type: aws:apigatewayv2:Api
     *     properties:
     *       protocolType: WEBSOCKET
     *       routeSelectionExpression: $request.body.action
     *   exampleRoute:
     *     type: aws:apigatewayv2:Route
     *     properties:
     *       apiId: ${exampleApi.id}
     *       routeKey: $default
     * ```
     * {{% /example %}}
     * {{% example %}}
     * ### HTTP Proxy Integration
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const exampleApi = new aws.apigatewayv2.Api("exampleApi", {protocolType: "HTTP"});
     * const exampleIntegration = new aws.apigatewayv2.Integration("exampleIntegration", {
     *     apiId: exampleApi.id,
     *     integrationType: "HTTP_PROXY",
     *     integrationMethod: "ANY",
     *     integrationUri: "https://example.com/{proxy}",
     * });
     * const exampleRoute = new aws.apigatewayv2.Route("exampleRoute", {
     *     apiId: exampleApi.id,
     *     routeKey: "ANY /example/{proxy+}",
     *     target: pulumi.interpolate`integrations/${exampleIntegration.id}`,
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * example_api = aws.apigatewayv2.Api("exampleApi", protocol_type="HTTP")
     * example_integration = aws.apigatewayv2.Integration("exampleIntegration",
     *     api_id=example_api.id,
     *     integration_type="HTTP_PROXY",
     *     integration_method="ANY",
     *     integration_uri="https://example.com/{proxy}")
     * example_route = aws.apigatewayv2.Route("exampleRoute",
     *     api_id=example_api.id,
     *     route_key="ANY /example/{proxy+}",
     *     target=example_integration.id.apply(lambda id: f"integrations/{id}"))
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var exampleApi = new Aws.ApiGatewayV2.Api("exampleApi", new()
     *     {
     *         ProtocolType = "HTTP",
     *     });
     *
     *     var exampleIntegration = new Aws.ApiGatewayV2.Integration("exampleIntegration", new()
     *     {
     *         ApiId = exampleApi.Id,
     *         IntegrationType = "HTTP_PROXY",
     *         IntegrationMethod = "ANY",
     *         IntegrationUri = "https://example.com/{proxy}",
     *     });
     *
     *     var exampleRoute = new Aws.ApiGatewayV2.Route("exampleRoute", new()
     *     {
     *         ApiId = exampleApi.Id,
     *         RouteKey = "ANY /example/{proxy+}",
     *         Target = exampleIntegration.Id.Apply(id => $"integrations/{id}"),
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"fmt"
     *
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigatewayv2"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		exampleApi, err := apigatewayv2.NewApi(ctx, "exampleApi", &apigatewayv2.ApiArgs{
     * 			ProtocolType: pulumi.String("HTTP"),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		exampleIntegration, err := apigatewayv2.NewIntegration(ctx, "exampleIntegration", &apigatewayv2.IntegrationArgs{
     * 			ApiId:             exampleApi.ID(),
     * 			IntegrationType:   pulumi.String("HTTP_PROXY"),
     * 			IntegrationMethod: pulumi.String("ANY"),
     * 			IntegrationUri:    pulumi.String("https://example.com/{proxy}"),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		_, err = apigatewayv2.NewRoute(ctx, "exampleRoute", &apigatewayv2.RouteArgs{
     * 			ApiId:    exampleApi.ID(),
     * 			RouteKey: pulumi.String("ANY /example/{proxy+}"),
     * 			Target: exampleIntegration.ID().ApplyT(func(id string) (string, error) {
     * 				return fmt.Sprintf("integrations/%v", id), nil
     * 			}).(pulumi.StringOutput),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.apigatewayv2.Api;
     * import com.pulumi.aws.apigatewayv2.ApiArgs;
     * import com.pulumi.aws.apigatewayv2.Integration;
     * import com.pulumi.aws.apigatewayv2.IntegrationArgs;
     * import com.pulumi.aws.apigatewayv2.Route;
     * import com.pulumi.aws.apigatewayv2.RouteArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var exampleApi = new Api("exampleApi", ApiArgs.builder()        
     *             .protocolType("HTTP")
     *             .build());
     *
     *         var exampleIntegration = new Integration("exampleIntegration", IntegrationArgs.builder()        
     *             .apiId(exampleApi.id())
     *             .integrationType("HTTP_PROXY")
     *             .integrationMethod("ANY")
     *             .integrationUri("https://example.com/{proxy}")
     *             .build());
     *
     *         var exampleRoute = new Route("exampleRoute", RouteArgs.builder()        
     *             .apiId(exampleApi.id())
     *             .routeKey("ANY /example/{proxy+}")
     *             .target(exampleIntegration.id().applyValue(id -> String.format("integrations/%s", id)))
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   exampleApi:
     *     type: aws:apigatewayv2:Api
     *     properties:
     *       protocolType: HTTP
     *   exampleIntegration:
     *     type: aws:apigatewayv2:Integration
     *     properties:
     *       apiId: ${exampleApi.id}
     *       integrationType: HTTP_PROXY
     *       integrationMethod: ANY
     *       integrationUri: https://example.com/{proxy}
     *   exampleRoute:
     *     type: aws:apigatewayv2:Route
     *     properties:
     *       apiId: ${exampleApi.id}
     *       routeKey: ANY /example/{proxy+}
     *       target: integrations/${exampleIntegration.id}
     * ```
     * {{% /example %}}
     * {{% /examples %}}
     *
     * ## Import
     *
     * Using `pulumi import`, import `aws_apigatewayv2_route` using the API identifier and route identifier. For example:
     *
     * ```sh
     *  $ pulumi import aws:apigatewayv2/route:Route example aabbccddee/1122334
     * ```
     *  -> __Note:__ The API Gateway managed route created as part of [_quick_create_](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-basic-concept.html#apigateway-definition-quick-create) cannot be imported.
     */
    export interface HttpRouteArgs {
        /**
         * Boolean whether an API key is required for the route. Defaults to `false`. Supported only for WebSocket APIs.
         */
        apiKeyRequired?: pulumi.Input<boolean>;
        /**
         * Authorization scopes supported by this route. The scopes are used with a JWT authorizer to authorize the method invocation.
         */
        authorizationScopes?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Authorization type for the route.
         * For WebSocket APIs, valid values are `NONE` for open access, `AWS_IAM` for using AWS IAM permissions, and `CUSTOM` for using a Lambda authorizer.
         * For HTTP APIs, valid values are `NONE` for open access, `JWT` for using JSON Web Tokens, `AWS_IAM` for using AWS IAM permissions, and `CUSTOM` for using a Lambda authorizer.
         * Defaults to `NONE`.
         */
        authorizationType?: pulumi.Input<string>;
        /**
         * Details of the authorizer to be created for this route. Only one of `authorizer`, `authorizerName` or `target` can be specified.
         */
        authorizer?: inputs.apigatewayv2.HttpAuthorizerArgs;
        /**
         * Identifier of the `aws.apigatewayv2.Authorizer` resource to be associated with this route.
         */
        authorizerId?: pulumi.Input<string>;
        /**
         * The name of the target authorizer for the route specified in the `authorizers` property. This is used to automatically calculate the `authorizerId` property of the route.
         */
        authorizerName?: pulumi.Input<string>;
        /**
         * Details of the integration to be created for this route. Only one of `integration`, `integrationName` or `target` can be specified.
         */
        integration?: inputs.apigatewayv2.HttpIntegrationArgs;
        /**
         * The name of the target integration for the route specified in the `integrations` property. This is used to automatically calculate the `target` property of the route. Only one of `integration`, `integrationName` or `target` can be specified. This does not need to be prefixed with "integrations/".
         */
        integrationName?: pulumi.Input<string>;
        /**
         * Operation name for the route. Must be between 1 and 64 characters in length.
         */
        operationName?: pulumi.Input<string>;
        /**
         * Target for the route, of the form `integrations/`*`IntegrationID`*, where *`IntegrationID`* is the identifier of an `aws.apigatewayv2.Integration` resource.
         *  Only one of `integration`, `integrationName` or `target` can be specified.
         */
        target?: pulumi.Input<string>;
    }

    /**
     * Manages an Amazon API Gateway Version 2 stage.
     * More information can be found in the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html).
     *
     * {{% examples %}}
     * ## Example Usage
     * {{% example %}}
     * ### Basic
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const example = new aws.apigatewayv2.Stage("example", {apiId: aws_apigatewayv2_api.example.id});
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * example = aws.apigatewayv2.Stage("example", api_id=aws_apigatewayv2_api["example"]["id"])
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var example = new Aws.ApiGatewayV2.Stage("example", new()
     *     {
     *         ApiId = aws_apigatewayv2_api.Example.Id,
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigatewayv2"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		_, err := apigatewayv2.NewStage(ctx, "example", &apigatewayv2.StageArgs{
     * 			ApiId: pulumi.Any(aws_apigatewayv2_api.Example.Id),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.apigatewayv2.Stage;
     * import com.pulumi.aws.apigatewayv2.StageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var example = new Stage("example", StageArgs.builder()        
     *             .apiId(aws_apigatewayv2_api.example().id())
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   example:
     *     type: aws:apigatewayv2:Stage
     *     properties:
     *       apiId: ${aws_apigatewayv2_api.example.id}
     * ```
     * {{% /example %}}
     * {{% /examples %}}
     *
     * ## Import
     *
     * Using `pulumi import`, import `aws_apigatewayv2_stage` using the API identifier and stage name. For example:
     *
     * ```sh
     *  $ pulumi import aws:apigatewayv2/stage:Stage example aabbccddee/example-stage
     * ```
     *  -> __Note:__ The API Gateway managed stage created as part of [_quick_create_](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-basic-concept.html#apigateway-definition-quick-create) cannot be imported.
     */
    export interface HttpStageArgs {
        /**
         * Settings for logging access in this stage.
         * Use the `aws.apigateway.Account` resource to configure [permissions for CloudWatch Logging](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html#set-up-access-logging-permissions).
         */
        accessLogSettings?: pulumi.Input<pulumiAws.types.input.apigatewayv2.StageAccessLogSettings>;
        /**
         * Whether updates to an API automatically trigger a new deployment. Defaults to `false`. Applicable for HTTP APIs.
         */
        autoDeploy?: pulumi.Input<boolean>;
        /**
         * Identifier of a client certificate for the stage. Use the `aws.apigateway.ClientCertificate` resource to configure a client certificate.
         * Supported only for WebSocket APIs.
         */
        clientCertificateId?: pulumi.Input<string>;
        /**
         * Default route settings for the stage.
         */
        defaultRouteSettings?: pulumi.Input<pulumiAws.types.input.apigatewayv2.StageDefaultRouteSettings>;
        /**
         * Deployment identifier of the stage. Use the `aws.apigatewayv2.Deployment` resource to configure a deployment.
         */
        deploymentId?: pulumi.Input<string>;
        /**
         * Description for the stage. Must be less than or equal to 1024 characters in length.
         */
        description?: pulumi.Input<string>;
        /**
         * Name of the stage. Must be between 1 and 128 characters in length.
         *
         * The following arguments are optional:
         */
        name?: pulumi.Input<string>;
        /**
         * Route settings for the stage.
         */
        routeSettings?: pulumi.Input<pulumi.Input<pulumiAws.types.input.apigatewayv2.StageRouteSetting>[]>;
        /**
         * Map that defines the stage variables for the stage.
         */
        stageVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * Map of tags to assign to the stage. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         */
        tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    }
}

export namespace awsx {
    /**
     * The set of arguments for constructing a Bucket resource.
     */
    export interface BucketArgs {
        /**
         * Sets the accelerate configuration of an existing bucket. Can be `Enabled` or `Suspended`.
         */
        accelerationStatus?: pulumi.Input<string>;
        /**
         * The [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) to apply. Valid values are `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, and `log-delivery-write`. Defaults to `private`.  Conflicts with `grant`.
         */
        acl?: pulumi.Input<string>;
        /**
         * The ARN of the bucket. Will be of format `arn:aws:s3:::bucketname`.
         */
        arn?: pulumi.Input<string>;
        /**
         * The name of the bucket. If omitted, this provider will assign a random, unique name. Must be lowercase and less than or equal to 63 characters in length. A full list of bucket naming rules [may be found here](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html).
         */
        bucket?: pulumi.Input<string>;
        /**
         * Creates a unique bucket name beginning with the specified prefix. Conflicts with `bucket`. Must be lowercase and less than or equal to 37 characters in length. A full list of bucket naming rules [may be found here](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html).
         */
        bucketPrefix?: pulumi.Input<string>;
        /**
         * A rule of [Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) (documented below).
         */
        corsRules?: pulumi.Input<pulumi.Input<pulumiAws.types.input.s3.BucketCorsRule>[]>;
        /**
         * A boolean that indicates all objects (including any [locked objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html)) should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.
         */
        forceDestroy?: pulumi.Input<boolean>;
        /**
         * An [ACL policy grant](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#sample-acl) (documented below). Conflicts with `acl`.
         */
        grants?: pulumi.Input<pulumi.Input<pulumiAws.types.input.s3.BucketGrant>[]>;
        /**
         * The [Route 53 Hosted Zone ID](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_website_region_endpoints) for this bucket's region.
         */
        hostedZoneId?: pulumi.Input<string>;
        /**
         * A configuration of [object lifecycle management](http://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) (documented below).
         */
        lifecycleRules?: pulumi.Input<pulumi.Input<pulumiAws.types.input.s3.BucketLifecycleRule>[]>;
        /**
         * A settings of [bucket logging](https://docs.aws.amazon.com/AmazonS3/latest/UG/ManagingBucketLogging.html) (documented below).
         */
        loggings?: pulumi.Input<pulumi.Input<pulumiAws.types.input.s3.BucketLogging>[]>;
        /**
         * A configuration of [S3 object locking](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html) (documented below)
         *
         * > **NOTE:** You cannot use `acceleration_status` in `cn-north-1` or `us-gov-west-1`
         */
        objectLockConfiguration?: pulumi.Input<pulumiAws.types.input.s3.BucketObjectLockConfiguration>;
        /**
         * A valid [bucket policy](https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html) JSON document. Note that if the policy document is not specific enough (but still valid), this provider may view the policy as constantly changing in a `pulumi preview`. In this case, please make sure you use the verbose/specific version of the policy.
         */
        policy?: pulumi.Input<string>;
        /**
         * A configuration of [replication configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/crr.html) (documented below).
         */
        replicationConfiguration?: pulumi.Input<pulumiAws.types.input.s3.BucketReplicationConfiguration>;
        /**
         * Specifies who should bear the cost of Amazon S3 data transfer.
         * Can be either `BucketOwner` or `Requester`. By default, the owner of the S3 bucket would incur
         * the costs of any data transfer. See [Requester Pays Buckets](http://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html)
         * developer guide for more information.
         */
        requestPayer?: pulumi.Input<string>;
        /**
         * A configuration of [server-side encryption configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) (documented below)
         */
        serverSideEncryptionConfiguration?: pulumi.Input<pulumiAws.types.input.s3.BucketServerSideEncryptionConfiguration>;
        /**
         * A map of tags to assign to the bucket. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         */
        tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * A state of [versioning](https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html) (documented below)
         */
        versioning?: pulumi.Input<pulumiAws.types.input.s3.BucketVersioning>;
        /**
         * A website object (documented below).
         */
        website?: pulumi.Input<pulumiAws.types.input.s3.BucketWebsite>;
        /**
         * The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string. This is used to create Route 53 alias records.
         */
        websiteDomain?: pulumi.Input<string>;
        /**
         * The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
         */
        websiteEndpoint?: pulumi.Input<string>;
    }

    /**
     * Log group with default setup unless explicitly skipped.
     */
    export interface DefaultLogGroupArgs {
        /**
         * Arguments to use instead of the default values during creation.
         */
        args?: inputs.awsx.LogGroupArgs;
        /**
         * Identity of an existing log group to use. Cannot be used in combination with `args` or `opts`.
         */
        existing?: inputs.awsx.ExistingLogGroupArgs;
        /**
         * Skip creation of the log group.
         */
        skip?: boolean;
    }

    /**
     * Role and policy attachments with default setup unless explicitly skipped or an existing role ARN provided.
     */
    export interface DefaultRoleWithPolicyArgs {
        /**
         * Args to use when creating the role and policies. Can't be specified if `roleArn` is used.
         */
        args?: inputs.awsx.RoleWithPolicyArgs;
        /**
         * ARN of existing role to use instead of creating a new role. Cannot be used in combination with `args` or `opts`.
         */
        roleArn?: pulumi.Input<string>;
        /**
         * Skips creation of the role if set to `true`.
         */
        skip?: boolean;
    }

    /**
     * Security Group with default setup unless explicitly skipped or an existing security group id provided.
     */
    export interface DefaultSecurityGroupArgs {
        /**
         * Args to use when creating the security group. Can't be specified if `securityGroupId` is used.
         */
        args?: inputs.awsx.SecurityGroupArgs;
        /**
         * Id of existing security group to use instead of creating a new security group. Cannot be used in combination with `args` or `opts`.
         */
        securityGroupId?: pulumi.Input<string>;
        /**
         * Skips creation of the security group if set to `true`.
         */
        skip?: boolean;
    }
    /**
     * defaultSecurityGroupArgsProvideDefaults sets the appropriate defaults for DefaultSecurityGroupArgs
     */
    export function defaultSecurityGroupArgsProvideDefaults(val: DefaultSecurityGroupArgs): DefaultSecurityGroupArgs {
        return {
            ...val,
            args: (val.args ? inputs.awsx.securityGroupArgsProvideDefaults(val.args) : undefined),
        };
    }

    /**
     * Reference to an existing bucket.
     */
    export interface ExistingBucketArgs {
        /**
         * Arn of the bucket. Only one of [arn] or [name] can be specified.
         */
        arn?: pulumi.Input<string>;
        /**
         * Name of the bucket. Only one of [arn] or [name] can be specified.
         */
        name?: pulumi.Input<string>;
    }

    /**
     * Reference to an existing log group.
     */
    export interface ExistingLogGroupArgs {
        /**
         * Arn of the log group. Only one of [arn] or [name] can be specified.
         */
        arn?: pulumi.Input<string>;
        /**
         * Name of the log group. Only one of [arn] or [name] can be specified.
         */
        name?: pulumi.Input<string>;
        /**
         * Region of the log group. If not specified, the provider region will be used.
         */
        region?: pulumi.Input<string>;
    }

    /**
     * The set of arguments for constructing a LogGroup resource.
     */
    export interface LogGroupArgs {
        /**
         * The ARN of the KMS Key to use when encrypting log data. Please note, after the AWS KMS CMK is disassociated from the log group,
         * AWS CloudWatch Logs stops encrypting newly ingested data for the log group. All previously ingested data remains encrypted, and AWS CloudWatch Logs requires
         * permissions for the CMK whenever the encrypted data is requested.
         */
        kmsKeyId?: pulumi.Input<string>;
        /**
         * The name of the log group. If omitted, this provider will assign a random, unique name.
         */
        name?: pulumi.Input<string>;
        /**
         * Creates a unique name beginning with the specified prefix. Conflicts with `name`.
         */
        namePrefix?: pulumi.Input<string>;
        /**
         * Specifies the number of days
         * you want to retain log events in the specified log group.  Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, 3653, and 0.
         * If you select 0, the events in the log group are always retained and never expire.
         */
        retentionInDays?: pulumi.Input<number>;
        /**
         * Set to true if you do not wish the log group (and any logs it may contain) to be deleted at destroy time, and instead just remove the log group from the state.
         */
        skipDestroy?: pulumi.Input<boolean>;
        /**
         * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         */
        tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    }

    /**
     * Log group which is only created if enabled.
     */
    export interface OptionalLogGroupArgs {
        /**
         * Arguments to use instead of the default values during creation.
         */
        args?: inputs.awsx.LogGroupArgs;
        /**
         * Enable creation of the log group.
         */
        enable?: boolean;
        /**
         * Identity of an existing log group to use. Cannot be used in combination with `args` or `opts`.
         */
        existing?: inputs.awsx.ExistingLogGroupArgs;
    }

    /**
     * Bucket with default setup.
     */
    export interface RequiredBucketArgs {
        /**
         * Arguments to use instead of the default values during creation.
         */
        args?: inputs.awsx.BucketArgs;
        /**
         * Identity of an existing bucket to use. Cannot be used in combination with `args`.
         */
        existing?: inputs.awsx.ExistingBucketArgs;
    }

    /**
     * The set of arguments for constructing a Role resource and Policy attachments.
     */
    export interface RoleWithPolicyArgs {
        /**
         * Description of the role.
         */
        description?: pulumi.Input<string>;
        /**
         * Whether to force detaching any policies the role has before destroying it. Defaults to `false`.
         */
        forceDetachPolicies?: pulumi.Input<boolean>;
        /**
         * Configuration block defining an exclusive set of IAM inline policies associated with the IAM role. See below. If no blocks are configured, the provider will not manage any inline policies in this resource. Configuring one empty block (i.e., `inline_policy {}`) will cause the provider to remove _all_ inline policies added out of band on `apply`.
         */
        inlinePolicies?: pulumi.Input<pulumi.Input<pulumiAws.types.input.iam.RoleInlinePolicy>[]>;
        managedPolicyArns?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
         */
        maxSessionDuration?: pulumi.Input<number>;
        /**
         * Friendly name of the role. If omitted, the provider will assign a random, unique name. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
         */
        name?: pulumi.Input<string>;
        /**
         * Creates a unique friendly name beginning with the specified prefix. Conflicts with `name`.
         */
        namePrefix?: pulumi.Input<string>;
        /**
         * Path to the role. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) for more information.
         */
        path?: pulumi.Input<string>;
        /**
         * ARN of the policy that is used to set the permissions boundary for the role.
         */
        permissionsBoundary?: pulumi.Input<string>;
        /**
         * ARNs of the policies to attach to the created role.
         */
        policyArns?: string[];
        /**
         * Key-value mapping of tags for the IAM role. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         */
        tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    }

    /**
     * The set of arguments for constructing a Security Group resource.
     */
    export interface SecurityGroupArgs {
        /**
         * Security group description. Defaults to `Managed by Pulumi`. Cannot be `""`. **NOTE**: This field maps to the AWS `GroupDescription` attribute, for which there is no Update API. If you'd like to classify your security groups in a way that can be updated, use `tags`.
         */
        description?: pulumi.Input<string>;
        /**
         * Configuration block for egress rules. Can be specified multiple times for each egress rule. Each egress block supports fields documented below. This argument is processed in attribute-as-blocks mode.
         */
        egress?: pulumi.Input<pulumi.Input<pulumiAws.types.input.ec2.SecurityGroupEgress>[]>;
        /**
         * Configuration block for ingress rules. Can be specified multiple times for each ingress rule. Each ingress block supports fields documented below. This argument is processed in attribute-as-blocks mode.
         */
        ingress?: pulumi.Input<pulumi.Input<pulumiAws.types.input.ec2.SecurityGroupIngress>[]>;
        /**
         * Name of the security group. If omitted, the provider will assign a random, unique name.
         */
        name?: pulumi.Input<string>;
        /**
         * Creates a unique name beginning with the specified prefix. Conflicts with `name`.
         */
        namePrefix?: pulumi.Input<string>;
        /**
         * Instruct the provider to revoke all of the Security Groups attached ingress and egress rules before deleting the rule itself. This is normally not needed, however certain AWS services such as Elastic Map Reduce may automatically add required rules to security groups used with the service, and those rules may contain a cyclic dependency that prevent the security groups from being destroyed without removing the dependency first. Default `false`.
         */
        revokeRulesOnDelete?: pulumi.Input<boolean>;
        /**
         * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         */
        tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * VPC ID. Defaults to the region's default VPC.
         */
        vpcId?: pulumi.Input<string>;
    }
    /**
     * securityGroupArgsProvideDefaults sets the appropriate defaults for SecurityGroupArgs
     */
    export function securityGroupArgsProvideDefaults(val: SecurityGroupArgs): SecurityGroupArgs {
        return {
            ...val,
            description: (val.description) ?? "Managed by Pulumi",
        };
    }
}

export namespace cloudtrail {
}

export namespace ec2 {
    /**
     * Configuration for NAT Gateways.
     */
    export interface NatGatewayConfigurationArgs {
        /**
         * A list of EIP allocation IDs to assign to the NAT Gateways. Optional. If specified, the number of supplied values must match the chosen strategy (either one, or the number of availability zones).
         */
        elasticIpAllocationIds?: pulumi.Input<string>[];
        /**
         * The strategy for deploying NAT Gateways.
         */
        strategy: enums.ec2.NatGatewayStrategy;
    }

    /**
     * Configuration for a VPC subnet.
     */
    export interface SubnetSpecArgs {
        /**
         * An optional list of CIDR blocks to assign to the subnet spec for each AZ. If specified, the count must match the number of AZs being used for the VPC, and must also be specified for all other subnet specs.
         */
        cidrBlocks?: string[];
        /**
         * The netmask for the subnet's CIDR block. This is optional, the default value is inferred from the `cidrMask`, `cidrBlocks` or based on an even distribution of available space from the VPC's CIDR block after being divided evenly by availability zone.
         */
        cidrMask?: number;
        /**
         * The subnet's name. Will be templated upon creation.
         */
        name?: string;
        /**
         * Optional size of the subnet's CIDR block - the number of hosts. This value must be a power of 2 (e.g. 256, 512, 1024, etc.). This is optional, the default value is inferred from the `cidrMask`, `cidrBlocks` or based on an even distribution of available space from the VPC's CIDR block after being divided evenly by availability zone.
         */
        size?: number;
        /**
         * A map of tags to assign to the resource.
         */
        tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * The type of subnet.
         */
        type: enums.ec2.SubnetType;
    }

    /**
     * Provides a VPC Endpoint resource.
     *
     * > **NOTE on VPC Endpoints and VPC Endpoint Associations:** The provider provides both standalone VPC Endpoint Associations for
     * Route Tables - (an association between a VPC endpoint and a single `route_table_id`),
     * Security Groups - (an association between a VPC endpoint and a single `security_group_id`),
     * and Subnets - (an association between a VPC endpoint and a single `subnet_id`) and
     * a VPC Endpoint resource with `route_table_ids` and `subnet_ids` attributes.
     * Do not use the same resource ID in both a VPC Endpoint resource and a VPC Endpoint Association resource.
     * Doing so will cause a conflict of associations and will overwrite the association.
     *
     * {{% examples %}}
     * ## Example Usage
     * {{% example %}}
     * ### Basic
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const s3 = new aws.ec2.VpcEndpoint("s3", {
     *     vpcId: aws_vpc.main.id,
     *     serviceName: "com.amazonaws.us-west-2.s3",
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * s3 = aws.ec2.VpcEndpoint("s3",
     *     vpc_id=aws_vpc["main"]["id"],
     *     service_name="com.amazonaws.us-west-2.s3")
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var s3 = new Aws.Ec2.VpcEndpoint("s3", new()
     *     {
     *         VpcId = aws_vpc.Main.Id,
     *         ServiceName = "com.amazonaws.us-west-2.s3",
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		_, err := ec2.NewVpcEndpoint(ctx, "s3", &ec2.VpcEndpointArgs{
     * 			VpcId:       pulumi.Any(aws_vpc.Main.Id),
     * 			ServiceName: pulumi.String("com.amazonaws.us-west-2.s3"),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.ec2.VpcEndpoint;
     * import com.pulumi.aws.ec2.VpcEndpointArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var s3 = new VpcEndpoint("s3", VpcEndpointArgs.builder()        
     *             .vpcId(aws_vpc.main().id())
     *             .serviceName("com.amazonaws.us-west-2.s3")
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   s3:
     *     type: aws:ec2:VpcEndpoint
     *     properties:
     *       vpcId: ${aws_vpc.main.id}
     *       serviceName: com.amazonaws.us-west-2.s3
     * ```
     * {{% /example %}}
     * {{% example %}}
     * ### Basic w/ Tags
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const s3 = new aws.ec2.VpcEndpoint("s3", {
     *     vpcId: aws_vpc.main.id,
     *     serviceName: "com.amazonaws.us-west-2.s3",
     *     tags: {
     *         Environment: "test",
     *     },
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * s3 = aws.ec2.VpcEndpoint("s3",
     *     vpc_id=aws_vpc["main"]["id"],
     *     service_name="com.amazonaws.us-west-2.s3",
     *     tags={
     *         "Environment": "test",
     *     })
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var s3 = new Aws.Ec2.VpcEndpoint("s3", new()
     *     {
     *         VpcId = aws_vpc.Main.Id,
     *         ServiceName = "com.amazonaws.us-west-2.s3",
     *         Tags = 
     *         {
     *             { "Environment", "test" },
     *         },
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		_, err := ec2.NewVpcEndpoint(ctx, "s3", &ec2.VpcEndpointArgs{
     * 			VpcId:       pulumi.Any(aws_vpc.Main.Id),
     * 			ServiceName: pulumi.String("com.amazonaws.us-west-2.s3"),
     * 			Tags: pulumi.StringMap{
     * 				"Environment": pulumi.String("test"),
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.ec2.VpcEndpoint;
     * import com.pulumi.aws.ec2.VpcEndpointArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var s3 = new VpcEndpoint("s3", VpcEndpointArgs.builder()        
     *             .vpcId(aws_vpc.main().id())
     *             .serviceName("com.amazonaws.us-west-2.s3")
     *             .tags(Map.of("Environment", "test"))
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   s3:
     *     type: aws:ec2:VpcEndpoint
     *     properties:
     *       vpcId: ${aws_vpc.main.id}
     *       serviceName: com.amazonaws.us-west-2.s3
     *       tags:
     *         Environment: test
     * ```
     * {{% /example %}}
     * {{% example %}}
     * ### Interface Endpoint Type
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const ec2 = new aws.ec2.VpcEndpoint("ec2", {
     *     vpcId: aws_vpc.main.id,
     *     serviceName: "com.amazonaws.us-west-2.ec2",
     *     vpcEndpointType: "Interface",
     *     securityGroupIds: [aws_security_group.sg1.id],
     *     privateDnsEnabled: true,
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * ec2 = aws.ec2.VpcEndpoint("ec2",
     *     vpc_id=aws_vpc["main"]["id"],
     *     service_name="com.amazonaws.us-west-2.ec2",
     *     vpc_endpoint_type="Interface",
     *     security_group_ids=[aws_security_group["sg1"]["id"]],
     *     private_dns_enabled=True)
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var ec2 = new Aws.Ec2.VpcEndpoint("ec2", new()
     *     {
     *         VpcId = aws_vpc.Main.Id,
     *         ServiceName = "com.amazonaws.us-west-2.ec2",
     *         VpcEndpointType = "Interface",
     *         SecurityGroupIds = new[]
     *         {
     *             aws_security_group.Sg1.Id,
     *         },
     *         PrivateDnsEnabled = true,
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		_, err := ec2.NewVpcEndpoint(ctx, "ec2", &ec2.VpcEndpointArgs{
     * 			VpcId:           pulumi.Any(aws_vpc.Main.Id),
     * 			ServiceName:     pulumi.String("com.amazonaws.us-west-2.ec2"),
     * 			VpcEndpointType: pulumi.String("Interface"),
     * 			SecurityGroupIds: pulumi.StringArray{
     * 				aws_security_group.Sg1.Id,
     * 			},
     * 			PrivateDnsEnabled: pulumi.Bool(true),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.ec2.VpcEndpoint;
     * import com.pulumi.aws.ec2.VpcEndpointArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var ec2 = new VpcEndpoint("ec2", VpcEndpointArgs.builder()        
     *             .vpcId(aws_vpc.main().id())
     *             .serviceName("com.amazonaws.us-west-2.ec2")
     *             .vpcEndpointType("Interface")
     *             .securityGroupIds(aws_security_group.sg1().id())
     *             .privateDnsEnabled(true)
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   ec2:
     *     type: aws:ec2:VpcEndpoint
     *     properties:
     *       vpcId: ${aws_vpc.main.id}
     *       serviceName: com.amazonaws.us-west-2.ec2
     *       vpcEndpointType: Interface
     *       securityGroupIds:
     *         - ${aws_security_group.sg1.id}
     *       privateDnsEnabled: true
     * ```
     * {{% /example %}}
     * {{% example %}}
     * ### Gateway Load Balancer Endpoint Type
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const current = aws.getCallerIdentity({});
     * const exampleVpcEndpointService = new aws.ec2.VpcEndpointService("exampleVpcEndpointService", {
     *     acceptanceRequired: false,
     *     allowedPrincipals: [current.then(current => current.arn)],
     *     gatewayLoadBalancerArns: [aws_lb.example.arn],
     * });
     * const exampleVpcEndpoint = new aws.ec2.VpcEndpoint("exampleVpcEndpoint", {
     *     serviceName: exampleVpcEndpointService.serviceName,
     *     subnetIds: [aws_subnet.example.id],
     *     vpcEndpointType: exampleVpcEndpointService.serviceType,
     *     vpcId: aws_vpc.example.id,
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * current = aws.get_caller_identity()
     * example_vpc_endpoint_service = aws.ec2.VpcEndpointService("exampleVpcEndpointService",
     *     acceptance_required=False,
     *     allowed_principals=[current.arn],
     *     gateway_load_balancer_arns=[aws_lb["example"]["arn"]])
     * example_vpc_endpoint = aws.ec2.VpcEndpoint("exampleVpcEndpoint",
     *     service_name=example_vpc_endpoint_service.service_name,
     *     subnet_ids=[aws_subnet["example"]["id"]],
     *     vpc_endpoint_type=example_vpc_endpoint_service.service_type,
     *     vpc_id=aws_vpc["example"]["id"])
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var current = Aws.GetCallerIdentity.Invoke();
     *
     *     var exampleVpcEndpointService = new Aws.Ec2.VpcEndpointService("exampleVpcEndpointService", new()
     *     {
     *         AcceptanceRequired = false,
     *         AllowedPrincipals = new[]
     *         {
     *             current.Apply(getCallerIdentityResult => getCallerIdentityResult.Arn),
     *         },
     *         GatewayLoadBalancerArns = new[]
     *         {
     *             aws_lb.Example.Arn,
     *         },
     *     });
     *
     *     var exampleVpcEndpoint = new Aws.Ec2.VpcEndpoint("exampleVpcEndpoint", new()
     *     {
     *         ServiceName = exampleVpcEndpointService.ServiceName,
     *         SubnetIds = new[]
     *         {
     *             aws_subnet.Example.Id,
     *         },
     *         VpcEndpointType = exampleVpcEndpointService.ServiceType,
     *         VpcId = aws_vpc.Example.Id,
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws"
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		current, err := aws.GetCallerIdentity(ctx, nil, nil)
     * 		if err != nil {
     * 			return err
     * 		}
     * 		exampleVpcEndpointService, err := ec2.NewVpcEndpointService(ctx, "exampleVpcEndpointService", &ec2.VpcEndpointServiceArgs{
     * 			AcceptanceRequired: pulumi.Bool(false),
     * 			AllowedPrincipals: pulumi.StringArray{
     * 				*pulumi.String(current.Arn),
     * 			},
     * 			GatewayLoadBalancerArns: pulumi.StringArray{
     * 				aws_lb.Example.Arn,
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		_, err = ec2.NewVpcEndpoint(ctx, "exampleVpcEndpoint", &ec2.VpcEndpointArgs{
     * 			ServiceName: exampleVpcEndpointService.ServiceName,
     * 			SubnetIds: pulumi.StringArray{
     * 				aws_subnet.Example.Id,
     * 			},
     * 			VpcEndpointType: exampleVpcEndpointService.ServiceType,
     * 			VpcId:           pulumi.Any(aws_vpc.Example.Id),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.AwsFunctions;
     * import com.pulumi.aws.inputs.GetCallerIdentityArgs;
     * import com.pulumi.aws.ec2.VpcEndpointService;
     * import com.pulumi.aws.ec2.VpcEndpointServiceArgs;
     * import com.pulumi.aws.ec2.VpcEndpoint;
     * import com.pulumi.aws.ec2.VpcEndpointArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         final var current = AwsFunctions.getCallerIdentity();
     *
     *         var exampleVpcEndpointService = new VpcEndpointService("exampleVpcEndpointService", VpcEndpointServiceArgs.builder()        
     *             .acceptanceRequired(false)
     *             .allowedPrincipals(current.applyValue(getCallerIdentityResult -> getCallerIdentityResult.arn()))
     *             .gatewayLoadBalancerArns(aws_lb.example().arn())
     *             .build());
     *
     *         var exampleVpcEndpoint = new VpcEndpoint("exampleVpcEndpoint", VpcEndpointArgs.builder()        
     *             .serviceName(exampleVpcEndpointService.serviceName())
     *             .subnetIds(aws_subnet.example().id())
     *             .vpcEndpointType(exampleVpcEndpointService.serviceType())
     *             .vpcId(aws_vpc.example().id())
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   exampleVpcEndpointService:
     *     type: aws:ec2:VpcEndpointService
     *     properties:
     *       acceptanceRequired: false
     *       allowedPrincipals:
     *         - ${current.arn}
     *       gatewayLoadBalancerArns:
     *         - ${aws_lb.example.arn}
     *   exampleVpcEndpoint:
     *     type: aws:ec2:VpcEndpoint
     *     properties:
     *       serviceName: ${exampleVpcEndpointService.serviceName}
     *       subnetIds:
     *         - ${aws_subnet.example.id}
     *       vpcEndpointType: ${exampleVpcEndpointService.serviceType}
     *       vpcId: ${aws_vpc.example.id}
     * variables:
     *   current:
     *     fn::invoke:
     *       Function: aws:getCallerIdentity
     *       Arguments: {}
     * ```
     * {{% /example %}}
     * {{% /examples %}}
     *
     * ## Import
     *
     * Using `pulumi import`, import VPC Endpoints using the VPC endpoint `id`. For example:
     *
     * ```sh
     *  $ pulumi import aws:ec2/vpcEndpoint:VpcEndpoint endpoint1 vpce-3ecf2a57
     * ```
     *  
     */
    export interface VpcEndpointSpecArgs {
        /**
         * Accept the VPC endpoint (the VPC endpoint and service need to be in the same AWS account).
         */
        autoAccept?: boolean;
        /**
         * The DNS options for the endpoint. See dns_options below.
         */
        dnsOptions?: pulumi.Input<pulumiAws.types.input.ec2.VpcEndpointDnsOptions>;
        /**
         * The IP address type for the endpoint. Valid values are `ipv4`, `dualstack`, and `ipv6`.
         */
        ipAddressType?: pulumi.Input<string>;
        /**
         * A policy to attach to the endpoint that controls access to the service. This is a JSON formatted string. Defaults to full access. All `Gateway` and some `Interface` endpoints support policies - see the [relevant AWS documentation](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html) for more details.
         */
        policy?: pulumi.Input<string>;
        /**
         * Whether or not to associate a private hosted zone with the specified VPC. Applicable for endpoints of type Interface. Defaults to `false`.
         */
        privateDnsEnabled?: boolean;
        /**
         * One or more route table IDs. Applicable for endpoints of type `Gateway`.
         */
        routeTableIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The ID of one or more security groups to associate with the network interface. Applicable for endpoints of type `Interface`.
         * If no security groups are specified, the VPC's [default security group](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html#DefaultSecurityGroup) is associated with the endpoint.
         */
        securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The service name. For AWS services the service name is usually in the form `com.amazonaws.<region>.<service>` (the SageMaker Notebook service is an exception to this rule, the service name is in the form `aws.sagemaker.<region>.notebook`).
         */
        serviceName: string;
        /**
         * The ID of one or more subnets in which to create a network interface for the endpoint. Applicable for endpoints of type `GatewayLoadBalancer` and `Interface`. Interface type endpoints cannot function without being assigned to a subnet.
         */
        subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         */
        tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * The VPC endpoint type, `Gateway`, `GatewayLoadBalancer`, or `Interface`. Defaults to `Gateway`.
         */
        vpcEndpointType?: pulumi.Input<string>;
    }
}

export namespace ecr {
    /**
     * Simplified lifecycle policy model consisting of one or more rules that determine which images in a repository should be expired. See https://docs.aws.amazon.com/AmazonECR/latest/userguide/lifecycle_policy_examples.html for more details.
     */
    export interface LifecyclePolicyArgs {
        /**
         * Specifies the rules to determine how images should be retired from this repository. Rules are ordered from lowest priority to highest.  If there is a rule with a `selection` value of `any`, then it will have the highest priority.
         */
        rules?: pulumi.Input<pulumi.Input<inputs.ecr.LifecyclePolicyRuleArgs>[]>;
        /**
         * Skips creation of the policy if set to `true`.
         */
        skip?: boolean;
    }

    /**
     * A lifecycle policy rule that determine which images in a repository should be expired.
     */
    export interface LifecyclePolicyRuleArgs {
        /**
         * Describes the purpose of a rule within a lifecycle policy.
         */
        description?: pulumi.Input<string>;
        /**
         * The maximum age limit (in days) for your images. Either [maximumNumberOfImages] or [maximumAgeLimit] must be provided.
         */
        maximumAgeLimit?: pulumi.Input<number>;
        /**
         * The maximum number of images that you want to retain in your repository. Either [maximumNumberOfImages] or [maximumAgeLimit] must be provided.
         */
        maximumNumberOfImages?: pulumi.Input<number>;
        /**
         * A list of image tag prefixes on which to take action with your lifecycle policy. Only used if you specified "tagStatus": "tagged". For example, if your images are tagged as prod, prod1, prod2, and so on, you would use the tag prefix prod to specify all of them. If you specify multiple tags, only the images with all specified tags are selected.
         */
        tagPrefixList?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Determines whether the lifecycle policy rule that you are adding specifies a tag for an image. Acceptable options are tagged, untagged, or any. If you specify any, then all images have the rule evaluated against them. If you specify tagged, then you must also specify a tagPrefixList value. If you specify untagged, then you must omit tagPrefixList.
         */
        tagStatus: pulumi.Input<enums.ecr.LifecycleTagStatus>;
    }
}

export namespace ecs {
    /**
     * Create a TaskDefinition resource with the given unique name, arguments, and options.
     * Creates required log-group and task & execution roles.
     * Presents required Service load balancers if target group included in port mappings.
     */
    export interface EC2ServiceTaskDefinitionArgs {
        /**
         * Single container to make a TaskDefinition from.  Useful for simple cases where there aren't
         * multiple containers, especially when creating a TaskDefinition to call [run] on.
         *
         * Either [container] or [containers] must be provided.
         */
        container?: inputs.ecs.TaskDefinitionContainerDefinitionArgs;
        /**
         * All the containers to make a TaskDefinition from.  Useful when creating a Service that will
         * contain many containers within.
         *
         * Either [container] or [containers] must be provided.
         */
        containers?: {[key: string]: inputs.ecs.TaskDefinitionContainerDefinitionArgs};
        /**
         * The number of cpu units used by the task. If not provided, a default will be computed based on the cumulative needs specified by [containerDefinitions]
         */
        cpu?: pulumi.Input<string>;
        /**
         * The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
         */
        ephemeralStorage?: pulumi.Input<pulumiAws.types.input.ecs.TaskDefinitionEphemeralStorage>;
        /**
         * The execution role that the Amazon ECS container agent and the Docker daemon can assume.
         * Will be created automatically if not defined.
         */
        executionRole?: inputs.awsx.DefaultRoleWithPolicyArgs;
        /**
         * An optional unique name for your task definition. If not specified, then a default will be created.
         */
        family?: pulumi.Input<string>;
        /**
         * Configuration block(s) with Inference Accelerators settings. Detailed below.
         */
        inferenceAccelerators?: pulumi.Input<pulumi.Input<pulumiAws.types.input.ecs.TaskDefinitionInferenceAccelerator>[]>;
        /**
         * IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
         */
        ipcMode?: pulumi.Input<string>;
        /**
         * A set of volume blocks that containers in your task may use.
         */
        logGroup?: inputs.awsx.DefaultLogGroupArgs;
        /**
         * The amount (in MiB) of memory used by the task.  If not provided, a default will be computed
         * based on the cumulative needs specified by [containerDefinitions]
         */
        memory?: pulumi.Input<string>;
        /**
         * Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
         */
        networkMode?: pulumi.Input<string>;
        /**
         * Process namespace to use for the containers in the task. The valid values are `host` and `task`.
         */
        pidMode?: pulumi.Input<string>;
        /**
         * Configuration block for rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`. Detailed below.
         */
        placementConstraints?: pulumi.Input<pulumi.Input<pulumiAws.types.input.ecs.TaskDefinitionPlacementConstraint>[]>;
        /**
         * Configuration block for the App Mesh proxy. Detailed below.
         */
        proxyConfiguration?: pulumi.Input<pulumiAws.types.input.ecs.TaskDefinitionProxyConfiguration>;
        /**
         * Configuration block for runtime_platform that containers in your task may use.
         */
        runtimePlatform?: pulumi.Input<pulumiAws.types.input.ecs.TaskDefinitionRuntimePlatform>;
        /**
         * Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is `false`.
         */
        skipDestroy?: pulumi.Input<boolean>;
        /**
         * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         */
        tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * IAM role that allows your Amazon ECS container task to make calls to other AWS services.
         * Will be created automatically if not defined.
         */
        taskRole?: inputs.awsx.DefaultRoleWithPolicyArgs;
        /**
         * Configuration block for volumes that containers in your task may use. Detailed below.
         */
        volumes?: pulumi.Input<pulumi.Input<pulumiAws.types.input.ecs.TaskDefinitionVolume>[]>;
    }

    /**
     * Create a TaskDefinition resource with the given unique name, arguments, and options.
     * Creates required log-group and task & execution roles.
     * Presents required Service load balancers if target group included in port mappings.
     */
    export interface FargateServiceTaskDefinitionArgs {
        /**
         * Single container to make a TaskDefinition from.  Useful for simple cases where there aren't
         * multiple containers, especially when creating a TaskDefinition to call [run] on.
         *
         * Either [container] or [containers] must be provided.
         */
        container?: inputs.ecs.TaskDefinitionContainerDefinitionArgs;
        /**
         * All the containers to make a TaskDefinition from.  Useful when creating a Service that will
         * contain many containers within.
         *
         * Either [container] or [containers] must be provided.
         */
        containers?: {[key: string]: inputs.ecs.TaskDefinitionContainerDefinitionArgs};
        /**
         * The number of cpu units used by the task. If not provided, a default will be computed based on the cumulative needs specified by [containerDefinitions]
         */
        cpu?: pulumi.Input<string>;
        /**
         * The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
         */
        ephemeralStorage?: pulumi.Input<pulumiAws.types.input.ecs.TaskDefinitionEphemeralStorage>;
        /**
         * The execution role that the Amazon ECS container agent and the Docker daemon can assume.
         * Will be created automatically if not defined.
         */
        executionRole?: inputs.awsx.DefaultRoleWithPolicyArgs;
        /**
         * An optional unique name for your task definition. If not specified, then a default will be created.
         */
        family?: pulumi.Input<string>;
        /**
         * Configuration block(s) with Inference Accelerators settings. Detailed below.
         */
        inferenceAccelerators?: pulumi.Input<pulumi.Input<pulumiAws.types.input.ecs.TaskDefinitionInferenceAccelerator>[]>;
        /**
         * IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
         */
        ipcMode?: pulumi.Input<string>;
        /**
         * A set of volume blocks that containers in your task may use.
         */
        logGroup?: inputs.awsx.DefaultLogGroupArgs;
        /**
         * The amount (in MiB) of memory used by the task.  If not provided, a default will be computed
         * based on the cumulative needs specified by [containerDefinitions]
         */
        memory?: pulumi.Input<string>;
        /**
         * Process namespace to use for the containers in the task. The valid values are `host` and `task`.
         */
        pidMode?: pulumi.Input<string>;
        /**
         * Configuration block for rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`. Detailed below.
         */
        placementConstraints?: pulumi.Input<pulumi.Input<pulumiAws.types.input.ecs.TaskDefinitionPlacementConstraint>[]>;
        /**
         * Configuration block for the App Mesh proxy. Detailed below.
         */
        proxyConfiguration?: pulumi.Input<pulumiAws.types.input.ecs.TaskDefinitionProxyConfiguration>;
        /**
         * Configuration block for runtime_platform that containers in your task may use.
         */
        runtimePlatform?: pulumi.Input<pulumiAws.types.input.ecs.TaskDefinitionRuntimePlatform>;
        /**
         * Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is `false`.
         */
        skipDestroy?: pulumi.Input<boolean>;
        /**
         * Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         */
        tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * IAM role that allows your Amazon ECS container task to make calls to other AWS services.
         * Will be created automatically if not defined.
         */
        taskRole?: inputs.awsx.DefaultRoleWithPolicyArgs;
        /**
         * Configuration block for volumes that containers in your task may use. Detailed below.
         */
        volumes?: pulumi.Input<pulumi.Input<pulumiAws.types.input.ecs.TaskDefinitionVolume>[]>;
    }

    /**
     * List of container definitions that are passed to the Docker daemon on a container instance
     */
    export interface TaskDefinitionContainerDefinitionArgs {
        command?: pulumi.Input<pulumi.Input<string>[]>;
        cpu?: pulumi.Input<number>;
        dependsOn?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionContainerDependencyArgs>[]>;
        disableNetworking?: pulumi.Input<boolean>;
        dnsSearchDomains?: pulumi.Input<pulumi.Input<string>[]>;
        dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
        dockerLabels?: any;
        dockerSecurityOptions?: pulumi.Input<pulumi.Input<string>[]>;
        entryPoint?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The environment variables to pass to a container
         */
        environment?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionKeyValuePairArgs>[]>;
        /**
         * The list of one or more files that contain the environment variables to pass to a container
         */
        environmentFiles?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionEnvironmentFileArgs>[]>;
        essential?: pulumi.Input<boolean>;
        extraHosts?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionHostEntryArgs>[]>;
        firelensConfiguration?: pulumi.Input<inputs.ecs.TaskDefinitionFirelensConfigurationArgs>;
        healthCheck?: pulumi.Input<inputs.ecs.TaskDefinitionHealthCheckArgs>;
        hostname?: pulumi.Input<string>;
        /**
         * The image used to start a container. This string is passed directly to the Docker daemon.
         */
        image: pulumi.Input<string>;
        interactive?: pulumi.Input<boolean>;
        links?: pulumi.Input<pulumi.Input<string>[]>;
        linuxParameters?: pulumi.Input<inputs.ecs.TaskDefinitionLinuxParametersArgs>;
        logConfiguration?: pulumi.Input<inputs.ecs.TaskDefinitionLogConfigurationArgs>;
        /**
         * The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed.
         */
        memory?: pulumi.Input<number>;
        memoryReservation?: pulumi.Input<number>;
        mountPoints?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionMountPointArgs>[]>;
        /**
         * The name of a container. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed
         */
        name: pulumi.Input<string>;
        /**
         * Port mappings allow containers to access ports on the host container instance to send or receive traffic.
         */
        portMappings?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionPortMappingArgs>[]>;
        privileged?: pulumi.Input<boolean>;
        pseudoTerminal?: pulumi.Input<boolean>;
        readonlyRootFilesystem?: pulumi.Input<boolean>;
        repositoryCredentials?: pulumi.Input<inputs.ecs.TaskDefinitionRepositoryCredentialsArgs>;
        resourceRequirements?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionResourceRequirementArgs>[]>;
        secrets?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionSecretArgs>[]>;
        startTimeout?: pulumi.Input<number>;
        stopTimeout?: pulumi.Input<number>;
        systemControls?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionSystemControlArgs>[]>;
        ulimits?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionUlimitArgs>[]>;
        user?: pulumi.Input<string>;
        volumesFrom?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionVolumeFromArgs>[]>;
        workingDirectory?: pulumi.Input<string>;
    }

    export interface TaskDefinitionContainerDependencyArgs {
        condition?: pulumi.Input<string>;
        containerName?: pulumi.Input<string>;
    }

    export interface TaskDefinitionDeviceArgs {
        containerPath?: pulumi.Input<string>;
        hostPath?: pulumi.Input<string>;
        permissions?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface TaskDefinitionEnvironmentFileArgs {
        type?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface TaskDefinitionFirelensConfigurationArgs {
        options?: any;
        type?: pulumi.Input<string>;
    }

    /**
     * The health check command and associated configuration parameters for the container.
     */
    export interface TaskDefinitionHealthCheckArgs {
        /**
         * A string array representing the command that the container runs to determine if it is healthy.
         */
        command?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.
         */
        interval?: pulumi.Input<number>;
        /**
         * The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is three retries.
         */
        retries?: pulumi.Input<number>;
        /**
         * The optional grace period within which to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You may specify between 0 and 300 seconds. The startPeriod is disabled by default.
         */
        startPeriod?: pulumi.Input<number>;
        /**
         * The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5 seconds.
         */
        timeout?: pulumi.Input<number>;
    }

    export interface TaskDefinitionHostEntryArgs {
        hostname?: pulumi.Input<string>;
        ipAddress?: pulumi.Input<string>;
    }

    export interface TaskDefinitionKernelCapabilitiesArgs {
        add?: pulumi.Input<pulumi.Input<string>[]>;
        drop?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface TaskDefinitionKeyValuePairArgs {
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface TaskDefinitionLinuxParametersArgs {
        capabilities?: pulumi.Input<inputs.ecs.TaskDefinitionKernelCapabilitiesArgs>;
        devices?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionDeviceArgs>[]>;
        initProcessEnabled?: pulumi.Input<boolean>;
        maxSwap?: pulumi.Input<number>;
        sharedMemorySize?: pulumi.Input<number>;
        swappiness?: pulumi.Input<number>;
        tmpfs?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionTmpfsArgs>[]>;
    }

    export interface TaskDefinitionLogConfigurationArgs {
        logDriver: pulumi.Input<string>;
        options?: any;
        secretOptions?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionSecretArgs>[]>;
    }

    export interface TaskDefinitionMountPointArgs {
        containerPath?: pulumi.Input<string>;
        readOnly?: pulumi.Input<boolean>;
        sourceVolume?: pulumi.Input<string>;
    }

    export interface TaskDefinitionPortMappingArgs {
        appProtocol?: pulumi.Input<enums.ecs.TaskDefinitionPortMappingAppProtocol>;
        containerPort?: pulumi.Input<number>;
        containerPortRange?: pulumi.Input<string>;
        hostPort?: pulumi.Input<number>;
        name?: pulumi.Input<string>;
        protocol?: pulumi.Input<string>;
        targetGroup?: pulumi.Input<pulumiAws.lb.TargetGroup>;
    }

    export interface TaskDefinitionRepositoryCredentialsArgs {
        credentialsParameter?: pulumi.Input<string>;
    }

    export interface TaskDefinitionResourceRequirementArgs {
        type: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface TaskDefinitionSecretArgs {
        name: pulumi.Input<string>;
        valueFrom: pulumi.Input<string>;
    }

    export interface TaskDefinitionSystemControlArgs {
        namespace?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface TaskDefinitionTmpfsArgs {
        containerPath?: pulumi.Input<string>;
        mountOptions?: pulumi.Input<pulumi.Input<string>[]>;
        size: pulumi.Input<number>;
    }

    export interface TaskDefinitionUlimitArgs {
        hardLimit: pulumi.Input<number>;
        name: pulumi.Input<string>;
        softLimit: pulumi.Input<number>;
    }

    export interface TaskDefinitionVolumeFromArgs {
        readOnly?: pulumi.Input<boolean>;
        sourceContainer?: pulumi.Input<string>;
    }
}

export namespace lb {
    /**
     * Provides a Load Balancer Listener resource.
     *
     * > **Note:** `aws.alb.Listener` is known as `aws.lb.Listener`. The functionality is identical.
     *
     * {{% examples %}}
     * ## Example Usage
     * {{% example %}}
     * ### Forward Action
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const frontEndLoadBalancer = new aws.lb.LoadBalancer("frontEndLoadBalancer", {});
     * // ...
     * const frontEndTargetGroup = new aws.lb.TargetGroup("frontEndTargetGroup", {});
     * // ...
     * const frontEndListener = new aws.lb.Listener("frontEndListener", {
     *     loadBalancerArn: frontEndLoadBalancer.arn,
     *     port: 443,
     *     protocol: "HTTPS",
     *     sslPolicy: "ELBSecurityPolicy-2016-08",
     *     certificateArn: "arn:aws:iam::187416307283:server-certificate/test_cert_rab3wuqwgja25ct3n4jdj2tzu4",
     *     defaultActions: [{
     *         type: "forward",
     *         targetGroupArn: frontEndTargetGroup.arn,
     *     }],
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * front_end_load_balancer = aws.lb.LoadBalancer("frontEndLoadBalancer")
     * # ...
     * front_end_target_group = aws.lb.TargetGroup("frontEndTargetGroup")
     * # ...
     * front_end_listener = aws.lb.Listener("frontEndListener",
     *     load_balancer_arn=front_end_load_balancer.arn,
     *     port=443,
     *     protocol="HTTPS",
     *     ssl_policy="ELBSecurityPolicy-2016-08",
     *     certificate_arn="arn:aws:iam::187416307283:server-certificate/test_cert_rab3wuqwgja25ct3n4jdj2tzu4",
     *     default_actions=[aws.lb.ListenerDefaultActionArgs(
     *         type="forward",
     *         target_group_arn=front_end_target_group.arn,
     *     )])
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var frontEndLoadBalancer = new Aws.LB.LoadBalancer("frontEndLoadBalancer");
     *
     *     // ...
     *     var frontEndTargetGroup = new Aws.LB.TargetGroup("frontEndTargetGroup");
     *
     *     // ...
     *     var frontEndListener = new Aws.LB.Listener("frontEndListener", new()
     *     {
     *         LoadBalancerArn = frontEndLoadBalancer.Arn,
     *         Port = 443,
     *         Protocol = "HTTPS",
     *         SslPolicy = "ELBSecurityPolicy-2016-08",
     *         CertificateArn = "arn:aws:iam::187416307283:server-certificate/test_cert_rab3wuqwgja25ct3n4jdj2tzu4",
     *         DefaultActions = new[]
     *         {
     *             new Aws.LB.Inputs.ListenerDefaultActionArgs
     *             {
     *                 Type = "forward",
     *                 TargetGroupArn = frontEndTargetGroup.Arn,
     *             },
     *         },
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lb"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		frontEndLoadBalancer, err := lb.NewLoadBalancer(ctx, "frontEndLoadBalancer", nil)
     * 		if err != nil {
     * 			return err
     * 		}
     * 		frontEndTargetGroup, err := lb.NewTargetGroup(ctx, "frontEndTargetGroup", nil)
     * 		if err != nil {
     * 			return err
     * 		}
     * 		_, err = lb.NewListener(ctx, "frontEndListener", &lb.ListenerArgs{
     * 			LoadBalancerArn: frontEndLoadBalancer.Arn,
     * 			Port:            pulumi.Int(443),
     * 			Protocol:        pulumi.String("HTTPS"),
     * 			SslPolicy:       pulumi.String("ELBSecurityPolicy-2016-08"),
     * 			CertificateArn:  pulumi.String("arn:aws:iam::187416307283:server-certificate/test_cert_rab3wuqwgja25ct3n4jdj2tzu4"),
     * 			DefaultActions: lb.ListenerDefaultActionArray{
     * 				&lb.ListenerDefaultActionArgs{
     * 					Type:           pulumi.String("forward"),
     * 					TargetGroupArn: frontEndTargetGroup.Arn,
     * 				},
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lb.LoadBalancer;
     * import com.pulumi.aws.lb.TargetGroup;
     * import com.pulumi.aws.lb.Listener;
     * import com.pulumi.aws.lb.ListenerArgs;
     * import com.pulumi.aws.lb.inputs.ListenerDefaultActionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var frontEndLoadBalancer = new LoadBalancer("frontEndLoadBalancer");
     *
     *         var frontEndTargetGroup = new TargetGroup("frontEndTargetGroup");
     *
     *         var frontEndListener = new Listener("frontEndListener", ListenerArgs.builder()        
     *             .loadBalancerArn(frontEndLoadBalancer.arn())
     *             .port("443")
     *             .protocol("HTTPS")
     *             .sslPolicy("ELBSecurityPolicy-2016-08")
     *             .certificateArn("arn:aws:iam::187416307283:server-certificate/test_cert_rab3wuqwgja25ct3n4jdj2tzu4")
     *             .defaultActions(ListenerDefaultActionArgs.builder()
     *                 .type("forward")
     *                 .targetGroupArn(frontEndTargetGroup.arn())
     *                 .build())
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   frontEndLoadBalancer:
     *     type: aws:lb:LoadBalancer
     *   frontEndTargetGroup:
     *     type: aws:lb:TargetGroup
     *   frontEndListener:
     *     type: aws:lb:Listener
     *     properties:
     *       loadBalancerArn: ${frontEndLoadBalancer.arn}
     *       port: '443'
     *       protocol: HTTPS
     *       sslPolicy: ELBSecurityPolicy-2016-08
     *       certificateArn: arn:aws:iam::187416307283:server-certificate/test_cert_rab3wuqwgja25ct3n4jdj2tzu4
     *       defaultActions:
     *         - type: forward
     *           targetGroupArn: ${frontEndTargetGroup.arn}
     * ```
     *
     * To a NLB:
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const frontEnd = new aws.lb.Listener("frontEnd", {
     *     loadBalancerArn: aws_lb.front_end.arn,
     *     port: 443,
     *     protocol: "TLS",
     *     certificateArn: "arn:aws:iam::187416307283:server-certificate/test_cert_rab3wuqwgja25ct3n4jdj2tzu4",
     *     alpnPolicy: "HTTP2Preferred",
     *     defaultActions: [{
     *         type: "forward",
     *         targetGroupArn: aws_lb_target_group.front_end.arn,
     *     }],
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * front_end = aws.lb.Listener("frontEnd",
     *     load_balancer_arn=aws_lb["front_end"]["arn"],
     *     port=443,
     *     protocol="TLS",
     *     certificate_arn="arn:aws:iam::187416307283:server-certificate/test_cert_rab3wuqwgja25ct3n4jdj2tzu4",
     *     alpn_policy="HTTP2Preferred",
     *     default_actions=[aws.lb.ListenerDefaultActionArgs(
     *         type="forward",
     *         target_group_arn=aws_lb_target_group["front_end"]["arn"],
     *     )])
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var frontEnd = new Aws.LB.Listener("frontEnd", new()
     *     {
     *         LoadBalancerArn = aws_lb.Front_end.Arn,
     *         Port = 443,
     *         Protocol = "TLS",
     *         CertificateArn = "arn:aws:iam::187416307283:server-certificate/test_cert_rab3wuqwgja25ct3n4jdj2tzu4",
     *         AlpnPolicy = "HTTP2Preferred",
     *         DefaultActions = new[]
     *         {
     *             new Aws.LB.Inputs.ListenerDefaultActionArgs
     *             {
     *                 Type = "forward",
     *                 TargetGroupArn = aws_lb_target_group.Front_end.Arn,
     *             },
     *         },
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lb"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		_, err := lb.NewListener(ctx, "frontEnd", &lb.ListenerArgs{
     * 			LoadBalancerArn: pulumi.Any(aws_lb.Front_end.Arn),
     * 			Port:            pulumi.Int(443),
     * 			Protocol:        pulumi.String("TLS"),
     * 			CertificateArn:  pulumi.String("arn:aws:iam::187416307283:server-certificate/test_cert_rab3wuqwgja25ct3n4jdj2tzu4"),
     * 			AlpnPolicy:      pulumi.String("HTTP2Preferred"),
     * 			DefaultActions: lb.ListenerDefaultActionArray{
     * 				&lb.ListenerDefaultActionArgs{
     * 					Type:           pulumi.String("forward"),
     * 					TargetGroupArn: pulumi.Any(aws_lb_target_group.Front_end.Arn),
     * 				},
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lb.Listener;
     * import com.pulumi.aws.lb.ListenerArgs;
     * import com.pulumi.aws.lb.inputs.ListenerDefaultActionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var frontEnd = new Listener("frontEnd", ListenerArgs.builder()        
     *             .loadBalancerArn(aws_lb.front_end().arn())
     *             .port("443")
     *             .protocol("TLS")
     *             .certificateArn("arn:aws:iam::187416307283:server-certificate/test_cert_rab3wuqwgja25ct3n4jdj2tzu4")
     *             .alpnPolicy("HTTP2Preferred")
     *             .defaultActions(ListenerDefaultActionArgs.builder()
     *                 .type("forward")
     *                 .targetGroupArn(aws_lb_target_group.front_end().arn())
     *                 .build())
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   frontEnd:
     *     type: aws:lb:Listener
     *     properties:
     *       loadBalancerArn: ${aws_lb.front_end.arn}
     *       port: '443'
     *       protocol: TLS
     *       certificateArn: arn:aws:iam::187416307283:server-certificate/test_cert_rab3wuqwgja25ct3n4jdj2tzu4
     *       alpnPolicy: HTTP2Preferred
     *       defaultActions:
     *         - type: forward
     *           targetGroupArn: ${aws_lb_target_group.front_end.arn}
     * ```
     * {{% /example %}}
     * {{% example %}}
     * ### Redirect Action
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const frontEndLoadBalancer = new aws.lb.LoadBalancer("frontEndLoadBalancer", {});
     * // ...
     * const frontEndListener = new aws.lb.Listener("frontEndListener", {
     *     loadBalancerArn: frontEndLoadBalancer.arn,
     *     port: 80,
     *     protocol: "HTTP",
     *     defaultActions: [{
     *         type: "redirect",
     *         redirect: {
     *             port: "443",
     *             protocol: "HTTPS",
     *             statusCode: "HTTP_301",
     *         },
     *     }],
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * front_end_load_balancer = aws.lb.LoadBalancer("frontEndLoadBalancer")
     * # ...
     * front_end_listener = aws.lb.Listener("frontEndListener",
     *     load_balancer_arn=front_end_load_balancer.arn,
     *     port=80,
     *     protocol="HTTP",
     *     default_actions=[aws.lb.ListenerDefaultActionArgs(
     *         type="redirect",
     *         redirect=aws.lb.ListenerDefaultActionRedirectArgs(
     *             port="443",
     *             protocol="HTTPS",
     *             status_code="HTTP_301",
     *         ),
     *     )])
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var frontEndLoadBalancer = new Aws.LB.LoadBalancer("frontEndLoadBalancer");
     *
     *     // ...
     *     var frontEndListener = new Aws.LB.Listener("frontEndListener", new()
     *     {
     *         LoadBalancerArn = frontEndLoadBalancer.Arn,
     *         Port = 80,
     *         Protocol = "HTTP",
     *         DefaultActions = new[]
     *         {
     *             new Aws.LB.Inputs.ListenerDefaultActionArgs
     *             {
     *                 Type = "redirect",
     *                 Redirect = new Aws.LB.Inputs.ListenerDefaultActionRedirectArgs
     *                 {
     *                     Port = "443",
     *                     Protocol = "HTTPS",
     *                     StatusCode = "HTTP_301",
     *                 },
     *             },
     *         },
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lb"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		frontEndLoadBalancer, err := lb.NewLoadBalancer(ctx, "frontEndLoadBalancer", nil)
     * 		if err != nil {
     * 			return err
     * 		}
     * 		_, err = lb.NewListener(ctx, "frontEndListener", &lb.ListenerArgs{
     * 			LoadBalancerArn: frontEndLoadBalancer.Arn,
     * 			Port:            pulumi.Int(80),
     * 			Protocol:        pulumi.String("HTTP"),
     * 			DefaultActions: lb.ListenerDefaultActionArray{
     * 				&lb.ListenerDefaultActionArgs{
     * 					Type: pulumi.String("redirect"),
     * 					Redirect: &lb.ListenerDefaultActionRedirectArgs{
     * 						Port:       pulumi.String("443"),
     * 						Protocol:   pulumi.String("HTTPS"),
     * 						StatusCode: pulumi.String("HTTP_301"),
     * 					},
     * 				},
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lb.LoadBalancer;
     * import com.pulumi.aws.lb.Listener;
     * import com.pulumi.aws.lb.ListenerArgs;
     * import com.pulumi.aws.lb.inputs.ListenerDefaultActionArgs;
     * import com.pulumi.aws.lb.inputs.ListenerDefaultActionRedirectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var frontEndLoadBalancer = new LoadBalancer("frontEndLoadBalancer");
     *
     *         var frontEndListener = new Listener("frontEndListener", ListenerArgs.builder()        
     *             .loadBalancerArn(frontEndLoadBalancer.arn())
     *             .port("80")
     *             .protocol("HTTP")
     *             .defaultActions(ListenerDefaultActionArgs.builder()
     *                 .type("redirect")
     *                 .redirect(ListenerDefaultActionRedirectArgs.builder()
     *                     .port("443")
     *                     .protocol("HTTPS")
     *                     .statusCode("HTTP_301")
     *                     .build())
     *                 .build())
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   frontEndLoadBalancer:
     *     type: aws:lb:LoadBalancer
     *   frontEndListener:
     *     type: aws:lb:Listener
     *     properties:
     *       loadBalancerArn: ${frontEndLoadBalancer.arn}
     *       port: '80'
     *       protocol: HTTP
     *       defaultActions:
     *         - type: redirect
     *           redirect:
     *             port: '443'
     *             protocol: HTTPS
     *             statusCode: HTTP_301
     * ```
     * {{% /example %}}
     * {{% example %}}
     * ### Fixed-response Action
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const frontEndLoadBalancer = new aws.lb.LoadBalancer("frontEndLoadBalancer", {});
     * // ...
     * const frontEndListener = new aws.lb.Listener("frontEndListener", {
     *     loadBalancerArn: frontEndLoadBalancer.arn,
     *     port: 80,
     *     protocol: "HTTP",
     *     defaultActions: [{
     *         type: "fixed-response",
     *         fixedResponse: {
     *             contentType: "text/plain",
     *             messageBody: "Fixed response content",
     *             statusCode: "200",
     *         },
     *     }],
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * front_end_load_balancer = aws.lb.LoadBalancer("frontEndLoadBalancer")
     * # ...
     * front_end_listener = aws.lb.Listener("frontEndListener",
     *     load_balancer_arn=front_end_load_balancer.arn,
     *     port=80,
     *     protocol="HTTP",
     *     default_actions=[aws.lb.ListenerDefaultActionArgs(
     *         type="fixed-response",
     *         fixed_response=aws.lb.ListenerDefaultActionFixedResponseArgs(
     *             content_type="text/plain",
     *             message_body="Fixed response content",
     *             status_code="200",
     *         ),
     *     )])
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var frontEndLoadBalancer = new Aws.LB.LoadBalancer("frontEndLoadBalancer");
     *
     *     // ...
     *     var frontEndListener = new Aws.LB.Listener("frontEndListener", new()
     *     {
     *         LoadBalancerArn = frontEndLoadBalancer.Arn,
     *         Port = 80,
     *         Protocol = "HTTP",
     *         DefaultActions = new[]
     *         {
     *             new Aws.LB.Inputs.ListenerDefaultActionArgs
     *             {
     *                 Type = "fixed-response",
     *                 FixedResponse = new Aws.LB.Inputs.ListenerDefaultActionFixedResponseArgs
     *                 {
     *                     ContentType = "text/plain",
     *                     MessageBody = "Fixed response content",
     *                     StatusCode = "200",
     *                 },
     *             },
     *         },
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lb"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		frontEndLoadBalancer, err := lb.NewLoadBalancer(ctx, "frontEndLoadBalancer", nil)
     * 		if err != nil {
     * 			return err
     * 		}
     * 		_, err = lb.NewListener(ctx, "frontEndListener", &lb.ListenerArgs{
     * 			LoadBalancerArn: frontEndLoadBalancer.Arn,
     * 			Port:            pulumi.Int(80),
     * 			Protocol:        pulumi.String("HTTP"),
     * 			DefaultActions: lb.ListenerDefaultActionArray{
     * 				&lb.ListenerDefaultActionArgs{
     * 					Type: pulumi.String("fixed-response"),
     * 					FixedResponse: &lb.ListenerDefaultActionFixedResponseArgs{
     * 						ContentType: pulumi.String("text/plain"),
     * 						MessageBody: pulumi.String("Fixed response content"),
     * 						StatusCode:  pulumi.String("200"),
     * 					},
     * 				},
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lb.LoadBalancer;
     * import com.pulumi.aws.lb.Listener;
     * import com.pulumi.aws.lb.ListenerArgs;
     * import com.pulumi.aws.lb.inputs.ListenerDefaultActionArgs;
     * import com.pulumi.aws.lb.inputs.ListenerDefaultActionFixedResponseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var frontEndLoadBalancer = new LoadBalancer("frontEndLoadBalancer");
     *
     *         var frontEndListener = new Listener("frontEndListener", ListenerArgs.builder()        
     *             .loadBalancerArn(frontEndLoadBalancer.arn())
     *             .port("80")
     *             .protocol("HTTP")
     *             .defaultActions(ListenerDefaultActionArgs.builder()
     *                 .type("fixed-response")
     *                 .fixedResponse(ListenerDefaultActionFixedResponseArgs.builder()
     *                     .contentType("text/plain")
     *                     .messageBody("Fixed response content")
     *                     .statusCode("200")
     *                     .build())
     *                 .build())
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   frontEndLoadBalancer:
     *     type: aws:lb:LoadBalancer
     *   frontEndListener:
     *     type: aws:lb:Listener
     *     properties:
     *       loadBalancerArn: ${frontEndLoadBalancer.arn}
     *       port: '80'
     *       protocol: HTTP
     *       defaultActions:
     *         - type: fixed-response
     *           fixedResponse:
     *             contentType: text/plain
     *             messageBody: Fixed response content
     *             statusCode: '200'
     * ```
     * {{% /example %}}
     * {{% example %}}
     * ### Authenticate-cognito Action
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const frontEndLoadBalancer = new aws.lb.LoadBalancer("frontEndLoadBalancer", {});
     * // ...
     * const frontEndTargetGroup = new aws.lb.TargetGroup("frontEndTargetGroup", {});
     * // ...
     * const pool = new aws.cognito.UserPool("pool", {});
     * // ...
     * const client = new aws.cognito.UserPoolClient("client", {});
     * // ...
     * const domain = new aws.cognito.UserPoolDomain("domain", {});
     * // ...
     * const frontEndListener = new aws.lb.Listener("frontEndListener", {
     *     loadBalancerArn: frontEndLoadBalancer.arn,
     *     port: 80,
     *     protocol: "HTTP",
     *     defaultActions: [
     *         {
     *             type: "authenticate-cognito",
     *             authenticateCognito: {
     *                 userPoolArn: pool.arn,
     *                 userPoolClientId: client.id,
     *                 userPoolDomain: domain.domain,
     *             },
     *         },
     *         {
     *             type: "forward",
     *             targetGroupArn: frontEndTargetGroup.arn,
     *         },
     *     ],
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * front_end_load_balancer = aws.lb.LoadBalancer("frontEndLoadBalancer")
     * # ...
     * front_end_target_group = aws.lb.TargetGroup("frontEndTargetGroup")
     * # ...
     * pool = aws.cognito.UserPool("pool")
     * # ...
     * client = aws.cognito.UserPoolClient("client")
     * # ...
     * domain = aws.cognito.UserPoolDomain("domain")
     * # ...
     * front_end_listener = aws.lb.Listener("frontEndListener",
     *     load_balancer_arn=front_end_load_balancer.arn,
     *     port=80,
     *     protocol="HTTP",
     *     default_actions=[
     *         aws.lb.ListenerDefaultActionArgs(
     *             type="authenticate-cognito",
     *             authenticate_cognito=aws.lb.ListenerDefaultActionAuthenticateCognitoArgs(
     *                 user_pool_arn=pool.arn,
     *                 user_pool_client_id=client.id,
     *                 user_pool_domain=domain.domain,
     *             ),
     *         ),
     *         aws.lb.ListenerDefaultActionArgs(
     *             type="forward",
     *             target_group_arn=front_end_target_group.arn,
     *         ),
     *     ])
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var frontEndLoadBalancer = new Aws.LB.LoadBalancer("frontEndLoadBalancer");
     *
     *     // ...
     *     var frontEndTargetGroup = new Aws.LB.TargetGroup("frontEndTargetGroup");
     *
     *     // ...
     *     var pool = new Aws.Cognito.UserPool("pool");
     *
     *     // ...
     *     var client = new Aws.Cognito.UserPoolClient("client");
     *
     *     // ...
     *     var domain = new Aws.Cognito.UserPoolDomain("domain");
     *
     *     // ...
     *     var frontEndListener = new Aws.LB.Listener("frontEndListener", new()
     *     {
     *         LoadBalancerArn = frontEndLoadBalancer.Arn,
     *         Port = 80,
     *         Protocol = "HTTP",
     *         DefaultActions = new[]
     *         {
     *             new Aws.LB.Inputs.ListenerDefaultActionArgs
     *             {
     *                 Type = "authenticate-cognito",
     *                 AuthenticateCognito = new Aws.LB.Inputs.ListenerDefaultActionAuthenticateCognitoArgs
     *                 {
     *                     UserPoolArn = pool.Arn,
     *                     UserPoolClientId = client.Id,
     *                     UserPoolDomain = domain.Domain,
     *                 },
     *             },
     *             new Aws.LB.Inputs.ListenerDefaultActionArgs
     *             {
     *                 Type = "forward",
     *                 TargetGroupArn = frontEndTargetGroup.Arn,
     *             },
     *         },
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cognito"
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lb"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		frontEndLoadBalancer, err := lb.NewLoadBalancer(ctx, "frontEndLoadBalancer", nil)
     * 		if err != nil {
     * 			return err
     * 		}
     * 		frontEndTargetGroup, err := lb.NewTargetGroup(ctx, "frontEndTargetGroup", nil)
     * 		if err != nil {
     * 			return err
     * 		}
     * 		pool, err := cognito.NewUserPool(ctx, "pool", nil)
     * 		if err != nil {
     * 			return err
     * 		}
     * 		client, err := cognito.NewUserPoolClient(ctx, "client", nil)
     * 		if err != nil {
     * 			return err
     * 		}
     * 		domain, err := cognito.NewUserPoolDomain(ctx, "domain", nil)
     * 		if err != nil {
     * 			return err
     * 		}
     * 		_, err = lb.NewListener(ctx, "frontEndListener", &lb.ListenerArgs{
     * 			LoadBalancerArn: frontEndLoadBalancer.Arn,
     * 			Port:            pulumi.Int(80),
     * 			Protocol:        pulumi.String("HTTP"),
     * 			DefaultActions: lb.ListenerDefaultActionArray{
     * 				&lb.ListenerDefaultActionArgs{
     * 					Type: pulumi.String("authenticate-cognito"),
     * 					AuthenticateCognito: &lb.ListenerDefaultActionAuthenticateCognitoArgs{
     * 						UserPoolArn:      pool.Arn,
     * 						UserPoolClientId: client.ID(),
     * 						UserPoolDomain:   domain.Domain,
     * 					},
     * 				},
     * 				&lb.ListenerDefaultActionArgs{
     * 					Type:           pulumi.String("forward"),
     * 					TargetGroupArn: frontEndTargetGroup.Arn,
     * 				},
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lb.LoadBalancer;
     * import com.pulumi.aws.lb.TargetGroup;
     * import com.pulumi.aws.cognito.UserPool;
     * import com.pulumi.aws.cognito.UserPoolClient;
     * import com.pulumi.aws.cognito.UserPoolDomain;
     * import com.pulumi.aws.lb.Listener;
     * import com.pulumi.aws.lb.ListenerArgs;
     * import com.pulumi.aws.lb.inputs.ListenerDefaultActionArgs;
     * import com.pulumi.aws.lb.inputs.ListenerDefaultActionAuthenticateCognitoArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var frontEndLoadBalancer = new LoadBalancer("frontEndLoadBalancer");
     *
     *         var frontEndTargetGroup = new TargetGroup("frontEndTargetGroup");
     *
     *         var pool = new UserPool("pool");
     *
     *         var client = new UserPoolClient("client");
     *
     *         var domain = new UserPoolDomain("domain");
     *
     *         var frontEndListener = new Listener("frontEndListener", ListenerArgs.builder()        
     *             .loadBalancerArn(frontEndLoadBalancer.arn())
     *             .port("80")
     *             .protocol("HTTP")
     *             .defaultActions(            
     *                 ListenerDefaultActionArgs.builder()
     *                     .type("authenticate-cognito")
     *                     .authenticateCognito(ListenerDefaultActionAuthenticateCognitoArgs.builder()
     *                         .userPoolArn(pool.arn())
     *                         .userPoolClientId(client.id())
     *                         .userPoolDomain(domain.domain())
     *                         .build())
     *                     .build(),
     *                 ListenerDefaultActionArgs.builder()
     *                     .type("forward")
     *                     .targetGroupArn(frontEndTargetGroup.arn())
     *                     .build())
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   frontEndLoadBalancer:
     *     type: aws:lb:LoadBalancer
     *   frontEndTargetGroup:
     *     type: aws:lb:TargetGroup
     *   pool:
     *     type: aws:cognito:UserPool
     *   client:
     *     type: aws:cognito:UserPoolClient
     *   domain:
     *     type: aws:cognito:UserPoolDomain
     *   frontEndListener:
     *     type: aws:lb:Listener
     *     properties:
     *       loadBalancerArn: ${frontEndLoadBalancer.arn}
     *       port: '80'
     *       protocol: HTTP
     *       defaultActions:
     *         - type: authenticate-cognito
     *           authenticateCognito:
     *             userPoolArn: ${pool.arn}
     *             userPoolClientId: ${client.id}
     *             userPoolDomain: ${domain.domain}
     *         - type: forward
     *           targetGroupArn: ${frontEndTargetGroup.arn}
     * ```
     * {{% /example %}}
     * {{% example %}}
     * ### Authenticate-OIDC Action
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const frontEndLoadBalancer = new aws.lb.LoadBalancer("frontEndLoadBalancer", {});
     * // ...
     * const frontEndTargetGroup = new aws.lb.TargetGroup("frontEndTargetGroup", {});
     * // ...
     * const frontEndListener = new aws.lb.Listener("frontEndListener", {
     *     loadBalancerArn: frontEndLoadBalancer.arn,
     *     port: 80,
     *     protocol: "HTTP",
     *     defaultActions: [
     *         {
     *             type: "authenticate-oidc",
     *             authenticateOidc: {
     *                 authorizationEndpoint: "https://example.com/authorization_endpoint",
     *                 clientId: "client_id",
     *                 clientSecret: "client_secret",
     *                 issuer: "https://example.com",
     *                 tokenEndpoint: "https://example.com/token_endpoint",
     *                 userInfoEndpoint: "https://example.com/user_info_endpoint",
     *             },
     *         },
     *         {
     *             type: "forward",
     *             targetGroupArn: frontEndTargetGroup.arn,
     *         },
     *     ],
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * front_end_load_balancer = aws.lb.LoadBalancer("frontEndLoadBalancer")
     * # ...
     * front_end_target_group = aws.lb.TargetGroup("frontEndTargetGroup")
     * # ...
     * front_end_listener = aws.lb.Listener("frontEndListener",
     *     load_balancer_arn=front_end_load_balancer.arn,
     *     port=80,
     *     protocol="HTTP",
     *     default_actions=[
     *         aws.lb.ListenerDefaultActionArgs(
     *             type="authenticate-oidc",
     *             authenticate_oidc=aws.lb.ListenerDefaultActionAuthenticateOidcArgs(
     *                 authorization_endpoint="https://example.com/authorization_endpoint",
     *                 client_id="client_id",
     *                 client_secret="client_secret",
     *                 issuer="https://example.com",
     *                 token_endpoint="https://example.com/token_endpoint",
     *                 user_info_endpoint="https://example.com/user_info_endpoint",
     *             ),
     *         ),
     *         aws.lb.ListenerDefaultActionArgs(
     *             type="forward",
     *             target_group_arn=front_end_target_group.arn,
     *         ),
     *     ])
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var frontEndLoadBalancer = new Aws.LB.LoadBalancer("frontEndLoadBalancer");
     *
     *     // ...
     *     var frontEndTargetGroup = new Aws.LB.TargetGroup("frontEndTargetGroup");
     *
     *     // ...
     *     var frontEndListener = new Aws.LB.Listener("frontEndListener", new()
     *     {
     *         LoadBalancerArn = frontEndLoadBalancer.Arn,
     *         Port = 80,
     *         Protocol = "HTTP",
     *         DefaultActions = new[]
     *         {
     *             new Aws.LB.Inputs.ListenerDefaultActionArgs
     *             {
     *                 Type = "authenticate-oidc",
     *                 AuthenticateOidc = new Aws.LB.Inputs.ListenerDefaultActionAuthenticateOidcArgs
     *                 {
     *                     AuthorizationEndpoint = "https://example.com/authorization_endpoint",
     *                     ClientId = "client_id",
     *                     ClientSecret = "client_secret",
     *                     Issuer = "https://example.com",
     *                     TokenEndpoint = "https://example.com/token_endpoint",
     *                     UserInfoEndpoint = "https://example.com/user_info_endpoint",
     *                 },
     *             },
     *             new Aws.LB.Inputs.ListenerDefaultActionArgs
     *             {
     *                 Type = "forward",
     *                 TargetGroupArn = frontEndTargetGroup.Arn,
     *             },
     *         },
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lb"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		frontEndLoadBalancer, err := lb.NewLoadBalancer(ctx, "frontEndLoadBalancer", nil)
     * 		if err != nil {
     * 			return err
     * 		}
     * 		frontEndTargetGroup, err := lb.NewTargetGroup(ctx, "frontEndTargetGroup", nil)
     * 		if err != nil {
     * 			return err
     * 		}
     * 		_, err = lb.NewListener(ctx, "frontEndListener", &lb.ListenerArgs{
     * 			LoadBalancerArn: frontEndLoadBalancer.Arn,
     * 			Port:            pulumi.Int(80),
     * 			Protocol:        pulumi.String("HTTP"),
     * 			DefaultActions: lb.ListenerDefaultActionArray{
     * 				&lb.ListenerDefaultActionArgs{
     * 					Type: pulumi.String("authenticate-oidc"),
     * 					AuthenticateOidc: &lb.ListenerDefaultActionAuthenticateOidcArgs{
     * 						AuthorizationEndpoint: pulumi.String("https://example.com/authorization_endpoint"),
     * 						ClientId:              pulumi.String("client_id"),
     * 						ClientSecret:          pulumi.String("client_secret"),
     * 						Issuer:                pulumi.String("https://example.com"),
     * 						TokenEndpoint:         pulumi.String("https://example.com/token_endpoint"),
     * 						UserInfoEndpoint:      pulumi.String("https://example.com/user_info_endpoint"),
     * 					},
     * 				},
     * 				&lb.ListenerDefaultActionArgs{
     * 					Type:           pulumi.String("forward"),
     * 					TargetGroupArn: frontEndTargetGroup.Arn,
     * 				},
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lb.LoadBalancer;
     * import com.pulumi.aws.lb.TargetGroup;
     * import com.pulumi.aws.lb.Listener;
     * import com.pulumi.aws.lb.ListenerArgs;
     * import com.pulumi.aws.lb.inputs.ListenerDefaultActionArgs;
     * import com.pulumi.aws.lb.inputs.ListenerDefaultActionAuthenticateOidcArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var frontEndLoadBalancer = new LoadBalancer("frontEndLoadBalancer");
     *
     *         var frontEndTargetGroup = new TargetGroup("frontEndTargetGroup");
     *
     *         var frontEndListener = new Listener("frontEndListener", ListenerArgs.builder()        
     *             .loadBalancerArn(frontEndLoadBalancer.arn())
     *             .port("80")
     *             .protocol("HTTP")
     *             .defaultActions(            
     *                 ListenerDefaultActionArgs.builder()
     *                     .type("authenticate-oidc")
     *                     .authenticateOidc(ListenerDefaultActionAuthenticateOidcArgs.builder()
     *                         .authorizationEndpoint("https://example.com/authorization_endpoint")
     *                         .clientId("client_id")
     *                         .clientSecret("client_secret")
     *                         .issuer("https://example.com")
     *                         .tokenEndpoint("https://example.com/token_endpoint")
     *                         .userInfoEndpoint("https://example.com/user_info_endpoint")
     *                         .build())
     *                     .build(),
     *                 ListenerDefaultActionArgs.builder()
     *                     .type("forward")
     *                     .targetGroupArn(frontEndTargetGroup.arn())
     *                     .build())
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   frontEndLoadBalancer:
     *     type: aws:lb:LoadBalancer
     *   frontEndTargetGroup:
     *     type: aws:lb:TargetGroup
     *   frontEndListener:
     *     type: aws:lb:Listener
     *     properties:
     *       loadBalancerArn: ${frontEndLoadBalancer.arn}
     *       port: '80'
     *       protocol: HTTP
     *       defaultActions:
     *         - type: authenticate-oidc
     *           authenticateOidc:
     *             authorizationEndpoint: https://example.com/authorization_endpoint
     *             clientId: client_id
     *             clientSecret: client_secret
     *             issuer: https://example.com
     *             tokenEndpoint: https://example.com/token_endpoint
     *             userInfoEndpoint: https://example.com/user_info_endpoint
     *         - type: forward
     *           targetGroupArn: ${frontEndTargetGroup.arn}
     * ```
     * {{% /example %}}
     * {{% example %}}
     * ### Gateway Load Balancer Listener
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const exampleLoadBalancer = new aws.lb.LoadBalancer("exampleLoadBalancer", {
     *     loadBalancerType: "gateway",
     *     subnetMappings: [{
     *         subnetId: aws_subnet.example.id,
     *     }],
     * });
     * const exampleTargetGroup = new aws.lb.TargetGroup("exampleTargetGroup", {
     *     port: 6081,
     *     protocol: "GENEVE",
     *     vpcId: aws_vpc.example.id,
     *     healthCheck: {
     *         port: "80",
     *         protocol: "HTTP",
     *     },
     * });
     * const exampleListener = new aws.lb.Listener("exampleListener", {
     *     loadBalancerArn: exampleLoadBalancer.id,
     *     defaultActions: [{
     *         targetGroupArn: exampleTargetGroup.id,
     *         type: "forward",
     *     }],
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * example_load_balancer = aws.lb.LoadBalancer("exampleLoadBalancer",
     *     load_balancer_type="gateway",
     *     subnet_mappings=[aws.lb.LoadBalancerSubnetMappingArgs(
     *         subnet_id=aws_subnet["example"]["id"],
     *     )])
     * example_target_group = aws.lb.TargetGroup("exampleTargetGroup",
     *     port=6081,
     *     protocol="GENEVE",
     *     vpc_id=aws_vpc["example"]["id"],
     *     health_check=aws.lb.TargetGroupHealthCheckArgs(
     *         port="80",
     *         protocol="HTTP",
     *     ))
     * example_listener = aws.lb.Listener("exampleListener",
     *     load_balancer_arn=example_load_balancer.id,
     *     default_actions=[aws.lb.ListenerDefaultActionArgs(
     *         target_group_arn=example_target_group.id,
     *         type="forward",
     *     )])
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var exampleLoadBalancer = new Aws.LB.LoadBalancer("exampleLoadBalancer", new()
     *     {
     *         LoadBalancerType = "gateway",
     *         SubnetMappings = new[]
     *         {
     *             new Aws.LB.Inputs.LoadBalancerSubnetMappingArgs
     *             {
     *                 SubnetId = aws_subnet.Example.Id,
     *             },
     *         },
     *     });
     *
     *     var exampleTargetGroup = new Aws.LB.TargetGroup("exampleTargetGroup", new()
     *     {
     *         Port = 6081,
     *         Protocol = "GENEVE",
     *         VpcId = aws_vpc.Example.Id,
     *         HealthCheck = new Aws.LB.Inputs.TargetGroupHealthCheckArgs
     *         {
     *             Port = "80",
     *             Protocol = "HTTP",
     *         },
     *     });
     *
     *     var exampleListener = new Aws.LB.Listener("exampleListener", new()
     *     {
     *         LoadBalancerArn = exampleLoadBalancer.Id,
     *         DefaultActions = new[]
     *         {
     *             new Aws.LB.Inputs.ListenerDefaultActionArgs
     *             {
     *                 TargetGroupArn = exampleTargetGroup.Id,
     *                 Type = "forward",
     *             },
     *         },
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lb"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		exampleLoadBalancer, err := lb.NewLoadBalancer(ctx, "exampleLoadBalancer", &lb.LoadBalancerArgs{
     * 			LoadBalancerType: pulumi.String("gateway"),
     * 			SubnetMappings: lb.LoadBalancerSubnetMappingArray{
     * 				&lb.LoadBalancerSubnetMappingArgs{
     * 					SubnetId: pulumi.Any(aws_subnet.Example.Id),
     * 				},
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		exampleTargetGroup, err := lb.NewTargetGroup(ctx, "exampleTargetGroup", &lb.TargetGroupArgs{
     * 			Port:     pulumi.Int(6081),
     * 			Protocol: pulumi.String("GENEVE"),
     * 			VpcId:    pulumi.Any(aws_vpc.Example.Id),
     * 			HealthCheck: &lb.TargetGroupHealthCheckArgs{
     * 				Port:     pulumi.String("80"),
     * 				Protocol: pulumi.String("HTTP"),
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		_, err = lb.NewListener(ctx, "exampleListener", &lb.ListenerArgs{
     * 			LoadBalancerArn: exampleLoadBalancer.ID(),
     * 			DefaultActions: lb.ListenerDefaultActionArray{
     * 				&lb.ListenerDefaultActionArgs{
     * 					TargetGroupArn: exampleTargetGroup.ID(),
     * 					Type:           pulumi.String("forward"),
     * 				},
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lb.LoadBalancer;
     * import com.pulumi.aws.lb.LoadBalancerArgs;
     * import com.pulumi.aws.lb.inputs.LoadBalancerSubnetMappingArgs;
     * import com.pulumi.aws.lb.TargetGroup;
     * import com.pulumi.aws.lb.TargetGroupArgs;
     * import com.pulumi.aws.lb.inputs.TargetGroupHealthCheckArgs;
     * import com.pulumi.aws.lb.Listener;
     * import com.pulumi.aws.lb.ListenerArgs;
     * import com.pulumi.aws.lb.inputs.ListenerDefaultActionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var exampleLoadBalancer = new LoadBalancer("exampleLoadBalancer", LoadBalancerArgs.builder()        
     *             .loadBalancerType("gateway")
     *             .subnetMappings(LoadBalancerSubnetMappingArgs.builder()
     *                 .subnetId(aws_subnet.example().id())
     *                 .build())
     *             .build());
     *
     *         var exampleTargetGroup = new TargetGroup("exampleTargetGroup", TargetGroupArgs.builder()        
     *             .port(6081)
     *             .protocol("GENEVE")
     *             .vpcId(aws_vpc.example().id())
     *             .healthCheck(TargetGroupHealthCheckArgs.builder()
     *                 .port(80)
     *                 .protocol("HTTP")
     *                 .build())
     *             .build());
     *
     *         var exampleListener = new Listener("exampleListener", ListenerArgs.builder()        
     *             .loadBalancerArn(exampleLoadBalancer.id())
     *             .defaultActions(ListenerDefaultActionArgs.builder()
     *                 .targetGroupArn(exampleTargetGroup.id())
     *                 .type("forward")
     *                 .build())
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   exampleLoadBalancer:
     *     type: aws:lb:LoadBalancer
     *     properties:
     *       loadBalancerType: gateway
     *       subnetMappings:
     *         - subnetId: ${aws_subnet.example.id}
     *   exampleTargetGroup:
     *     type: aws:lb:TargetGroup
     *     properties:
     *       port: 6081
     *       protocol: GENEVE
     *       vpcId: ${aws_vpc.example.id}
     *       healthCheck:
     *         port: 80
     *         protocol: HTTP
     *   exampleListener:
     *     type: aws:lb:Listener
     *     properties:
     *       loadBalancerArn: ${exampleLoadBalancer.id}
     *       defaultActions:
     *         - targetGroupArn: ${exampleTargetGroup.id}
     *           type: forward
     * ```
     * {{% /example %}}
     * {{% /examples %}}
     *
     * ## Import
     *
     * Using `pulumi import`, import listeners using their ARN. For example:
     *
     * ```sh
     *  $ pulumi import aws:lb/listener:Listener front_end arn:aws:elasticloadbalancing:us-west-2:187416307283:listener/app/front-end-alb/8e4497da625e2d8a/9ab28ade35828f96
     * ```
     *  
     */
    export interface ListenerArgs {
        /**
         * Name of the Application-Layer Protocol Negotiation (ALPN) policy. Can be set if `protocol` is `TLS`. Valid values are `HTTP1Only`, `HTTP2Only`, `HTTP2Optional`, `HTTP2Preferred`, and `None`.
         */
        alpnPolicy?: pulumi.Input<string>;
        /**
         * ARN of the default SSL server certificate. Exactly one certificate is required if the protocol is HTTPS. For adding additional SSL certificates, see the `aws.lb.ListenerCertificate` resource.
         */
        certificateArn?: pulumi.Input<string>;
        /**
         * Configuration block for default actions. Detailed below.
         */
        defaultActions?: pulumi.Input<pulumi.Input<pulumiAws.types.input.lb.ListenerDefaultAction>[]>;
        /**
         * Port on which the load balancer is listening. Not valid for Gateway Load Balancers.
         */
        port?: pulumi.Input<number>;
        /**
         * Protocol for connections from clients to the load balancer. For Application Load Balancers, valid values are `HTTP` and `HTTPS`, with a default of `HTTP`. For Network Load Balancers, valid values are `TCP`, `TLS`, `UDP`, and `TCP_UDP`. Not valid to use `UDP` or `TCP_UDP` if dual-stack mode is enabled. Not valid for Gateway Load Balancers.
         */
        protocol?: pulumi.Input<string>;
        /**
         * Name of the SSL Policy for the listener. Required if `protocol` is `HTTPS` or `TLS`.
         */
        sslPolicy?: pulumi.Input<string>;
        /**
         * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         *
         * > **NOTE::** Please note that listeners that are attached to Application Load Balancers must use either `HTTP` or `HTTPS` protocols while listeners that are attached to Network Load Balancers must use the `TCP` protocol.
         */
        tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    }

    /**
     * Provides a Target Group resource for use with Load Balancer resources.
     *
     * > **Note:** `aws.alb.TargetGroup` is known as `aws.lb.TargetGroup`. The functionality is identical.
     *
     * {{% examples %}}
     * ## Example Usage
     * {{% example %}}
     * ### Instance Target Group
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const main = new aws.ec2.Vpc("main", {cidrBlock: "10.0.0.0/16"});
     * const test = new aws.lb.TargetGroup("test", {
     *     port: 80,
     *     protocol: "HTTP",
     *     vpcId: main.id,
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * main = aws.ec2.Vpc("main", cidr_block="10.0.0.0/16")
     * test = aws.lb.TargetGroup("test",
     *     port=80,
     *     protocol="HTTP",
     *     vpc_id=main.id)
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var main = new Aws.Ec2.Vpc("main", new()
     *     {
     *         CidrBlock = "10.0.0.0/16",
     *     });
     *
     *     var test = new Aws.LB.TargetGroup("test", new()
     *     {
     *         Port = 80,
     *         Protocol = "HTTP",
     *         VpcId = main.Id,
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lb"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		main, err := ec2.NewVpc(ctx, "main", &ec2.VpcArgs{
     * 			CidrBlock: pulumi.String("10.0.0.0/16"),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		_, err = lb.NewTargetGroup(ctx, "test", &lb.TargetGroupArgs{
     * 			Port:     pulumi.Int(80),
     * 			Protocol: pulumi.String("HTTP"),
     * 			VpcId:    main.ID(),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.ec2.Vpc;
     * import com.pulumi.aws.ec2.VpcArgs;
     * import com.pulumi.aws.lb.TargetGroup;
     * import com.pulumi.aws.lb.TargetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var main = new Vpc("main", VpcArgs.builder()        
     *             .cidrBlock("10.0.0.0/16")
     *             .build());
     *
     *         var test = new TargetGroup("test", TargetGroupArgs.builder()        
     *             .port(80)
     *             .protocol("HTTP")
     *             .vpcId(main.id())
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   test:
     *     type: aws:lb:TargetGroup
     *     properties:
     *       port: 80
     *       protocol: HTTP
     *       vpcId: ${main.id}
     *   main:
     *     type: aws:ec2:Vpc
     *     properties:
     *       cidrBlock: 10.0.0.0/16
     * ```
     * {{% /example %}}
     * {{% example %}}
     * ### IP Target Group
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const main = new aws.ec2.Vpc("main", {cidrBlock: "10.0.0.0/16"});
     * const ip_example = new aws.lb.TargetGroup("ip-example", {
     *     port: 80,
     *     protocol: "HTTP",
     *     targetType: "ip",
     *     vpcId: main.id,
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * main = aws.ec2.Vpc("main", cidr_block="10.0.0.0/16")
     * ip_example = aws.lb.TargetGroup("ip-example",
     *     port=80,
     *     protocol="HTTP",
     *     target_type="ip",
     *     vpc_id=main.id)
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var main = new Aws.Ec2.Vpc("main", new()
     *     {
     *         CidrBlock = "10.0.0.0/16",
     *     });
     *
     *     var ip_example = new Aws.LB.TargetGroup("ip-example", new()
     *     {
     *         Port = 80,
     *         Protocol = "HTTP",
     *         TargetType = "ip",
     *         VpcId = main.Id,
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lb"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		main, err := ec2.NewVpc(ctx, "main", &ec2.VpcArgs{
     * 			CidrBlock: pulumi.String("10.0.0.0/16"),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		_, err = lb.NewTargetGroup(ctx, "ip-example", &lb.TargetGroupArgs{
     * 			Port:       pulumi.Int(80),
     * 			Protocol:   pulumi.String("HTTP"),
     * 			TargetType: pulumi.String("ip"),
     * 			VpcId:      main.ID(),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.ec2.Vpc;
     * import com.pulumi.aws.ec2.VpcArgs;
     * import com.pulumi.aws.lb.TargetGroup;
     * import com.pulumi.aws.lb.TargetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var main = new Vpc("main", VpcArgs.builder()        
     *             .cidrBlock("10.0.0.0/16")
     *             .build());
     *
     *         var ip_example = new TargetGroup("ip-example", TargetGroupArgs.builder()        
     *             .port(80)
     *             .protocol("HTTP")
     *             .targetType("ip")
     *             .vpcId(main.id())
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   ip-example:
     *     type: aws:lb:TargetGroup
     *     properties:
     *       port: 80
     *       protocol: HTTP
     *       targetType: ip
     *       vpcId: ${main.id}
     *   main:
     *     type: aws:ec2:Vpc
     *     properties:
     *       cidrBlock: 10.0.0.0/16
     * ```
     * {{% /example %}}
     * {{% example %}}
     * ### Lambda Target Group
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const lambda_example = new aws.lb.TargetGroup("lambda-example", {targetType: "lambda"});
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * lambda_example = aws.lb.TargetGroup("lambda-example", target_type="lambda")
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var lambda_example = new Aws.LB.TargetGroup("lambda-example", new()
     *     {
     *         TargetType = "lambda",
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lb"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		_, err := lb.NewTargetGroup(ctx, "lambda-example", &lb.TargetGroupArgs{
     * 			TargetType: pulumi.String("lambda"),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lb.TargetGroup;
     * import com.pulumi.aws.lb.TargetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var lambda_example = new TargetGroup("lambda-example", TargetGroupArgs.builder()        
     *             .targetType("lambda")
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   lambda-example:
     *     type: aws:lb:TargetGroup
     *     properties:
     *       targetType: lambda
     * ```
     * {{% /example %}}
     * {{% example %}}
     * ### ALB Target Group
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const alb_example = new aws.lb.TargetGroup("alb-example", {
     *     targetType: "alb",
     *     port: 80,
     *     protocol: "TCP",
     *     vpcId: aws_vpc.main.id,
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * alb_example = aws.lb.TargetGroup("alb-example",
     *     target_type="alb",
     *     port=80,
     *     protocol="TCP",
     *     vpc_id=aws_vpc["main"]["id"])
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var alb_example = new Aws.LB.TargetGroup("alb-example", new()
     *     {
     *         TargetType = "alb",
     *         Port = 80,
     *         Protocol = "TCP",
     *         VpcId = aws_vpc.Main.Id,
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lb"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		_, err := lb.NewTargetGroup(ctx, "alb-example", &lb.TargetGroupArgs{
     * 			TargetType: pulumi.String("alb"),
     * 			Port:       pulumi.Int(80),
     * 			Protocol:   pulumi.String("TCP"),
     * 			VpcId:      pulumi.Any(aws_vpc.Main.Id),
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lb.TargetGroup;
     * import com.pulumi.aws.lb.TargetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var alb_example = new TargetGroup("alb-example", TargetGroupArgs.builder()        
     *             .targetType("alb")
     *             .port(80)
     *             .protocol("TCP")
     *             .vpcId(aws_vpc.main().id())
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   alb-example:
     *     type: aws:lb:TargetGroup
     *     properties:
     *       targetType: alb
     *       port: 80
     *       protocol: TCP
     *       vpcId: ${aws_vpc.main.id}
     * ```
     * {{% /example %}}
     * {{% example %}}
     * ### Target group with unhealthy connection termination disabled
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const tcp_example = new aws.lb.TargetGroup("tcp-example", {
     *     port: 25,
     *     protocol: "TCP",
     *     vpcId: aws_vpc.main.id,
     *     targetHealthStates: [{
     *         enableUnhealthyConnectionTermination: false,
     *     }],
     * });
     * ```
     * ```python
     * import pulumi
     * import pulumi_aws as aws
     *
     * tcp_example = aws.lb.TargetGroup("tcp-example",
     *     port=25,
     *     protocol="TCP",
     *     vpc_id=aws_vpc["main"]["id"],
     *     target_health_states=[aws.lb.TargetGroupTargetHealthStateArgs(
     *         enable_unhealthy_connection_termination=False,
     *     )])
     * ```
     * ```csharp
     * using System.Collections.Generic;
     * using System.Linq;
     * using Pulumi;
     * using Aws = Pulumi.Aws;
     *
     * return await Deployment.RunAsync(() => 
     * {
     *     var tcp_example = new Aws.LB.TargetGroup("tcp-example", new()
     *     {
     *         Port = 25,
     *         Protocol = "TCP",
     *         VpcId = aws_vpc.Main.Id,
     *         TargetHealthStates = new[]
     *         {
     *             new Aws.LB.Inputs.TargetGroupTargetHealthStateArgs
     *             {
     *                 EnableUnhealthyConnectionTermination = false,
     *             },
     *         },
     *     });
     *
     * });
     * ```
     * ```go
     * package main
     *
     * import (
     * 	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lb"
     * 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
     * )
     *
     * func main() {
     * 	pulumi.Run(func(ctx *pulumi.Context) error {
     * 		_, err := lb.NewTargetGroup(ctx, "tcp-example", &lb.TargetGroupArgs{
     * 			Port:     pulumi.Int(25),
     * 			Protocol: pulumi.String("TCP"),
     * 			VpcId:    pulumi.Any(aws_vpc.Main.Id),
     * 			TargetHealthStates: lb.TargetGroupTargetHealthStateArray{
     * 				&lb.TargetGroupTargetHealthStateArgs{
     * 					EnableUnhealthyConnectionTermination: pulumi.Bool(false),
     * 				},
     * 			},
     * 		})
     * 		if err != nil {
     * 			return err
     * 		}
     * 		return nil
     * 	})
     * }
     * ```
     * ```java
     * package generated_program;
     *
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.aws.lb.TargetGroup;
     * import com.pulumi.aws.lb.TargetGroupArgs;
     * import com.pulumi.aws.lb.inputs.TargetGroupTargetHealthStateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     *
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     *
     *     public static void stack(Context ctx) {
     *         var tcp_example = new TargetGroup("tcp-example", TargetGroupArgs.builder()        
     *             .port(25)
     *             .protocol("TCP")
     *             .vpcId(aws_vpc.main().id())
     *             .targetHealthStates(TargetGroupTargetHealthStateArgs.builder()
     *                 .enableUnhealthyConnectionTermination(false)
     *                 .build())
     *             .build());
     *
     *     }
     * }
     * ```
     * ```yaml
     * resources:
     *   tcp-example:
     *     type: aws:lb:TargetGroup
     *     properties:
     *       port: 25
     *       protocol: TCP
     *       vpcId: ${aws_vpc.main.id}
     *       targetHealthStates:
     *         - enableUnhealthyConnectionTermination: false
     * ```
     * {{% /example %}}
     * {{% /examples %}}
     *
     * ## Import
     *
     * Using `pulumi import`, import Target Groups using their ARN. For example:
     *
     * ```sh
     *  $ pulumi import aws:lb/targetGroup:TargetGroup app_front_end arn:aws:elasticloadbalancing:us-west-2:187416307283:targetgroup/app-front-end/20cfe21448b66314
     * ```
     *  
     */
    export interface TargetGroupArgs {
        /**
         * Whether to terminate connections at the end of the deregistration timeout on Network Load Balancers. See [doc](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#deregistration-delay) for more information. Default is `false`.
         */
        connectionTermination?: pulumi.Input<boolean>;
        /**
         * Amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused. The range is 0-3600 seconds. The default value is 300 seconds.
         */
        deregistrationDelay?: pulumi.Input<number>;
        /**
         * Health Check configuration block. Detailed below.
         */
        healthCheck?: pulumi.Input<pulumiAws.types.input.lb.TargetGroupHealthCheck>;
        /**
         * The type of IP addresses used by the target group, only supported when target type is set to `ip`. Possible values are `ipv4` or `ipv6`.
         */
        ipAddressType?: pulumi.Input<string>;
        /**
         * Whether the request and response headers exchanged between the load balancer and the Lambda function include arrays of values or strings. Only applies when `target_type` is `lambda`. Default is `false`.
         */
        lambdaMultiValueHeadersEnabled?: pulumi.Input<boolean>;
        /**
         * Determines how the load balancer selects targets when routing requests. Only applicable for Application Load Balancer Target Groups. The value is `round_robin` or `least_outstanding_requests`. The default is `round_robin`.
         */
        loadBalancingAlgorithmType?: pulumi.Input<string>;
        /**
         * Indicates whether cross zone load balancing is enabled. The value is `"true"`, `"false"` or `"use_load_balancer_configuration"`. The default is `"use_load_balancer_configuration"`.
         */
        loadBalancingCrossZoneEnabled?: pulumi.Input<string>;
        /**
         * Name of the target group. If omitted, this provider will assign a random, unique name. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
         */
        name?: pulumi.Input<string>;
        /**
         * Creates a unique name beginning with the specified prefix. Conflicts with `name`. Cannot be longer than 6 characters.
         */
        namePrefix?: pulumi.Input<string>;
        /**
         * Port on which targets receive traffic, unless overridden when registering a specific target. Required when `target_type` is `instance`, `ip` or `alb`. Does not apply when `target_type` is `lambda`.
         */
        port?: pulumi.Input<number>;
        /**
         * Whether client IP preservation is enabled. See [doc](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#client-ip-preservation) for more information.
         */
        preserveClientIp?: pulumi.Input<string>;
        /**
         * Protocol to use for routing traffic to the targets. Should be one of `GENEVE`, `HTTP`, `HTTPS`, `TCP`, `TCP_UDP`, `TLS`, or `UDP`. Required when `target_type` is `instance`, `ip` or `alb`. Does not apply when `target_type` is `lambda`.
         */
        protocol?: pulumi.Input<string>;
        /**
         * Only applicable when `protocol` is `HTTP` or `HTTPS`. The protocol version. Specify `GRPC` to send requests to targets using gRPC. Specify `HTTP2` to send requests to targets using HTTP/2. The default is `HTTP1`, which sends requests to targets using HTTP/1.1
         */
        protocolVersion?: pulumi.Input<string>;
        /**
         * Whether to enable support for proxy protocol v2 on Network Load Balancers. See [doc](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#proxy-protocol) for more information. Default is `false`.
         */
        proxyProtocolV2?: pulumi.Input<boolean>;
        /**
         * Amount time for targets to warm up before the load balancer sends them a full share of requests. The range is 30-900 seconds or 0 to disable. The default value is 0 seconds.
         */
        slowStart?: pulumi.Input<number>;
        /**
         * Stickiness configuration block. Detailed below.
         */
        stickiness?: pulumi.Input<pulumiAws.types.input.lb.TargetGroupStickiness>;
        /**
         * Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
         */
        tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * Target failover block. Only applicable for Gateway Load Balancer target groups. See target_failover for more information.
         */
        targetFailovers?: pulumi.Input<pulumi.Input<pulumiAws.types.input.lb.TargetGroupTargetFailover>[]>;
        /**
         * Target health state block. Only applicable for Network Load Balancer target groups when `protocol` is `TCP` or `TLS`. See target_health_state for more information.
         */
        targetHealthStates?: pulumi.Input<pulumi.Input<pulumiAws.types.input.lb.TargetGroupTargetHealthState>[]>;
        /**
         * Type of target that you must specify when registering targets with this target group. See [doc](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_CreateTargetGroup.html) for supported values. The default is `instance`.
         *
         * Note that you can't specify targets for a target group using both instance IDs and IP addresses.
         *
         * If the target type is `ip`, specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP addresses.
         *
         * Network Load Balancers do not support the `lambda` target type.
         *
         * Application Load Balancers do not support the `alb` target type.
         */
        targetType?: pulumi.Input<string>;
        /**
         * Identifier of the VPC in which to create the target group. Required when `target_type` is `instance`, `ip` or `alb`. Does not apply when `target_type` is `lambda`.
         */
        vpcId?: pulumi.Input<string>;
    }
}
