// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsx.apigatewayv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HttpRouteArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpRouteArgs Empty = new HttpRouteArgs();

    /**
     * The key of the target authorizer for the route specified in the `authorizers` property. This is used to automatically calculate the `authorizerId` property of the route.
     * 
     */
    @Import(name="authorizer")
    private @Nullable Output<String> authorizer;

    /**
     * @return The key of the target authorizer for the route specified in the `authorizers` property. This is used to automatically calculate the `authorizerId` property of the route.
     * 
     */
    public Optional<Output<String>> authorizer() {
        return Optional.ofNullable(this.authorizer);
    }

    /**
     * The key of the target integration for the route specified in the `integrations` property. This is used to automatically calculate the `target` property of the route. One of `integration` or `target` must be specified.
     * 
     */
    @Import(name="integration")
    private @Nullable Output<String> integration;

    /**
     * @return The key of the target integration for the route specified in the `integrations` property. This is used to automatically calculate the `target` property of the route. One of `integration` or `target` must be specified.
     * 
     */
    public Optional<Output<String>> integration() {
        return Optional.ofNullable(this.integration);
    }

    private HttpRouteArgs() {}

    private HttpRouteArgs(HttpRouteArgs $) {
        this.authorizer = $.authorizer;
        this.integration = $.integration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpRouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpRouteArgs $;

        public Builder() {
            $ = new HttpRouteArgs();
        }

        public Builder(HttpRouteArgs defaults) {
            $ = new HttpRouteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizer The key of the target authorizer for the route specified in the `authorizers` property. This is used to automatically calculate the `authorizerId` property of the route.
         * 
         * @return builder
         * 
         */
        public Builder authorizer(@Nullable Output<String> authorizer) {
            $.authorizer = authorizer;
            return this;
        }

        /**
         * @param authorizer The key of the target authorizer for the route specified in the `authorizers` property. This is used to automatically calculate the `authorizerId` property of the route.
         * 
         * @return builder
         * 
         */
        public Builder authorizer(String authorizer) {
            return authorizer(Output.of(authorizer));
        }

        /**
         * @param integration The key of the target integration for the route specified in the `integrations` property. This is used to automatically calculate the `target` property of the route. One of `integration` or `target` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder integration(@Nullable Output<String> integration) {
            $.integration = integration;
            return this;
        }

        /**
         * @param integration The key of the target integration for the route specified in the `integrations` property. This is used to automatically calculate the `target` property of the route. One of `integration` or `target` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder integration(String integration) {
            return integration(Output.of(integration));
        }

        public HttpRouteArgs build() {
            return $;
        }
    }

}
