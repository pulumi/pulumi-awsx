// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsx.apigatewayv2.inputs;

import com.pulumi.awsx.apigatewayv2.inputs.DomainConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainMappingArgs Empty = new DomainMappingArgs();

    /**
     * Configuration of the domain name to create. Cannot be specified together with `domainId`.
     * 
     */
    @Import(name="domainConfiguration")
    private @Nullable Output<DomainConfigurationArgs> domainConfiguration;

    /**
     * @return Configuration of the domain name to create. Cannot be specified together with `domainId`.
     * 
     */
    public Optional<Output<DomainConfigurationArgs>> domainConfiguration() {
        return Optional.ofNullable(this.domainConfiguration);
    }

    /**
     * Identifier of an existing domain. Cannot be specified together with `domainConfiguration`.
     * 
     */
    @Import(name="domainId")
    private @Nullable Output<String> domainId;

    /**
     * @return Identifier of an existing domain. Cannot be specified together with `domainConfiguration`.
     * 
     */
    public Optional<Output<String>> domainId() {
        return Optional.ofNullable(this.domainId);
    }

    private DomainMappingArgs() {}

    private DomainMappingArgs(DomainMappingArgs $) {
        this.domainConfiguration = $.domainConfiguration;
        this.domainId = $.domainId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainMappingArgs $;

        public Builder() {
            $ = new DomainMappingArgs();
        }

        public Builder(DomainMappingArgs defaults) {
            $ = new DomainMappingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainConfiguration Configuration of the domain name to create. Cannot be specified together with `domainId`.
         * 
         * @return builder
         * 
         */
        public Builder domainConfiguration(@Nullable Output<DomainConfigurationArgs> domainConfiguration) {
            $.domainConfiguration = domainConfiguration;
            return this;
        }

        /**
         * @param domainConfiguration Configuration of the domain name to create. Cannot be specified together with `domainId`.
         * 
         * @return builder
         * 
         */
        public Builder domainConfiguration(DomainConfigurationArgs domainConfiguration) {
            return domainConfiguration(Output.of(domainConfiguration));
        }

        /**
         * @param domainId Identifier of an existing domain. Cannot be specified together with `domainConfiguration`.
         * 
         * @return builder
         * 
         */
        public Builder domainId(@Nullable Output<String> domainId) {
            $.domainId = domainId;
            return this;
        }

        /**
         * @param domainId Identifier of an existing domain. Cannot be specified together with `domainConfiguration`.
         * 
         * @return builder
         * 
         */
        public Builder domainId(String domainId) {
            return domainId(Output.of(domainId));
        }

        public DomainMappingArgs build() {
            return $;
        }
    }

}
