// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsx.ecr;

import com.pulumi.awsx.Utilities;
import com.pulumi.awsx.ecr.RegistryImageArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import javax.annotation.Nullable;

/**
 * Manages the lifecycle of a docker image in a registry. You can upload images to a registry (= `docker push`) and also delete them again. In contrast to [`awsx.ecr.Image`](/registry/packages/awsx/api-docs/ecr/image/), this resource does not require to build the image, but can be used to push an existing image to an ECR repository. The image will be pushed whenever the source image changes or is updated.
 * 
 * ## Example Usage
 * ### Pushing an image to an ECR repository
 * ```java
 * import com.pulumi.Pulumi;
 * import com.pulumi.awsx.ecr.Repository;
 * import com.pulumi.awsx.ecr.RepositoryArgs;
 * import com.pulumi.awsx.ecr.RegistryImage;
 * import com.pulumi.awsx.ecr.RegistryImageArgs;
 * 
 * public class Main {
 *     public static void main(String[] args) {
 *         Pulumi.run(ctx -&gt; {
 *             // Create an ECR repository with force delete enabled
 *             var repository = new Repository(&#34;repository&#34;, RepositoryArgs.builder()
 *                 .forceDelete(true)
 *                 .build());
 * 
 *             // Create a RegistryImage based on the ECR repository URL and source image
 *             var registryImage = new RegistryImage(&#34;registryImage&#34;, RegistryImageArgs.builder()
 *                 .repositoryUrl(repository.url())
 *                 .sourceImage(&#34;my-awesome-image:v1.0.0&#34;)
 *                 .build());
 *         });
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="awsx:ecr:RegistryImage")
public class RegistryImage extends com.pulumi.resources.ComponentResource {
    /**
     * The underlying RegistryImage resource.
     * 
     */
    @Export(name="image", refs={com.pulumi.docker.RegistryImage.class}, tree="[0]")
    private Output<com.pulumi.docker.RegistryImage> image;

    /**
     * @return The underlying RegistryImage resource.
     * 
     */
    public Output<com.pulumi.docker.RegistryImage> image() {
        return this.image;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RegistryImage(String name) {
        this(name, RegistryImageArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RegistryImage(String name, RegistryImageArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RegistryImage(String name, RegistryImageArgs args, @Nullable com.pulumi.resources.ComponentResourceOptions options) {
        super("awsx:ecr:RegistryImage", name, args == null ? RegistryImageArgs.Empty : args, makeResourceOptions(options, Codegen.empty()), true);
    }

    private static com.pulumi.resources.ComponentResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.ComponentResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.ComponentResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.ComponentResourceOptions.merge(defaultOptions, options, id);
    }

}
