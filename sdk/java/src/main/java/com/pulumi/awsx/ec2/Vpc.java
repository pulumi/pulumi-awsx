// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsx.ec2;

import com.pulumi.aws.ec2.Eip;
import com.pulumi.aws.ec2.InternetGateway;
import com.pulumi.aws.ec2.NatGateway;
import com.pulumi.aws.ec2.Route;
import com.pulumi.aws.ec2.RouteTable;
import com.pulumi.aws.ec2.RouteTableAssociation;
import com.pulumi.aws.ec2.Subnet;
import com.pulumi.aws.ec2.VpcEndpoint;
import com.pulumi.awsx.Utilities;
import com.pulumi.awsx.ec2.VpcArgs;
import com.pulumi.awsx.ec2.outputs.ResolvedSubnetSpec;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * The VPC component provides a VPC with configured subnets and NAT gateways.
 * 
 * ## Example Usage
 * 
 * Basic usage:
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.awsx.ec2.Vpc;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var vpc = new Vpc(&#34;vpc&#34;);
 * 
 *         ctx.export(&#34;vpcId&#34;, vpc.vpcId());
 *         ctx.export(&#34;vpcPrivateSubnetIds&#34;, vpc.privateSubnetIds());
 *         ctx.export(&#34;vpcPublicSubnetIds&#34;, vpc.publicSubnetIds());
 *     }
 * }
 * ```
 * 
 * ## Subnet Layout Strategies
 * 
 * If no subnet arguments are passed, then a public and private subnet will be created in each AZ with default sizing. The layout of these subnets can be customised by specifying additional arguments.
 * 
 * All strategies are designed to help build a uniform layout of subnets each each availability zone.
 * 
 * If no strategy is specified, &#34;Legacy&#34; will be used for backward compatibility reasons. In the next major version this will change to defaulting to &#34;Auto&#34;.
 * 
 * ### Auto
 * 
 * The &#34;Auto&#34; strategy divides the VPC space evenly between the availability zones. Within each availability zone it allocates each subnet in the order they were specified. If a CIDR mask or size was not specified it will default to an even division of the availability zone range. If subnets have different sizes, spaces will be automatically added to ensure subnets don&#39;t overlap (e.g. where a previous subnet is smaller than the next).
 * 
 * ### Exact
 * 
 * The &#34;Exact&#34; strategy is the same as &#34;Auto&#34; with the additional requirement to explicitly specify what the whole of each zone&#39;s range will be used for. Where you expect to have a gap between or after subnets, these must be passed using the subnet specification type &#34;Unused&#34; to show all space has been properly accounted for.
 * 
 * ### Explicit CIDR Blocks
 * 
 * If you prefer to do your CIDR block calculations yourself, you can specify a list of CIDR blocks for each subnet spec which it will be allocated for in each availability zone. If using explicit layouts, all subnet specs must be declared with explicit CIDR blocks. Each list of CIDR blocks must have the same length as the number of availability zones for the VPC.
 * 
 * ### Legacy
 * 
 * The &#34;Legacy&#34; works similarly to the &#34;Auto&#34; strategy except that within each availability zone it allocates the private subnet first, followed by the public subnets, and lastly the isolated subnets. The order of subnet specifications of the same type can be changed, but the ordering of private, public, isolated is not overridable. For more flexibility we recommend moving to the &#34;Auto&#34; strategy. The output property `subnetLayout` shows the configuration required if specifying the &#34;Auto&#34; strategy to maintain the current layout.
 * 
 */
@ResourceType(type="awsx:ec2:Vpc")
public class Vpc extends com.pulumi.resources.ComponentResource {
    /**
     * The EIPs for any NAT Gateways for the VPC. If no NAT Gateways are specified, this will be an empty list.
     * 
     */
    @Export(name="eips", refs={List.class,Eip.class}, tree="[0,1]")
    private Output<List<Eip>> eips;

    /**
     * @return The EIPs for any NAT Gateways for the VPC. If no NAT Gateways are specified, this will be an empty list.
     * 
     */
    public Output<List<Eip>> eips() {
        return this.eips;
    }
    /**
     * The Internet Gateway for the VPC.
     * 
     */
    @Export(name="internetGateway", refs={InternetGateway.class}, tree="[0]")
    private Output<InternetGateway> internetGateway;

    /**
     * @return The Internet Gateway for the VPC.
     * 
     */
    public Output<InternetGateway> internetGateway() {
        return this.internetGateway;
    }
    @Export(name="isolatedSubnetIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> isolatedSubnetIds;

    public Output<List<String>> isolatedSubnetIds() {
        return this.isolatedSubnetIds;
    }
    /**
     * The NAT Gateways for the VPC. If no NAT Gateways are specified, this will be an empty list.
     * 
     */
    @Export(name="natGateways", refs={List.class,NatGateway.class}, tree="[0,1]")
    private Output<List<NatGateway>> natGateways;

    /**
     * @return The NAT Gateways for the VPC. If no NAT Gateways are specified, this will be an empty list.
     * 
     */
    public Output<List<NatGateway>> natGateways() {
        return this.natGateways;
    }
    @Export(name="privateSubnetIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> privateSubnetIds;

    public Output<List<String>> privateSubnetIds() {
        return this.privateSubnetIds;
    }
    @Export(name="publicSubnetIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> publicSubnetIds;

    public Output<List<String>> publicSubnetIds() {
        return this.publicSubnetIds;
    }
    /**
     * The Route Table Associations for the VPC.
     * 
     */
    @Export(name="routeTableAssociations", refs={List.class,RouteTableAssociation.class}, tree="[0,1]")
    private Output<List<RouteTableAssociation>> routeTableAssociations;

    /**
     * @return The Route Table Associations for the VPC.
     * 
     */
    public Output<List<RouteTableAssociation>> routeTableAssociations() {
        return this.routeTableAssociations;
    }
    /**
     * The Route Tables for the VPC.
     * 
     */
    @Export(name="routeTables", refs={List.class,RouteTable.class}, tree="[0,1]")
    private Output<List<RouteTable>> routeTables;

    /**
     * @return The Route Tables for the VPC.
     * 
     */
    public Output<List<RouteTable>> routeTables() {
        return this.routeTables;
    }
    /**
     * The Routes for the VPC.
     * 
     */
    @Export(name="routes", refs={List.class,Route.class}, tree="[0,1]")
    private Output<List<Route>> routes;

    /**
     * @return The Routes for the VPC.
     * 
     */
    public Output<List<Route>> routes() {
        return this.routes;
    }
    /**
     * The resolved subnet specs layout deployed to each availability zone.
     * 
     */
    @Export(name="subnetLayout", refs={List.class,ResolvedSubnetSpec.class}, tree="[0,1]")
    private Output<List<ResolvedSubnetSpec>> subnetLayout;

    /**
     * @return The resolved subnet specs layout deployed to each availability zone.
     * 
     */
    public Output<List<ResolvedSubnetSpec>> subnetLayout() {
        return this.subnetLayout;
    }
    /**
     * The VPC&#39;s subnets.
     * 
     */
    @Export(name="subnets", refs={List.class,Subnet.class}, tree="[0,1]")
    private Output<List<Subnet>> subnets;

    /**
     * @return The VPC&#39;s subnets.
     * 
     */
    public Output<List<Subnet>> subnets() {
        return this.subnets;
    }
    /**
     * The VPC.
     * 
     */
    @Export(name="vpc", refs={com.pulumi.aws.ec2.Vpc.class}, tree="[0]")
    private Output<com.pulumi.aws.ec2.Vpc> vpc;

    /**
     * @return The VPC.
     * 
     */
    public Output<com.pulumi.aws.ec2.Vpc> vpc() {
        return this.vpc;
    }
    /**
     * The VPC Endpoints that are enabled
     * 
     */
    @Export(name="vpcEndpoints", refs={List.class,VpcEndpoint.class}, tree="[0,1]")
    private Output<List<VpcEndpoint>> vpcEndpoints;

    /**
     * @return The VPC Endpoints that are enabled
     * 
     */
    public Output<List<VpcEndpoint>> vpcEndpoints() {
        return this.vpcEndpoints;
    }
    @Export(name="vpcId", refs={String.class}, tree="[0]")
    private Output<String> vpcId;

    public Output<String> vpcId() {
        return this.vpcId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Vpc(String name) {
        this(name, VpcArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Vpc(String name, @Nullable VpcArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Vpc(String name, @Nullable VpcArgs args, @Nullable com.pulumi.resources.ComponentResourceOptions options) {
        super("awsx:ec2:Vpc", name, args == null ? VpcArgs.Empty : args, makeResourceOptions(options, Codegen.empty()), true);
    }

    private static com.pulumi.resources.ComponentResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.ComponentResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.ComponentResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.ComponentResourceOptions.merge(defaultOptions, options, id);
    }

}
