// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsx.awsx.inputs;

import com.pulumi.awsx.awsx.inputs.ExistingLogGroupArgs;
import com.pulumi.awsx.awsx.inputs.LogGroupArgs;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Log group which is only created if enabled.
 * 
 */
public final class OptionalLogGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final OptionalLogGroupArgs Empty = new OptionalLogGroupArgs();

    /**
     * Arguments to use instead of the default values during creation.
     * 
     */
    @Import(name="args")
    private @Nullable LogGroupArgs args;

    /**
     * @return Arguments to use instead of the default values during creation.
     * 
     */
    public Optional<LogGroupArgs> args() {
        return Optional.ofNullable(this.args);
    }

    /**
     * Enable creation of the log group.
     * 
     */
    @Import(name="enable")
    private @Nullable Boolean enable;

    /**
     * @return Enable creation of the log group.
     * 
     */
    public Optional<Boolean> enable() {
        return Optional.ofNullable(this.enable);
    }

    /**
     * Identity of an existing log group to use. Cannot be used in combination with `args` or `opts`.
     * 
     */
    @Import(name="existing")
    private @Nullable ExistingLogGroupArgs existing;

    /**
     * @return Identity of an existing log group to use. Cannot be used in combination with `args` or `opts`.
     * 
     */
    public Optional<ExistingLogGroupArgs> existing() {
        return Optional.ofNullable(this.existing);
    }

    private OptionalLogGroupArgs() {}

    private OptionalLogGroupArgs(OptionalLogGroupArgs $) {
        this.args = $.args;
        this.enable = $.enable;
        this.existing = $.existing;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OptionalLogGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OptionalLogGroupArgs $;

        public Builder() {
            $ = new OptionalLogGroupArgs();
        }

        public Builder(OptionalLogGroupArgs defaults) {
            $ = new OptionalLogGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param args Arguments to use instead of the default values during creation.
         * 
         * @return builder
         * 
         */
        public Builder args(@Nullable LogGroupArgs args) {
            $.args = args;
            return this;
        }

        /**
         * @param enable Enable creation of the log group.
         * 
         * @return builder
         * 
         */
        public Builder enable(@Nullable Boolean enable) {
            $.enable = enable;
            return this;
        }

        /**
         * @param existing Identity of an existing log group to use. Cannot be used in combination with `args` or `opts`.
         * 
         * @return builder
         * 
         */
        public Builder existing(@Nullable ExistingLogGroupArgs existing) {
            $.existing = existing;
            return this;
        }

        public OptionalLogGroupArgs build() {
            return $;
        }
    }

}
