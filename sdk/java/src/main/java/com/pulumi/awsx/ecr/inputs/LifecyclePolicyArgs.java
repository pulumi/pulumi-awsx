// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsx.ecr.inputs;

import com.pulumi.awsx.ecr.inputs.LifecyclePolicyRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Simplified lifecycle policy model consisting of one or more rules that determine which images in a repository should be expired. See https://docs.aws.amazon.com/AmazonECR/latest/userguide/lifecycle_policy_examples.html for more details.
 * 
 */
public final class LifecyclePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final LifecyclePolicyArgs Empty = new LifecyclePolicyArgs();

    /**
     * Specifies the rules to determine how images should be retired from this repository. Rules are ordered from lowest priority to highest.  If there is a rule with a `selection` value of `any`, then it will have the highest priority.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<LifecyclePolicyRuleArgs>> rules;

    /**
     * @return Specifies the rules to determine how images should be retired from this repository. Rules are ordered from lowest priority to highest.  If there is a rule with a `selection` value of `any`, then it will have the highest priority.
     * 
     */
    public Optional<Output<List<LifecyclePolicyRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * Skips creation of the policy if set to `true`.
     * 
     */
    @Import(name="skip")
    private @Nullable Boolean skip;

    /**
     * @return Skips creation of the policy if set to `true`.
     * 
     */
    public Optional<Boolean> skip() {
        return Optional.ofNullable(this.skip);
    }

    private LifecyclePolicyArgs() {}

    private LifecyclePolicyArgs(LifecyclePolicyArgs $) {
        this.rules = $.rules;
        this.skip = $.skip;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LifecyclePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LifecyclePolicyArgs $;

        public Builder() {
            $ = new LifecyclePolicyArgs();
        }

        public Builder(LifecyclePolicyArgs defaults) {
            $ = new LifecyclePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param rules Specifies the rules to determine how images should be retired from this repository. Rules are ordered from lowest priority to highest.  If there is a rule with a `selection` value of `any`, then it will have the highest priority.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<LifecyclePolicyRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules Specifies the rules to determine how images should be retired from this repository. Rules are ordered from lowest priority to highest.  If there is a rule with a `selection` value of `any`, then it will have the highest priority.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<LifecyclePolicyRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules Specifies the rules to determine how images should be retired from this repository. Rules are ordered from lowest priority to highest.  If there is a rule with a `selection` value of `any`, then it will have the highest priority.
         * 
         * @return builder
         * 
         */
        public Builder rules(LifecyclePolicyRuleArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param skip Skips creation of the policy if set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder skip(@Nullable Boolean skip) {
            $.skip = skip;
            return this;
        }

        public LifecyclePolicyArgs build() {
            return $;
        }
    }

}
