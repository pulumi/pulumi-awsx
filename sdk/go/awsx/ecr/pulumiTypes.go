// *** WARNING: this file was generated by pulumi-gen-awsx. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Arguments for building a docker image
type DockerBuild struct {
	// An optional map of named build-time argument variables to set during the Docker build.  This flag allows you to pass built-time variables that can be accessed like environment variables inside the `RUN` instruction.
	Args map[string]string `pulumi:"args"`
	// Images to consider as cache sources
	CacheFrom []string `pulumi:"cacheFrom"`
	// dockerfile may be used to override the default Dockerfile name and/or location.  By default, it is assumed to be a file named Dockerfile in the root of the build context.
	Dockerfile *string `pulumi:"dockerfile"`
	// Environment variables to set on the invocation of `docker build`, for example to support `DOCKER_BUILDKIT=1 docker build`.
	Env map[string]string `pulumi:"env"`
	// An optional catch-all list of arguments to provide extra CLI options to the docker build command.  For example `['--network', 'host']`.
	ExtraOptions []string `pulumi:"extraOptions"`
	// Path to a directory to use for the Docker build context, usually the directory in which the Dockerfile resides (although dockerfile may be used to choose a custom location independent of this choice). If not specified, the context defaults to the current working directory; if a relative path is used, it is relative to the current working directory that Pulumi is evaluating.
	Path *string `pulumi:"path"`
	// The target of the dockerfile to build
	Target *string `pulumi:"target"`
}

// DockerBuildInput is an input type that accepts DockerBuildArgs and DockerBuildOutput values.
// You can construct a concrete instance of `DockerBuildInput` via:
//
//          DockerBuildArgs{...}
type DockerBuildInput interface {
	pulumi.Input

	ToDockerBuildOutput() DockerBuildOutput
	ToDockerBuildOutputWithContext(context.Context) DockerBuildOutput
}

// Arguments for building a docker image
type DockerBuildArgs struct {
	// An optional map of named build-time argument variables to set during the Docker build.  This flag allows you to pass built-time variables that can be accessed like environment variables inside the `RUN` instruction.
	Args pulumi.StringMapInput `pulumi:"args"`
	// Images to consider as cache sources
	CacheFrom pulumi.StringArrayInput `pulumi:"cacheFrom"`
	// dockerfile may be used to override the default Dockerfile name and/or location.  By default, it is assumed to be a file named Dockerfile in the root of the build context.
	Dockerfile pulumi.StringPtrInput `pulumi:"dockerfile"`
	// Environment variables to set on the invocation of `docker build`, for example to support `DOCKER_BUILDKIT=1 docker build`.
	Env pulumi.StringMapInput `pulumi:"env"`
	// An optional catch-all list of arguments to provide extra CLI options to the docker build command.  For example `['--network', 'host']`.
	ExtraOptions pulumi.StringArrayInput `pulumi:"extraOptions"`
	// Path to a directory to use for the Docker build context, usually the directory in which the Dockerfile resides (although dockerfile may be used to choose a custom location independent of this choice). If not specified, the context defaults to the current working directory; if a relative path is used, it is relative to the current working directory that Pulumi is evaluating.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The target of the dockerfile to build
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (DockerBuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerBuild)(nil)).Elem()
}

func (i DockerBuildArgs) ToDockerBuildOutput() DockerBuildOutput {
	return i.ToDockerBuildOutputWithContext(context.Background())
}

func (i DockerBuildArgs) ToDockerBuildOutputWithContext(ctx context.Context) DockerBuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerBuildOutput)
}

func (i DockerBuildArgs) ToDockerBuildPtrOutput() DockerBuildPtrOutput {
	return i.ToDockerBuildPtrOutputWithContext(context.Background())
}

func (i DockerBuildArgs) ToDockerBuildPtrOutputWithContext(ctx context.Context) DockerBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerBuildOutput).ToDockerBuildPtrOutputWithContext(ctx)
}

// DockerBuildPtrInput is an input type that accepts DockerBuildArgs, DockerBuildPtr and DockerBuildPtrOutput values.
// You can construct a concrete instance of `DockerBuildPtrInput` via:
//
//          DockerBuildArgs{...}
//
//  or:
//
//          nil
type DockerBuildPtrInput interface {
	pulumi.Input

	ToDockerBuildPtrOutput() DockerBuildPtrOutput
	ToDockerBuildPtrOutputWithContext(context.Context) DockerBuildPtrOutput
}

type dockerBuildPtrType DockerBuildArgs

func DockerBuildPtr(v *DockerBuildArgs) DockerBuildPtrInput {
	return (*dockerBuildPtrType)(v)
}

func (*dockerBuildPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerBuild)(nil)).Elem()
}

func (i *dockerBuildPtrType) ToDockerBuildPtrOutput() DockerBuildPtrOutput {
	return i.ToDockerBuildPtrOutputWithContext(context.Background())
}

func (i *dockerBuildPtrType) ToDockerBuildPtrOutputWithContext(ctx context.Context) DockerBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerBuildPtrOutput)
}

// Arguments for building a docker image
type DockerBuildOutput struct{ *pulumi.OutputState }

func (DockerBuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerBuild)(nil)).Elem()
}

func (o DockerBuildOutput) ToDockerBuildOutput() DockerBuildOutput {
	return o
}

func (o DockerBuildOutput) ToDockerBuildOutputWithContext(ctx context.Context) DockerBuildOutput {
	return o
}

func (o DockerBuildOutput) ToDockerBuildPtrOutput() DockerBuildPtrOutput {
	return o.ToDockerBuildPtrOutputWithContext(context.Background())
}

func (o DockerBuildOutput) ToDockerBuildPtrOutputWithContext(ctx context.Context) DockerBuildPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DockerBuild) *DockerBuild {
		return &v
	}).(DockerBuildPtrOutput)
}

// An optional map of named build-time argument variables to set during the Docker build.  This flag allows you to pass built-time variables that can be accessed like environment variables inside the `RUN` instruction.
func (o DockerBuildOutput) Args() pulumi.StringMapOutput {
	return o.ApplyT(func(v DockerBuild) map[string]string { return v.Args }).(pulumi.StringMapOutput)
}

// Images to consider as cache sources
func (o DockerBuildOutput) CacheFrom() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DockerBuild) []string { return v.CacheFrom }).(pulumi.StringArrayOutput)
}

// dockerfile may be used to override the default Dockerfile name and/or location.  By default, it is assumed to be a file named Dockerfile in the root of the build context.
func (o DockerBuildOutput) Dockerfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuild) *string { return v.Dockerfile }).(pulumi.StringPtrOutput)
}

// Environment variables to set on the invocation of `docker build`, for example to support `DOCKER_BUILDKIT=1 docker build`.
func (o DockerBuildOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v DockerBuild) map[string]string { return v.Env }).(pulumi.StringMapOutput)
}

// An optional catch-all list of arguments to provide extra CLI options to the docker build command.  For example `['--network', 'host']`.
func (o DockerBuildOutput) ExtraOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DockerBuild) []string { return v.ExtraOptions }).(pulumi.StringArrayOutput)
}

// Path to a directory to use for the Docker build context, usually the directory in which the Dockerfile resides (although dockerfile may be used to choose a custom location independent of this choice). If not specified, the context defaults to the current working directory; if a relative path is used, it is relative to the current working directory that Pulumi is evaluating.
func (o DockerBuildOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuild) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The target of the dockerfile to build
func (o DockerBuildOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuild) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type DockerBuildPtrOutput struct{ *pulumi.OutputState }

func (DockerBuildPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerBuild)(nil)).Elem()
}

func (o DockerBuildPtrOutput) ToDockerBuildPtrOutput() DockerBuildPtrOutput {
	return o
}

func (o DockerBuildPtrOutput) ToDockerBuildPtrOutputWithContext(ctx context.Context) DockerBuildPtrOutput {
	return o
}

func (o DockerBuildPtrOutput) Elem() DockerBuildOutput {
	return o.ApplyT(func(v *DockerBuild) DockerBuild {
		if v != nil {
			return *v
		}
		var ret DockerBuild
		return ret
	}).(DockerBuildOutput)
}

// An optional map of named build-time argument variables to set during the Docker build.  This flag allows you to pass built-time variables that can be accessed like environment variables inside the `RUN` instruction.
func (o DockerBuildPtrOutput) Args() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DockerBuild) map[string]string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringMapOutput)
}

// Images to consider as cache sources
func (o DockerBuildPtrOutput) CacheFrom() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DockerBuild) []string {
		if v == nil {
			return nil
		}
		return v.CacheFrom
	}).(pulumi.StringArrayOutput)
}

// dockerfile may be used to override the default Dockerfile name and/or location.  By default, it is assumed to be a file named Dockerfile in the root of the build context.
func (o DockerBuildPtrOutput) Dockerfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuild) *string {
		if v == nil {
			return nil
		}
		return v.Dockerfile
	}).(pulumi.StringPtrOutput)
}

// Environment variables to set on the invocation of `docker build`, for example to support `DOCKER_BUILDKIT=1 docker build`.
func (o DockerBuildPtrOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DockerBuild) map[string]string {
		if v == nil {
			return nil
		}
		return v.Env
	}).(pulumi.StringMapOutput)
}

// An optional catch-all list of arguments to provide extra CLI options to the docker build command.  For example `['--network', 'host']`.
func (o DockerBuildPtrOutput) ExtraOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DockerBuild) []string {
		if v == nil {
			return nil
		}
		return v.ExtraOptions
	}).(pulumi.StringArrayOutput)
}

// Path to a directory to use for the Docker build context, usually the directory in which the Dockerfile resides (although dockerfile may be used to choose a custom location independent of this choice). If not specified, the context defaults to the current working directory; if a relative path is used, it is relative to the current working directory that Pulumi is evaluating.
func (o DockerBuildPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuild) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// The target of the dockerfile to build
func (o DockerBuildPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuild) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DockerBuildInput)(nil)).Elem(), DockerBuildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerBuildPtrInput)(nil)).Elem(), DockerBuildArgs{})
	pulumi.RegisterOutputType(DockerBuildOutput{})
	pulumi.RegisterOutputType(DockerBuildPtrOutput{})
}
