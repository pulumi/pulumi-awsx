// Code generated by pulumi-gen-awsx DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ecs"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lb"
	"github.com/pulumi/pulumi-awsx/sdk/v2/go/awsx/awsx"
	"github.com/pulumi/pulumi-awsx/sdk/v2/go/awsx/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Create a TaskDefinition resource with the given unique name, arguments, and options.
// Creates required log-group and task & execution roles.
// Presents required Service load balancers if target group included in port mappings.
type EC2ServiceTaskDefinition struct {
	// Single container to make a TaskDefinition from.  Useful for simple cases where there aren't
	// multiple containers, especially when creating a TaskDefinition to call [run] on.
	//
	// Either [container] or [containers] must be provided.
	Container *TaskDefinitionContainerDefinition `pulumi:"container"`
	// All the containers to make a TaskDefinition from.  Useful when creating a Service that will
	// contain many containers within.
	//
	// Either [container] or [containers] must be provided.
	Containers map[string]TaskDefinitionContainerDefinition `pulumi:"containers"`
	// The number of cpu units used by the task. If not provided, a default will be computed based on the cumulative needs specified by [containerDefinitions]
	Cpu *string `pulumi:"cpu"`
	// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
	EphemeralStorage *ecs.TaskDefinitionEphemeralStorage `pulumi:"ephemeralStorage"`
	// The execution role that the Amazon ECS container agent and the Docker daemon can assume.
	// Will be created automatically if not defined.
	ExecutionRole *awsx.DefaultRoleWithPolicy `pulumi:"executionRole"`
	// An optional unique name for your task definition. If not specified, then a default will be created.
	Family *string `pulumi:"family"`
	// Configuration block(s) with Inference Accelerators settings. Detailed below.
	InferenceAccelerators []ecs.TaskDefinitionInferenceAccelerator `pulumi:"inferenceAccelerators"`
	// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
	IpcMode *string `pulumi:"ipcMode"`
	// A set of volume blocks that containers in your task may use.
	LogGroup *awsx.DefaultLogGroup `pulumi:"logGroup"`
	// The amount (in MiB) of memory used by the task.  If not provided, a default will be computed
	// based on the cumulative needs specified by [containerDefinitions]
	Memory *string `pulumi:"memory"`
	// Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
	NetworkMode *string `pulumi:"networkMode"`
	// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
	PidMode *string `pulumi:"pidMode"`
	// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`. Detailed below.
	PlacementConstraints []ecs.TaskDefinitionPlacementConstraint `pulumi:"placementConstraints"`
	// Configuration block for the App Mesh proxy. Detailed below.
	ProxyConfiguration *ecs.TaskDefinitionProxyConfiguration `pulumi:"proxyConfiguration"`
	// Configuration block for runtime_platform that containers in your task may use.
	RuntimePlatform *ecs.TaskDefinitionRuntimePlatform `pulumi:"runtimePlatform"`
	// Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is `false`.
	SkipDestroy *bool `pulumi:"skipDestroy"`
	// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// IAM role that allows your Amazon ECS container task to make calls to other AWS services.
	// Will be created automatically if not defined.
	TaskRole *awsx.DefaultRoleWithPolicy `pulumi:"taskRole"`
	// Whether should track latest task definition or the one created with the resource. Default is `false`.
	TrackLatest *bool `pulumi:"trackLatest"`
	// Configuration block for volumes that containers in your task may use. Detailed below.
	Volumes []ecs.TaskDefinitionVolume `pulumi:"volumes"`
}

// EC2ServiceTaskDefinitionInput is an input type that accepts EC2ServiceTaskDefinitionArgs and EC2ServiceTaskDefinitionOutput values.
// You can construct a concrete instance of `EC2ServiceTaskDefinitionInput` via:
//
//	EC2ServiceTaskDefinitionArgs{...}
type EC2ServiceTaskDefinitionInput interface {
	pulumi.Input

	ToEC2ServiceTaskDefinitionOutput() EC2ServiceTaskDefinitionOutput
	ToEC2ServiceTaskDefinitionOutputWithContext(context.Context) EC2ServiceTaskDefinitionOutput
}

// Create a TaskDefinition resource with the given unique name, arguments, and options.
// Creates required log-group and task & execution roles.
// Presents required Service load balancers if target group included in port mappings.
type EC2ServiceTaskDefinitionArgs struct {
	// Single container to make a TaskDefinition from.  Useful for simple cases where there aren't
	// multiple containers, especially when creating a TaskDefinition to call [run] on.
	//
	// Either [container] or [containers] must be provided.
	Container *TaskDefinitionContainerDefinitionArgs `pulumi:"container"`
	// All the containers to make a TaskDefinition from.  Useful when creating a Service that will
	// contain many containers within.
	//
	// Either [container] or [containers] must be provided.
	Containers map[string]TaskDefinitionContainerDefinitionArgs `pulumi:"containers"`
	// The number of cpu units used by the task. If not provided, a default will be computed based on the cumulative needs specified by [containerDefinitions]
	Cpu pulumi.StringPtrInput `pulumi:"cpu"`
	// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
	EphemeralStorage ecs.TaskDefinitionEphemeralStoragePtrInput `pulumi:"ephemeralStorage"`
	// The execution role that the Amazon ECS container agent and the Docker daemon can assume.
	// Will be created automatically if not defined.
	ExecutionRole *awsx.DefaultRoleWithPolicyArgs `pulumi:"executionRole"`
	// An optional unique name for your task definition. If not specified, then a default will be created.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// Configuration block(s) with Inference Accelerators settings. Detailed below.
	InferenceAccelerators ecs.TaskDefinitionInferenceAcceleratorArrayInput `pulumi:"inferenceAccelerators"`
	// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
	IpcMode pulumi.StringPtrInput `pulumi:"ipcMode"`
	// A set of volume blocks that containers in your task may use.
	LogGroup *awsx.DefaultLogGroupArgs `pulumi:"logGroup"`
	// The amount (in MiB) of memory used by the task.  If not provided, a default will be computed
	// based on the cumulative needs specified by [containerDefinitions]
	Memory pulumi.StringPtrInput `pulumi:"memory"`
	// Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
	NetworkMode pulumi.StringPtrInput `pulumi:"networkMode"`
	// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
	PidMode pulumi.StringPtrInput `pulumi:"pidMode"`
	// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`. Detailed below.
	PlacementConstraints ecs.TaskDefinitionPlacementConstraintArrayInput `pulumi:"placementConstraints"`
	// Configuration block for the App Mesh proxy. Detailed below.
	ProxyConfiguration ecs.TaskDefinitionProxyConfigurationPtrInput `pulumi:"proxyConfiguration"`
	// Configuration block for runtime_platform that containers in your task may use.
	RuntimePlatform ecs.TaskDefinitionRuntimePlatformPtrInput `pulumi:"runtimePlatform"`
	// Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is `false`.
	SkipDestroy pulumi.BoolPtrInput `pulumi:"skipDestroy"`
	// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// IAM role that allows your Amazon ECS container task to make calls to other AWS services.
	// Will be created automatically if not defined.
	TaskRole *awsx.DefaultRoleWithPolicyArgs `pulumi:"taskRole"`
	// Whether should track latest task definition or the one created with the resource. Default is `false`.
	TrackLatest pulumi.BoolPtrInput `pulumi:"trackLatest"`
	// Configuration block for volumes that containers in your task may use. Detailed below.
	Volumes ecs.TaskDefinitionVolumeArrayInput `pulumi:"volumes"`
}

func (EC2ServiceTaskDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EC2ServiceTaskDefinition)(nil)).Elem()
}

func (i EC2ServiceTaskDefinitionArgs) ToEC2ServiceTaskDefinitionOutput() EC2ServiceTaskDefinitionOutput {
	return i.ToEC2ServiceTaskDefinitionOutputWithContext(context.Background())
}

func (i EC2ServiceTaskDefinitionArgs) ToEC2ServiceTaskDefinitionOutputWithContext(ctx context.Context) EC2ServiceTaskDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EC2ServiceTaskDefinitionOutput)
}

func (i EC2ServiceTaskDefinitionArgs) ToEC2ServiceTaskDefinitionPtrOutput() EC2ServiceTaskDefinitionPtrOutput {
	return i.ToEC2ServiceTaskDefinitionPtrOutputWithContext(context.Background())
}

func (i EC2ServiceTaskDefinitionArgs) ToEC2ServiceTaskDefinitionPtrOutputWithContext(ctx context.Context) EC2ServiceTaskDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EC2ServiceTaskDefinitionOutput).ToEC2ServiceTaskDefinitionPtrOutputWithContext(ctx)
}

// EC2ServiceTaskDefinitionPtrInput is an input type that accepts EC2ServiceTaskDefinitionArgs, EC2ServiceTaskDefinitionPtr and EC2ServiceTaskDefinitionPtrOutput values.
// You can construct a concrete instance of `EC2ServiceTaskDefinitionPtrInput` via:
//
//	        EC2ServiceTaskDefinitionArgs{...}
//
//	or:
//
//	        nil
type EC2ServiceTaskDefinitionPtrInput interface {
	pulumi.Input

	ToEC2ServiceTaskDefinitionPtrOutput() EC2ServiceTaskDefinitionPtrOutput
	ToEC2ServiceTaskDefinitionPtrOutputWithContext(context.Context) EC2ServiceTaskDefinitionPtrOutput
}

type ec2serviceTaskDefinitionPtrType EC2ServiceTaskDefinitionArgs

func EC2ServiceTaskDefinitionPtr(v *EC2ServiceTaskDefinitionArgs) EC2ServiceTaskDefinitionPtrInput {
	return (*ec2serviceTaskDefinitionPtrType)(v)
}

func (*ec2serviceTaskDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EC2ServiceTaskDefinition)(nil)).Elem()
}

func (i *ec2serviceTaskDefinitionPtrType) ToEC2ServiceTaskDefinitionPtrOutput() EC2ServiceTaskDefinitionPtrOutput {
	return i.ToEC2ServiceTaskDefinitionPtrOutputWithContext(context.Background())
}

func (i *ec2serviceTaskDefinitionPtrType) ToEC2ServiceTaskDefinitionPtrOutputWithContext(ctx context.Context) EC2ServiceTaskDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EC2ServiceTaskDefinitionPtrOutput)
}

// Create a TaskDefinition resource with the given unique name, arguments, and options.
// Creates required log-group and task & execution roles.
// Presents required Service load balancers if target group included in port mappings.
type EC2ServiceTaskDefinitionOutput struct{ *pulumi.OutputState }

func (EC2ServiceTaskDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EC2ServiceTaskDefinition)(nil)).Elem()
}

func (o EC2ServiceTaskDefinitionOutput) ToEC2ServiceTaskDefinitionOutput() EC2ServiceTaskDefinitionOutput {
	return o
}

func (o EC2ServiceTaskDefinitionOutput) ToEC2ServiceTaskDefinitionOutputWithContext(ctx context.Context) EC2ServiceTaskDefinitionOutput {
	return o
}

func (o EC2ServiceTaskDefinitionOutput) ToEC2ServiceTaskDefinitionPtrOutput() EC2ServiceTaskDefinitionPtrOutput {
	return o.ToEC2ServiceTaskDefinitionPtrOutputWithContext(context.Background())
}

func (o EC2ServiceTaskDefinitionOutput) ToEC2ServiceTaskDefinitionPtrOutputWithContext(ctx context.Context) EC2ServiceTaskDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EC2ServiceTaskDefinition) *EC2ServiceTaskDefinition {
		return &v
	}).(EC2ServiceTaskDefinitionPtrOutput)
}

// Single container to make a TaskDefinition from.  Useful for simple cases where there aren't
// multiple containers, especially when creating a TaskDefinition to call [run] on.
//
// Either [container] or [containers] must be provided.
func (o EC2ServiceTaskDefinitionOutput) Container() TaskDefinitionContainerDefinitionPtrOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) *TaskDefinitionContainerDefinition { return v.Container }).(TaskDefinitionContainerDefinitionPtrOutput)
}

// All the containers to make a TaskDefinition from.  Useful when creating a Service that will
// contain many containers within.
//
// Either [container] or [containers] must be provided.
func (o EC2ServiceTaskDefinitionOutput) Containers() TaskDefinitionContainerDefinitionMapOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) map[string]TaskDefinitionContainerDefinition { return v.Containers }).(TaskDefinitionContainerDefinitionMapOutput)
}

// The number of cpu units used by the task. If not provided, a default will be computed based on the cumulative needs specified by [containerDefinitions]
func (o EC2ServiceTaskDefinitionOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) *string { return v.Cpu }).(pulumi.StringPtrOutput)
}

// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
func (o EC2ServiceTaskDefinitionOutput) EphemeralStorage() ecs.TaskDefinitionEphemeralStoragePtrOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) *ecs.TaskDefinitionEphemeralStorage { return v.EphemeralStorage }).(ecs.TaskDefinitionEphemeralStoragePtrOutput)
}

// The execution role that the Amazon ECS container agent and the Docker daemon can assume.
// Will be created automatically if not defined.
func (o EC2ServiceTaskDefinitionOutput) ExecutionRole() awsx.DefaultRoleWithPolicyPtrOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) *awsx.DefaultRoleWithPolicy { return v.ExecutionRole }).(awsx.DefaultRoleWithPolicyPtrOutput)
}

// An optional unique name for your task definition. If not specified, then a default will be created.
func (o EC2ServiceTaskDefinitionOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// Configuration block(s) with Inference Accelerators settings. Detailed below.
func (o EC2ServiceTaskDefinitionOutput) InferenceAccelerators() ecs.TaskDefinitionInferenceAcceleratorArrayOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) []ecs.TaskDefinitionInferenceAccelerator {
		return v.InferenceAccelerators
	}).(ecs.TaskDefinitionInferenceAcceleratorArrayOutput)
}

// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
func (o EC2ServiceTaskDefinitionOutput) IpcMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) *string { return v.IpcMode }).(pulumi.StringPtrOutput)
}

// A set of volume blocks that containers in your task may use.
func (o EC2ServiceTaskDefinitionOutput) LogGroup() awsx.DefaultLogGroupPtrOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) *awsx.DefaultLogGroup { return v.LogGroup }).(awsx.DefaultLogGroupPtrOutput)
}

// The amount (in MiB) of memory used by the task.  If not provided, a default will be computed
// based on the cumulative needs specified by [containerDefinitions]
func (o EC2ServiceTaskDefinitionOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

// Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
func (o EC2ServiceTaskDefinitionOutput) NetworkMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) *string { return v.NetworkMode }).(pulumi.StringPtrOutput)
}

// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
func (o EC2ServiceTaskDefinitionOutput) PidMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) *string { return v.PidMode }).(pulumi.StringPtrOutput)
}

// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`. Detailed below.
func (o EC2ServiceTaskDefinitionOutput) PlacementConstraints() ecs.TaskDefinitionPlacementConstraintArrayOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) []ecs.TaskDefinitionPlacementConstraint {
		return v.PlacementConstraints
	}).(ecs.TaskDefinitionPlacementConstraintArrayOutput)
}

// Configuration block for the App Mesh proxy. Detailed below.
func (o EC2ServiceTaskDefinitionOutput) ProxyConfiguration() ecs.TaskDefinitionProxyConfigurationPtrOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) *ecs.TaskDefinitionProxyConfiguration { return v.ProxyConfiguration }).(ecs.TaskDefinitionProxyConfigurationPtrOutput)
}

// Configuration block for runtime_platform that containers in your task may use.
func (o EC2ServiceTaskDefinitionOutput) RuntimePlatform() ecs.TaskDefinitionRuntimePlatformPtrOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) *ecs.TaskDefinitionRuntimePlatform { return v.RuntimePlatform }).(ecs.TaskDefinitionRuntimePlatformPtrOutput)
}

// Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is `false`.
func (o EC2ServiceTaskDefinitionOutput) SkipDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) *bool { return v.SkipDestroy }).(pulumi.BoolPtrOutput)
}

// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o EC2ServiceTaskDefinitionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// IAM role that allows your Amazon ECS container task to make calls to other AWS services.
// Will be created automatically if not defined.
func (o EC2ServiceTaskDefinitionOutput) TaskRole() awsx.DefaultRoleWithPolicyPtrOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) *awsx.DefaultRoleWithPolicy { return v.TaskRole }).(awsx.DefaultRoleWithPolicyPtrOutput)
}

// Whether should track latest task definition or the one created with the resource. Default is `false`.
func (o EC2ServiceTaskDefinitionOutput) TrackLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) *bool { return v.TrackLatest }).(pulumi.BoolPtrOutput)
}

// Configuration block for volumes that containers in your task may use. Detailed below.
func (o EC2ServiceTaskDefinitionOutput) Volumes() ecs.TaskDefinitionVolumeArrayOutput {
	return o.ApplyT(func(v EC2ServiceTaskDefinition) []ecs.TaskDefinitionVolume { return v.Volumes }).(ecs.TaskDefinitionVolumeArrayOutput)
}

type EC2ServiceTaskDefinitionPtrOutput struct{ *pulumi.OutputState }

func (EC2ServiceTaskDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EC2ServiceTaskDefinition)(nil)).Elem()
}

func (o EC2ServiceTaskDefinitionPtrOutput) ToEC2ServiceTaskDefinitionPtrOutput() EC2ServiceTaskDefinitionPtrOutput {
	return o
}

func (o EC2ServiceTaskDefinitionPtrOutput) ToEC2ServiceTaskDefinitionPtrOutputWithContext(ctx context.Context) EC2ServiceTaskDefinitionPtrOutput {
	return o
}

func (o EC2ServiceTaskDefinitionPtrOutput) Elem() EC2ServiceTaskDefinitionOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) EC2ServiceTaskDefinition {
		if v != nil {
			return *v
		}
		var ret EC2ServiceTaskDefinition
		return ret
	}).(EC2ServiceTaskDefinitionOutput)
}

// Single container to make a TaskDefinition from.  Useful for simple cases where there aren't
// multiple containers, especially when creating a TaskDefinition to call [run] on.
//
// Either [container] or [containers] must be provided.
func (o EC2ServiceTaskDefinitionPtrOutput) Container() TaskDefinitionContainerDefinitionPtrOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) *TaskDefinitionContainerDefinition {
		if v == nil {
			return nil
		}
		return v.Container
	}).(TaskDefinitionContainerDefinitionPtrOutput)
}

// All the containers to make a TaskDefinition from.  Useful when creating a Service that will
// contain many containers within.
//
// Either [container] or [containers] must be provided.
func (o EC2ServiceTaskDefinitionPtrOutput) Containers() TaskDefinitionContainerDefinitionMapOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) map[string]TaskDefinitionContainerDefinition {
		if v == nil {
			return nil
		}
		return v.Containers
	}).(TaskDefinitionContainerDefinitionMapOutput)
}

// The number of cpu units used by the task. If not provided, a default will be computed based on the cumulative needs specified by [containerDefinitions]
func (o EC2ServiceTaskDefinitionPtrOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.StringPtrOutput)
}

// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
func (o EC2ServiceTaskDefinitionPtrOutput) EphemeralStorage() ecs.TaskDefinitionEphemeralStoragePtrOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) *ecs.TaskDefinitionEphemeralStorage {
		if v == nil {
			return nil
		}
		return v.EphemeralStorage
	}).(ecs.TaskDefinitionEphemeralStoragePtrOutput)
}

// The execution role that the Amazon ECS container agent and the Docker daemon can assume.
// Will be created automatically if not defined.
func (o EC2ServiceTaskDefinitionPtrOutput) ExecutionRole() awsx.DefaultRoleWithPolicyPtrOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) *awsx.DefaultRoleWithPolicy {
		if v == nil {
			return nil
		}
		return v.ExecutionRole
	}).(awsx.DefaultRoleWithPolicyPtrOutput)
}

// An optional unique name for your task definition. If not specified, then a default will be created.
func (o EC2ServiceTaskDefinitionPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// Configuration block(s) with Inference Accelerators settings. Detailed below.
func (o EC2ServiceTaskDefinitionPtrOutput) InferenceAccelerators() ecs.TaskDefinitionInferenceAcceleratorArrayOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) []ecs.TaskDefinitionInferenceAccelerator {
		if v == nil {
			return nil
		}
		return v.InferenceAccelerators
	}).(ecs.TaskDefinitionInferenceAcceleratorArrayOutput)
}

// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
func (o EC2ServiceTaskDefinitionPtrOutput) IpcMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) *string {
		if v == nil {
			return nil
		}
		return v.IpcMode
	}).(pulumi.StringPtrOutput)
}

// A set of volume blocks that containers in your task may use.
func (o EC2ServiceTaskDefinitionPtrOutput) LogGroup() awsx.DefaultLogGroupPtrOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) *awsx.DefaultLogGroup {
		if v == nil {
			return nil
		}
		return v.LogGroup
	}).(awsx.DefaultLogGroupPtrOutput)
}

// The amount (in MiB) of memory used by the task.  If not provided, a default will be computed
// based on the cumulative needs specified by [containerDefinitions]
func (o EC2ServiceTaskDefinitionPtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

// Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
func (o EC2ServiceTaskDefinitionPtrOutput) NetworkMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) *string {
		if v == nil {
			return nil
		}
		return v.NetworkMode
	}).(pulumi.StringPtrOutput)
}

// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
func (o EC2ServiceTaskDefinitionPtrOutput) PidMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) *string {
		if v == nil {
			return nil
		}
		return v.PidMode
	}).(pulumi.StringPtrOutput)
}

// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`. Detailed below.
func (o EC2ServiceTaskDefinitionPtrOutput) PlacementConstraints() ecs.TaskDefinitionPlacementConstraintArrayOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) []ecs.TaskDefinitionPlacementConstraint {
		if v == nil {
			return nil
		}
		return v.PlacementConstraints
	}).(ecs.TaskDefinitionPlacementConstraintArrayOutput)
}

// Configuration block for the App Mesh proxy. Detailed below.
func (o EC2ServiceTaskDefinitionPtrOutput) ProxyConfiguration() ecs.TaskDefinitionProxyConfigurationPtrOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) *ecs.TaskDefinitionProxyConfiguration {
		if v == nil {
			return nil
		}
		return v.ProxyConfiguration
	}).(ecs.TaskDefinitionProxyConfigurationPtrOutput)
}

// Configuration block for runtime_platform that containers in your task may use.
func (o EC2ServiceTaskDefinitionPtrOutput) RuntimePlatform() ecs.TaskDefinitionRuntimePlatformPtrOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) *ecs.TaskDefinitionRuntimePlatform {
		if v == nil {
			return nil
		}
		return v.RuntimePlatform
	}).(ecs.TaskDefinitionRuntimePlatformPtrOutput)
}

// Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is `false`.
func (o EC2ServiceTaskDefinitionPtrOutput) SkipDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.SkipDestroy
	}).(pulumi.BoolPtrOutput)
}

// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o EC2ServiceTaskDefinitionPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// IAM role that allows your Amazon ECS container task to make calls to other AWS services.
// Will be created automatically if not defined.
func (o EC2ServiceTaskDefinitionPtrOutput) TaskRole() awsx.DefaultRoleWithPolicyPtrOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) *awsx.DefaultRoleWithPolicy {
		if v == nil {
			return nil
		}
		return v.TaskRole
	}).(awsx.DefaultRoleWithPolicyPtrOutput)
}

// Whether should track latest task definition or the one created with the resource. Default is `false`.
func (o EC2ServiceTaskDefinitionPtrOutput) TrackLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.TrackLatest
	}).(pulumi.BoolPtrOutput)
}

// Configuration block for volumes that containers in your task may use. Detailed below.
func (o EC2ServiceTaskDefinitionPtrOutput) Volumes() ecs.TaskDefinitionVolumeArrayOutput {
	return o.ApplyT(func(v *EC2ServiceTaskDefinition) []ecs.TaskDefinitionVolume {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(ecs.TaskDefinitionVolumeArrayOutput)
}

// Create a TaskDefinition resource with the given unique name, arguments, and options.
// Creates required log-group and task & execution roles.
// Presents required Service load balancers if target group included in port mappings.
type FargateServiceTaskDefinition struct {
	// Single container to make a TaskDefinition from.  Useful for simple cases where there aren't
	// multiple containers, especially when creating a TaskDefinition to call [run] on.
	//
	// Either [container] or [containers] must be provided.
	Container *TaskDefinitionContainerDefinition `pulumi:"container"`
	// All the containers to make a TaskDefinition from.  Useful when creating a Service that will
	// contain many containers within.
	//
	// Either [container] or [containers] must be provided.
	Containers map[string]TaskDefinitionContainerDefinition `pulumi:"containers"`
	// The number of cpu units used by the task. If not provided, a default will be computed based on the cumulative needs specified by [containerDefinitions]
	Cpu *string `pulumi:"cpu"`
	// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
	EphemeralStorage *ecs.TaskDefinitionEphemeralStorage `pulumi:"ephemeralStorage"`
	// The execution role that the Amazon ECS container agent and the Docker daemon can assume.
	// Will be created automatically if not defined.
	ExecutionRole *awsx.DefaultRoleWithPolicy `pulumi:"executionRole"`
	// An optional unique name for your task definition. If not specified, then a default will be created.
	Family *string `pulumi:"family"`
	// Configuration block(s) with Inference Accelerators settings. Detailed below.
	InferenceAccelerators []ecs.TaskDefinitionInferenceAccelerator `pulumi:"inferenceAccelerators"`
	// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
	IpcMode *string `pulumi:"ipcMode"`
	// A set of volume blocks that containers in your task may use.
	LogGroup *awsx.DefaultLogGroup `pulumi:"logGroup"`
	// The amount (in MiB) of memory used by the task.  If not provided, a default will be computed
	// based on the cumulative needs specified by [containerDefinitions]
	Memory *string `pulumi:"memory"`
	// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
	PidMode *string `pulumi:"pidMode"`
	// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`. Detailed below.
	PlacementConstraints []ecs.TaskDefinitionPlacementConstraint `pulumi:"placementConstraints"`
	// Configuration block for the App Mesh proxy. Detailed below.
	ProxyConfiguration *ecs.TaskDefinitionProxyConfiguration `pulumi:"proxyConfiguration"`
	// Configuration block for runtime_platform that containers in your task may use.
	RuntimePlatform *ecs.TaskDefinitionRuntimePlatform `pulumi:"runtimePlatform"`
	// Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is `false`.
	SkipDestroy *bool `pulumi:"skipDestroy"`
	// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
	// IAM role that allows your Amazon ECS container task to make calls to other AWS services.
	// Will be created automatically if not defined.
	TaskRole *awsx.DefaultRoleWithPolicy `pulumi:"taskRole"`
	// Whether should track latest task definition or the one created with the resource. Default is `false`.
	TrackLatest *bool `pulumi:"trackLatest"`
	// Configuration block for volumes that containers in your task may use. Detailed below.
	Volumes []ecs.TaskDefinitionVolume `pulumi:"volumes"`
}

// FargateServiceTaskDefinitionInput is an input type that accepts FargateServiceTaskDefinitionArgs and FargateServiceTaskDefinitionOutput values.
// You can construct a concrete instance of `FargateServiceTaskDefinitionInput` via:
//
//	FargateServiceTaskDefinitionArgs{...}
type FargateServiceTaskDefinitionInput interface {
	pulumi.Input

	ToFargateServiceTaskDefinitionOutput() FargateServiceTaskDefinitionOutput
	ToFargateServiceTaskDefinitionOutputWithContext(context.Context) FargateServiceTaskDefinitionOutput
}

// Create a TaskDefinition resource with the given unique name, arguments, and options.
// Creates required log-group and task & execution roles.
// Presents required Service load balancers if target group included in port mappings.
type FargateServiceTaskDefinitionArgs struct {
	// Single container to make a TaskDefinition from.  Useful for simple cases where there aren't
	// multiple containers, especially when creating a TaskDefinition to call [run] on.
	//
	// Either [container] or [containers] must be provided.
	Container *TaskDefinitionContainerDefinitionArgs `pulumi:"container"`
	// All the containers to make a TaskDefinition from.  Useful when creating a Service that will
	// contain many containers within.
	//
	// Either [container] or [containers] must be provided.
	Containers map[string]TaskDefinitionContainerDefinitionArgs `pulumi:"containers"`
	// The number of cpu units used by the task. If not provided, a default will be computed based on the cumulative needs specified by [containerDefinitions]
	Cpu pulumi.StringPtrInput `pulumi:"cpu"`
	// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
	EphemeralStorage ecs.TaskDefinitionEphemeralStoragePtrInput `pulumi:"ephemeralStorage"`
	// The execution role that the Amazon ECS container agent and the Docker daemon can assume.
	// Will be created automatically if not defined.
	ExecutionRole *awsx.DefaultRoleWithPolicyArgs `pulumi:"executionRole"`
	// An optional unique name for your task definition. If not specified, then a default will be created.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// Configuration block(s) with Inference Accelerators settings. Detailed below.
	InferenceAccelerators ecs.TaskDefinitionInferenceAcceleratorArrayInput `pulumi:"inferenceAccelerators"`
	// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
	IpcMode pulumi.StringPtrInput `pulumi:"ipcMode"`
	// A set of volume blocks that containers in your task may use.
	LogGroup *awsx.DefaultLogGroupArgs `pulumi:"logGroup"`
	// The amount (in MiB) of memory used by the task.  If not provided, a default will be computed
	// based on the cumulative needs specified by [containerDefinitions]
	Memory pulumi.StringPtrInput `pulumi:"memory"`
	// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
	PidMode pulumi.StringPtrInput `pulumi:"pidMode"`
	// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`. Detailed below.
	PlacementConstraints ecs.TaskDefinitionPlacementConstraintArrayInput `pulumi:"placementConstraints"`
	// Configuration block for the App Mesh proxy. Detailed below.
	ProxyConfiguration ecs.TaskDefinitionProxyConfigurationPtrInput `pulumi:"proxyConfiguration"`
	// Configuration block for runtime_platform that containers in your task may use.
	RuntimePlatform ecs.TaskDefinitionRuntimePlatformPtrInput `pulumi:"runtimePlatform"`
	// Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is `false`.
	SkipDestroy pulumi.BoolPtrInput `pulumi:"skipDestroy"`
	// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// IAM role that allows your Amazon ECS container task to make calls to other AWS services.
	// Will be created automatically if not defined.
	TaskRole *awsx.DefaultRoleWithPolicyArgs `pulumi:"taskRole"`
	// Whether should track latest task definition or the one created with the resource. Default is `false`.
	TrackLatest pulumi.BoolPtrInput `pulumi:"trackLatest"`
	// Configuration block for volumes that containers in your task may use. Detailed below.
	Volumes ecs.TaskDefinitionVolumeArrayInput `pulumi:"volumes"`
}

func (FargateServiceTaskDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateServiceTaskDefinition)(nil)).Elem()
}

func (i FargateServiceTaskDefinitionArgs) ToFargateServiceTaskDefinitionOutput() FargateServiceTaskDefinitionOutput {
	return i.ToFargateServiceTaskDefinitionOutputWithContext(context.Background())
}

func (i FargateServiceTaskDefinitionArgs) ToFargateServiceTaskDefinitionOutputWithContext(ctx context.Context) FargateServiceTaskDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateServiceTaskDefinitionOutput)
}

func (i FargateServiceTaskDefinitionArgs) ToFargateServiceTaskDefinitionPtrOutput() FargateServiceTaskDefinitionPtrOutput {
	return i.ToFargateServiceTaskDefinitionPtrOutputWithContext(context.Background())
}

func (i FargateServiceTaskDefinitionArgs) ToFargateServiceTaskDefinitionPtrOutputWithContext(ctx context.Context) FargateServiceTaskDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateServiceTaskDefinitionOutput).ToFargateServiceTaskDefinitionPtrOutputWithContext(ctx)
}

// FargateServiceTaskDefinitionPtrInput is an input type that accepts FargateServiceTaskDefinitionArgs, FargateServiceTaskDefinitionPtr and FargateServiceTaskDefinitionPtrOutput values.
// You can construct a concrete instance of `FargateServiceTaskDefinitionPtrInput` via:
//
//	        FargateServiceTaskDefinitionArgs{...}
//
//	or:
//
//	        nil
type FargateServiceTaskDefinitionPtrInput interface {
	pulumi.Input

	ToFargateServiceTaskDefinitionPtrOutput() FargateServiceTaskDefinitionPtrOutput
	ToFargateServiceTaskDefinitionPtrOutputWithContext(context.Context) FargateServiceTaskDefinitionPtrOutput
}

type fargateServiceTaskDefinitionPtrType FargateServiceTaskDefinitionArgs

func FargateServiceTaskDefinitionPtr(v *FargateServiceTaskDefinitionArgs) FargateServiceTaskDefinitionPtrInput {
	return (*fargateServiceTaskDefinitionPtrType)(v)
}

func (*fargateServiceTaskDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FargateServiceTaskDefinition)(nil)).Elem()
}

func (i *fargateServiceTaskDefinitionPtrType) ToFargateServiceTaskDefinitionPtrOutput() FargateServiceTaskDefinitionPtrOutput {
	return i.ToFargateServiceTaskDefinitionPtrOutputWithContext(context.Background())
}

func (i *fargateServiceTaskDefinitionPtrType) ToFargateServiceTaskDefinitionPtrOutputWithContext(ctx context.Context) FargateServiceTaskDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FargateServiceTaskDefinitionPtrOutput)
}

// Create a TaskDefinition resource with the given unique name, arguments, and options.
// Creates required log-group and task & execution roles.
// Presents required Service load balancers if target group included in port mappings.
type FargateServiceTaskDefinitionOutput struct{ *pulumi.OutputState }

func (FargateServiceTaskDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FargateServiceTaskDefinition)(nil)).Elem()
}

func (o FargateServiceTaskDefinitionOutput) ToFargateServiceTaskDefinitionOutput() FargateServiceTaskDefinitionOutput {
	return o
}

func (o FargateServiceTaskDefinitionOutput) ToFargateServiceTaskDefinitionOutputWithContext(ctx context.Context) FargateServiceTaskDefinitionOutput {
	return o
}

func (o FargateServiceTaskDefinitionOutput) ToFargateServiceTaskDefinitionPtrOutput() FargateServiceTaskDefinitionPtrOutput {
	return o.ToFargateServiceTaskDefinitionPtrOutputWithContext(context.Background())
}

func (o FargateServiceTaskDefinitionOutput) ToFargateServiceTaskDefinitionPtrOutputWithContext(ctx context.Context) FargateServiceTaskDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FargateServiceTaskDefinition) *FargateServiceTaskDefinition {
		return &v
	}).(FargateServiceTaskDefinitionPtrOutput)
}

// Single container to make a TaskDefinition from.  Useful for simple cases where there aren't
// multiple containers, especially when creating a TaskDefinition to call [run] on.
//
// Either [container] or [containers] must be provided.
func (o FargateServiceTaskDefinitionOutput) Container() TaskDefinitionContainerDefinitionPtrOutput {
	return o.ApplyT(func(v FargateServiceTaskDefinition) *TaskDefinitionContainerDefinition { return v.Container }).(TaskDefinitionContainerDefinitionPtrOutput)
}

// All the containers to make a TaskDefinition from.  Useful when creating a Service that will
// contain many containers within.
//
// Either [container] or [containers] must be provided.
func (o FargateServiceTaskDefinitionOutput) Containers() TaskDefinitionContainerDefinitionMapOutput {
	return o.ApplyT(func(v FargateServiceTaskDefinition) map[string]TaskDefinitionContainerDefinition { return v.Containers }).(TaskDefinitionContainerDefinitionMapOutput)
}

// The number of cpu units used by the task. If not provided, a default will be computed based on the cumulative needs specified by [containerDefinitions]
func (o FargateServiceTaskDefinitionOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FargateServiceTaskDefinition) *string { return v.Cpu }).(pulumi.StringPtrOutput)
}

// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
func (o FargateServiceTaskDefinitionOutput) EphemeralStorage() ecs.TaskDefinitionEphemeralStoragePtrOutput {
	return o.ApplyT(func(v FargateServiceTaskDefinition) *ecs.TaskDefinitionEphemeralStorage { return v.EphemeralStorage }).(ecs.TaskDefinitionEphemeralStoragePtrOutput)
}

// The execution role that the Amazon ECS container agent and the Docker daemon can assume.
// Will be created automatically if not defined.
func (o FargateServiceTaskDefinitionOutput) ExecutionRole() awsx.DefaultRoleWithPolicyPtrOutput {
	return o.ApplyT(func(v FargateServiceTaskDefinition) *awsx.DefaultRoleWithPolicy { return v.ExecutionRole }).(awsx.DefaultRoleWithPolicyPtrOutput)
}

// An optional unique name for your task definition. If not specified, then a default will be created.
func (o FargateServiceTaskDefinitionOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FargateServiceTaskDefinition) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// Configuration block(s) with Inference Accelerators settings. Detailed below.
func (o FargateServiceTaskDefinitionOutput) InferenceAccelerators() ecs.TaskDefinitionInferenceAcceleratorArrayOutput {
	return o.ApplyT(func(v FargateServiceTaskDefinition) []ecs.TaskDefinitionInferenceAccelerator {
		return v.InferenceAccelerators
	}).(ecs.TaskDefinitionInferenceAcceleratorArrayOutput)
}

// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
func (o FargateServiceTaskDefinitionOutput) IpcMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FargateServiceTaskDefinition) *string { return v.IpcMode }).(pulumi.StringPtrOutput)
}

// A set of volume blocks that containers in your task may use.
func (o FargateServiceTaskDefinitionOutput) LogGroup() awsx.DefaultLogGroupPtrOutput {
	return o.ApplyT(func(v FargateServiceTaskDefinition) *awsx.DefaultLogGroup { return v.LogGroup }).(awsx.DefaultLogGroupPtrOutput)
}

// The amount (in MiB) of memory used by the task.  If not provided, a default will be computed
// based on the cumulative needs specified by [containerDefinitions]
func (o FargateServiceTaskDefinitionOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FargateServiceTaskDefinition) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
func (o FargateServiceTaskDefinitionOutput) PidMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FargateServiceTaskDefinition) *string { return v.PidMode }).(pulumi.StringPtrOutput)
}

// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`. Detailed below.
func (o FargateServiceTaskDefinitionOutput) PlacementConstraints() ecs.TaskDefinitionPlacementConstraintArrayOutput {
	return o.ApplyT(func(v FargateServiceTaskDefinition) []ecs.TaskDefinitionPlacementConstraint {
		return v.PlacementConstraints
	}).(ecs.TaskDefinitionPlacementConstraintArrayOutput)
}

// Configuration block for the App Mesh proxy. Detailed below.
func (o FargateServiceTaskDefinitionOutput) ProxyConfiguration() ecs.TaskDefinitionProxyConfigurationPtrOutput {
	return o.ApplyT(func(v FargateServiceTaskDefinition) *ecs.TaskDefinitionProxyConfiguration {
		return v.ProxyConfiguration
	}).(ecs.TaskDefinitionProxyConfigurationPtrOutput)
}

// Configuration block for runtime_platform that containers in your task may use.
func (o FargateServiceTaskDefinitionOutput) RuntimePlatform() ecs.TaskDefinitionRuntimePlatformPtrOutput {
	return o.ApplyT(func(v FargateServiceTaskDefinition) *ecs.TaskDefinitionRuntimePlatform { return v.RuntimePlatform }).(ecs.TaskDefinitionRuntimePlatformPtrOutput)
}

// Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is `false`.
func (o FargateServiceTaskDefinitionOutput) SkipDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FargateServiceTaskDefinition) *bool { return v.SkipDestroy }).(pulumi.BoolPtrOutput)
}

// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o FargateServiceTaskDefinitionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FargateServiceTaskDefinition) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// IAM role that allows your Amazon ECS container task to make calls to other AWS services.
// Will be created automatically if not defined.
func (o FargateServiceTaskDefinitionOutput) TaskRole() awsx.DefaultRoleWithPolicyPtrOutput {
	return o.ApplyT(func(v FargateServiceTaskDefinition) *awsx.DefaultRoleWithPolicy { return v.TaskRole }).(awsx.DefaultRoleWithPolicyPtrOutput)
}

// Whether should track latest task definition or the one created with the resource. Default is `false`.
func (o FargateServiceTaskDefinitionOutput) TrackLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FargateServiceTaskDefinition) *bool { return v.TrackLatest }).(pulumi.BoolPtrOutput)
}

// Configuration block for volumes that containers in your task may use. Detailed below.
func (o FargateServiceTaskDefinitionOutput) Volumes() ecs.TaskDefinitionVolumeArrayOutput {
	return o.ApplyT(func(v FargateServiceTaskDefinition) []ecs.TaskDefinitionVolume { return v.Volumes }).(ecs.TaskDefinitionVolumeArrayOutput)
}

type FargateServiceTaskDefinitionPtrOutput struct{ *pulumi.OutputState }

func (FargateServiceTaskDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FargateServiceTaskDefinition)(nil)).Elem()
}

func (o FargateServiceTaskDefinitionPtrOutput) ToFargateServiceTaskDefinitionPtrOutput() FargateServiceTaskDefinitionPtrOutput {
	return o
}

func (o FargateServiceTaskDefinitionPtrOutput) ToFargateServiceTaskDefinitionPtrOutputWithContext(ctx context.Context) FargateServiceTaskDefinitionPtrOutput {
	return o
}

func (o FargateServiceTaskDefinitionPtrOutput) Elem() FargateServiceTaskDefinitionOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) FargateServiceTaskDefinition {
		if v != nil {
			return *v
		}
		var ret FargateServiceTaskDefinition
		return ret
	}).(FargateServiceTaskDefinitionOutput)
}

// Single container to make a TaskDefinition from.  Useful for simple cases where there aren't
// multiple containers, especially when creating a TaskDefinition to call [run] on.
//
// Either [container] or [containers] must be provided.
func (o FargateServiceTaskDefinitionPtrOutput) Container() TaskDefinitionContainerDefinitionPtrOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) *TaskDefinitionContainerDefinition {
		if v == nil {
			return nil
		}
		return v.Container
	}).(TaskDefinitionContainerDefinitionPtrOutput)
}

// All the containers to make a TaskDefinition from.  Useful when creating a Service that will
// contain many containers within.
//
// Either [container] or [containers] must be provided.
func (o FargateServiceTaskDefinitionPtrOutput) Containers() TaskDefinitionContainerDefinitionMapOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) map[string]TaskDefinitionContainerDefinition {
		if v == nil {
			return nil
		}
		return v.Containers
	}).(TaskDefinitionContainerDefinitionMapOutput)
}

// The number of cpu units used by the task. If not provided, a default will be computed based on the cumulative needs specified by [containerDefinitions]
func (o FargateServiceTaskDefinitionPtrOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.StringPtrOutput)
}

// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
func (o FargateServiceTaskDefinitionPtrOutput) EphemeralStorage() ecs.TaskDefinitionEphemeralStoragePtrOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) *ecs.TaskDefinitionEphemeralStorage {
		if v == nil {
			return nil
		}
		return v.EphemeralStorage
	}).(ecs.TaskDefinitionEphemeralStoragePtrOutput)
}

// The execution role that the Amazon ECS container agent and the Docker daemon can assume.
// Will be created automatically if not defined.
func (o FargateServiceTaskDefinitionPtrOutput) ExecutionRole() awsx.DefaultRoleWithPolicyPtrOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) *awsx.DefaultRoleWithPolicy {
		if v == nil {
			return nil
		}
		return v.ExecutionRole
	}).(awsx.DefaultRoleWithPolicyPtrOutput)
}

// An optional unique name for your task definition. If not specified, then a default will be created.
func (o FargateServiceTaskDefinitionPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// Configuration block(s) with Inference Accelerators settings. Detailed below.
func (o FargateServiceTaskDefinitionPtrOutput) InferenceAccelerators() ecs.TaskDefinitionInferenceAcceleratorArrayOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) []ecs.TaskDefinitionInferenceAccelerator {
		if v == nil {
			return nil
		}
		return v.InferenceAccelerators
	}).(ecs.TaskDefinitionInferenceAcceleratorArrayOutput)
}

// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
func (o FargateServiceTaskDefinitionPtrOutput) IpcMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) *string {
		if v == nil {
			return nil
		}
		return v.IpcMode
	}).(pulumi.StringPtrOutput)
}

// A set of volume blocks that containers in your task may use.
func (o FargateServiceTaskDefinitionPtrOutput) LogGroup() awsx.DefaultLogGroupPtrOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) *awsx.DefaultLogGroup {
		if v == nil {
			return nil
		}
		return v.LogGroup
	}).(awsx.DefaultLogGroupPtrOutput)
}

// The amount (in MiB) of memory used by the task.  If not provided, a default will be computed
// based on the cumulative needs specified by [containerDefinitions]
func (o FargateServiceTaskDefinitionPtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
func (o FargateServiceTaskDefinitionPtrOutput) PidMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) *string {
		if v == nil {
			return nil
		}
		return v.PidMode
	}).(pulumi.StringPtrOutput)
}

// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`. Detailed below.
func (o FargateServiceTaskDefinitionPtrOutput) PlacementConstraints() ecs.TaskDefinitionPlacementConstraintArrayOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) []ecs.TaskDefinitionPlacementConstraint {
		if v == nil {
			return nil
		}
		return v.PlacementConstraints
	}).(ecs.TaskDefinitionPlacementConstraintArrayOutput)
}

// Configuration block for the App Mesh proxy. Detailed below.
func (o FargateServiceTaskDefinitionPtrOutput) ProxyConfiguration() ecs.TaskDefinitionProxyConfigurationPtrOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) *ecs.TaskDefinitionProxyConfiguration {
		if v == nil {
			return nil
		}
		return v.ProxyConfiguration
	}).(ecs.TaskDefinitionProxyConfigurationPtrOutput)
}

// Configuration block for runtime_platform that containers in your task may use.
func (o FargateServiceTaskDefinitionPtrOutput) RuntimePlatform() ecs.TaskDefinitionRuntimePlatformPtrOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) *ecs.TaskDefinitionRuntimePlatform {
		if v == nil {
			return nil
		}
		return v.RuntimePlatform
	}).(ecs.TaskDefinitionRuntimePlatformPtrOutput)
}

// Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is `false`.
func (o FargateServiceTaskDefinitionPtrOutput) SkipDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.SkipDestroy
	}).(pulumi.BoolPtrOutput)
}

// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o FargateServiceTaskDefinitionPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// IAM role that allows your Amazon ECS container task to make calls to other AWS services.
// Will be created automatically if not defined.
func (o FargateServiceTaskDefinitionPtrOutput) TaskRole() awsx.DefaultRoleWithPolicyPtrOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) *awsx.DefaultRoleWithPolicy {
		if v == nil {
			return nil
		}
		return v.TaskRole
	}).(awsx.DefaultRoleWithPolicyPtrOutput)
}

// Whether should track latest task definition or the one created with the resource. Default is `false`.
func (o FargateServiceTaskDefinitionPtrOutput) TrackLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.TrackLatest
	}).(pulumi.BoolPtrOutput)
}

// Configuration block for volumes that containers in your task may use. Detailed below.
func (o FargateServiceTaskDefinitionPtrOutput) Volumes() ecs.TaskDefinitionVolumeArrayOutput {
	return o.ApplyT(func(v *FargateServiceTaskDefinition) []ecs.TaskDefinitionVolume {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(ecs.TaskDefinitionVolumeArrayOutput)
}

// List of container definitions that are passed to the Docker daemon on a container instance
type TaskDefinitionContainerDefinition struct {
	Command               []string                            `pulumi:"command"`
	Cpu                   *int                                `pulumi:"cpu"`
	DependsOn             []TaskDefinitionContainerDependency `pulumi:"dependsOn"`
	DisableNetworking     *bool                               `pulumi:"disableNetworking"`
	DnsSearchDomains      []string                            `pulumi:"dnsSearchDomains"`
	DnsServers            []string                            `pulumi:"dnsServers"`
	DockerLabels          interface{}                         `pulumi:"dockerLabels"`
	DockerSecurityOptions []string                            `pulumi:"dockerSecurityOptions"`
	EntryPoint            []string                            `pulumi:"entryPoint"`
	// The environment variables to pass to a container
	Environment []TaskDefinitionKeyValuePair `pulumi:"environment"`
	// The list of one or more files that contain the environment variables to pass to a container
	EnvironmentFiles      []TaskDefinitionEnvironmentFile      `pulumi:"environmentFiles"`
	Essential             *bool                                `pulumi:"essential"`
	ExtraHosts            []TaskDefinitionHostEntry            `pulumi:"extraHosts"`
	FirelensConfiguration *TaskDefinitionFirelensConfiguration `pulumi:"firelensConfiguration"`
	HealthCheck           *TaskDefinitionHealthCheck           `pulumi:"healthCheck"`
	Hostname              *string                              `pulumi:"hostname"`
	// The image used to start a container. This string is passed directly to the Docker daemon.
	Image            string                          `pulumi:"image"`
	Interactive      *bool                           `pulumi:"interactive"`
	Links            []string                        `pulumi:"links"`
	LinuxParameters  *TaskDefinitionLinuxParameters  `pulumi:"linuxParameters"`
	LogConfiguration *TaskDefinitionLogConfiguration `pulumi:"logConfiguration"`
	// The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed.
	Memory            *int                       `pulumi:"memory"`
	MemoryReservation *int                       `pulumi:"memoryReservation"`
	MountPoints       []TaskDefinitionMountPoint `pulumi:"mountPoints"`
	// The name of a container. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed
	Name string `pulumi:"name"`
	// Port mappings allow containers to access ports on the host container instance to send or receive traffic.
	PortMappings           []TaskDefinitionPortMapping          `pulumi:"portMappings"`
	Privileged             *bool                                `pulumi:"privileged"`
	PseudoTerminal         *bool                                `pulumi:"pseudoTerminal"`
	ReadonlyRootFilesystem *bool                                `pulumi:"readonlyRootFilesystem"`
	RepositoryCredentials  *TaskDefinitionRepositoryCredentials `pulumi:"repositoryCredentials"`
	ResourceRequirements   []TaskDefinitionResourceRequirement  `pulumi:"resourceRequirements"`
	Secrets                []TaskDefinitionSecret               `pulumi:"secrets"`
	StartTimeout           *int                                 `pulumi:"startTimeout"`
	StopTimeout            *int                                 `pulumi:"stopTimeout"`
	SystemControls         []TaskDefinitionSystemControl        `pulumi:"systemControls"`
	Ulimits                []TaskDefinitionUlimit               `pulumi:"ulimits"`
	User                   *string                              `pulumi:"user"`
	VolumesFrom            []TaskDefinitionVolumeFrom           `pulumi:"volumesFrom"`
	WorkingDirectory       *string                              `pulumi:"workingDirectory"`
}

// TaskDefinitionContainerDefinitionInput is an input type that accepts TaskDefinitionContainerDefinitionArgs and TaskDefinitionContainerDefinitionOutput values.
// You can construct a concrete instance of `TaskDefinitionContainerDefinitionInput` via:
//
//	TaskDefinitionContainerDefinitionArgs{...}
type TaskDefinitionContainerDefinitionInput interface {
	pulumi.Input

	ToTaskDefinitionContainerDefinitionOutput() TaskDefinitionContainerDefinitionOutput
	ToTaskDefinitionContainerDefinitionOutputWithContext(context.Context) TaskDefinitionContainerDefinitionOutput
}

// List of container definitions that are passed to the Docker daemon on a container instance
type TaskDefinitionContainerDefinitionArgs struct {
	Command               pulumi.StringArrayInput                     `pulumi:"command"`
	Cpu                   pulumi.IntPtrInput                          `pulumi:"cpu"`
	DependsOn             TaskDefinitionContainerDependencyArrayInput `pulumi:"dependsOn"`
	DisableNetworking     pulumi.BoolPtrInput                         `pulumi:"disableNetworking"`
	DnsSearchDomains      pulumi.StringArrayInput                     `pulumi:"dnsSearchDomains"`
	DnsServers            pulumi.StringArrayInput                     `pulumi:"dnsServers"`
	DockerLabels          pulumi.Input                                `pulumi:"dockerLabels"`
	DockerSecurityOptions pulumi.StringArrayInput                     `pulumi:"dockerSecurityOptions"`
	EntryPoint            pulumi.StringArrayInput                     `pulumi:"entryPoint"`
	// The environment variables to pass to a container
	Environment TaskDefinitionKeyValuePairArrayInput `pulumi:"environment"`
	// The list of one or more files that contain the environment variables to pass to a container
	EnvironmentFiles      TaskDefinitionEnvironmentFileArrayInput     `pulumi:"environmentFiles"`
	Essential             pulumi.BoolPtrInput                         `pulumi:"essential"`
	ExtraHosts            TaskDefinitionHostEntryArrayInput           `pulumi:"extraHosts"`
	FirelensConfiguration TaskDefinitionFirelensConfigurationPtrInput `pulumi:"firelensConfiguration"`
	HealthCheck           TaskDefinitionHealthCheckPtrInput           `pulumi:"healthCheck"`
	Hostname              pulumi.StringPtrInput                       `pulumi:"hostname"`
	// The image used to start a container. This string is passed directly to the Docker daemon.
	Image            pulumi.StringInput                     `pulumi:"image"`
	Interactive      pulumi.BoolPtrInput                    `pulumi:"interactive"`
	Links            pulumi.StringArrayInput                `pulumi:"links"`
	LinuxParameters  TaskDefinitionLinuxParametersPtrInput  `pulumi:"linuxParameters"`
	LogConfiguration TaskDefinitionLogConfigurationPtrInput `pulumi:"logConfiguration"`
	// The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed.
	Memory            pulumi.IntPtrInput                 `pulumi:"memory"`
	MemoryReservation pulumi.IntPtrInput                 `pulumi:"memoryReservation"`
	MountPoints       TaskDefinitionMountPointArrayInput `pulumi:"mountPoints"`
	// The name of a container. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed
	Name pulumi.StringInput `pulumi:"name"`
	// Port mappings allow containers to access ports on the host container instance to send or receive traffic.
	PortMappings           TaskDefinitionPortMappingArrayInput         `pulumi:"portMappings"`
	Privileged             pulumi.BoolPtrInput                         `pulumi:"privileged"`
	PseudoTerminal         pulumi.BoolPtrInput                         `pulumi:"pseudoTerminal"`
	ReadonlyRootFilesystem pulumi.BoolPtrInput                         `pulumi:"readonlyRootFilesystem"`
	RepositoryCredentials  TaskDefinitionRepositoryCredentialsPtrInput `pulumi:"repositoryCredentials"`
	ResourceRequirements   TaskDefinitionResourceRequirementArrayInput `pulumi:"resourceRequirements"`
	Secrets                TaskDefinitionSecretArrayInput              `pulumi:"secrets"`
	StartTimeout           pulumi.IntPtrInput                          `pulumi:"startTimeout"`
	StopTimeout            pulumi.IntPtrInput                          `pulumi:"stopTimeout"`
	SystemControls         TaskDefinitionSystemControlArrayInput       `pulumi:"systemControls"`
	Ulimits                TaskDefinitionUlimitArrayInput              `pulumi:"ulimits"`
	User                   pulumi.StringPtrInput                       `pulumi:"user"`
	VolumesFrom            TaskDefinitionVolumeFromArrayInput          `pulumi:"volumesFrom"`
	WorkingDirectory       pulumi.StringPtrInput                       `pulumi:"workingDirectory"`
}

func (TaskDefinitionContainerDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionContainerDefinition)(nil)).Elem()
}

func (i TaskDefinitionContainerDefinitionArgs) ToTaskDefinitionContainerDefinitionOutput() TaskDefinitionContainerDefinitionOutput {
	return i.ToTaskDefinitionContainerDefinitionOutputWithContext(context.Background())
}

func (i TaskDefinitionContainerDefinitionArgs) ToTaskDefinitionContainerDefinitionOutputWithContext(ctx context.Context) TaskDefinitionContainerDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionContainerDefinitionOutput)
}

func (i TaskDefinitionContainerDefinitionArgs) ToTaskDefinitionContainerDefinitionPtrOutput() TaskDefinitionContainerDefinitionPtrOutput {
	return i.ToTaskDefinitionContainerDefinitionPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionContainerDefinitionArgs) ToTaskDefinitionContainerDefinitionPtrOutputWithContext(ctx context.Context) TaskDefinitionContainerDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionContainerDefinitionOutput).ToTaskDefinitionContainerDefinitionPtrOutputWithContext(ctx)
}

// TaskDefinitionContainerDefinitionPtrInput is an input type that accepts TaskDefinitionContainerDefinitionArgs, TaskDefinitionContainerDefinitionPtr and TaskDefinitionContainerDefinitionPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionContainerDefinitionPtrInput` via:
//
//	        TaskDefinitionContainerDefinitionArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionContainerDefinitionPtrInput interface {
	pulumi.Input

	ToTaskDefinitionContainerDefinitionPtrOutput() TaskDefinitionContainerDefinitionPtrOutput
	ToTaskDefinitionContainerDefinitionPtrOutputWithContext(context.Context) TaskDefinitionContainerDefinitionPtrOutput
}

type taskDefinitionContainerDefinitionPtrType TaskDefinitionContainerDefinitionArgs

func TaskDefinitionContainerDefinitionPtr(v *TaskDefinitionContainerDefinitionArgs) TaskDefinitionContainerDefinitionPtrInput {
	return (*taskDefinitionContainerDefinitionPtrType)(v)
}

func (*taskDefinitionContainerDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionContainerDefinition)(nil)).Elem()
}

func (i *taskDefinitionContainerDefinitionPtrType) ToTaskDefinitionContainerDefinitionPtrOutput() TaskDefinitionContainerDefinitionPtrOutput {
	return i.ToTaskDefinitionContainerDefinitionPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionContainerDefinitionPtrType) ToTaskDefinitionContainerDefinitionPtrOutputWithContext(ctx context.Context) TaskDefinitionContainerDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionContainerDefinitionPtrOutput)
}

// TaskDefinitionContainerDefinitionMapInput is an input type that accepts TaskDefinitionContainerDefinitionMap and TaskDefinitionContainerDefinitionMapOutput values.
// You can construct a concrete instance of `TaskDefinitionContainerDefinitionMapInput` via:
//
//	TaskDefinitionContainerDefinitionMap{ "key": TaskDefinitionContainerDefinitionArgs{...} }
type TaskDefinitionContainerDefinitionMapInput interface {
	pulumi.Input

	ToTaskDefinitionContainerDefinitionMapOutput() TaskDefinitionContainerDefinitionMapOutput
	ToTaskDefinitionContainerDefinitionMapOutputWithContext(context.Context) TaskDefinitionContainerDefinitionMapOutput
}

type TaskDefinitionContainerDefinitionMap map[string]TaskDefinitionContainerDefinitionInput

func (TaskDefinitionContainerDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TaskDefinitionContainerDefinition)(nil)).Elem()
}

func (i TaskDefinitionContainerDefinitionMap) ToTaskDefinitionContainerDefinitionMapOutput() TaskDefinitionContainerDefinitionMapOutput {
	return i.ToTaskDefinitionContainerDefinitionMapOutputWithContext(context.Background())
}

func (i TaskDefinitionContainerDefinitionMap) ToTaskDefinitionContainerDefinitionMapOutputWithContext(ctx context.Context) TaskDefinitionContainerDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionContainerDefinitionMapOutput)
}

// List of container definitions that are passed to the Docker daemon on a container instance
type TaskDefinitionContainerDefinitionOutput struct{ *pulumi.OutputState }

func (TaskDefinitionContainerDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionContainerDefinition)(nil)).Elem()
}

func (o TaskDefinitionContainerDefinitionOutput) ToTaskDefinitionContainerDefinitionOutput() TaskDefinitionContainerDefinitionOutput {
	return o
}

func (o TaskDefinitionContainerDefinitionOutput) ToTaskDefinitionContainerDefinitionOutputWithContext(ctx context.Context) TaskDefinitionContainerDefinitionOutput {
	return o
}

func (o TaskDefinitionContainerDefinitionOutput) ToTaskDefinitionContainerDefinitionPtrOutput() TaskDefinitionContainerDefinitionPtrOutput {
	return o.ToTaskDefinitionContainerDefinitionPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionContainerDefinitionOutput) ToTaskDefinitionContainerDefinitionPtrOutputWithContext(ctx context.Context) TaskDefinitionContainerDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionContainerDefinition) *TaskDefinitionContainerDefinition {
		return &v
	}).(TaskDefinitionContainerDefinitionPtrOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.Command }).(pulumi.StringArrayOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *int { return v.Cpu }).(pulumi.IntPtrOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) DependsOn() TaskDefinitionContainerDependencyArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionContainerDependency { return v.DependsOn }).(TaskDefinitionContainerDependencyArrayOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) DisableNetworking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *bool { return v.DisableNetworking }).(pulumi.BoolPtrOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) DnsSearchDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.DnsSearchDomains }).(pulumi.StringArrayOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) DockerLabels() pulumi.AnyOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) interface{} { return v.DockerLabels }).(pulumi.AnyOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) DockerSecurityOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.DockerSecurityOptions }).(pulumi.StringArrayOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) EntryPoint() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.EntryPoint }).(pulumi.StringArrayOutput)
}

// The environment variables to pass to a container
func (o TaskDefinitionContainerDefinitionOutput) Environment() TaskDefinitionKeyValuePairArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionKeyValuePair { return v.Environment }).(TaskDefinitionKeyValuePairArrayOutput)
}

// The list of one or more files that contain the environment variables to pass to a container
func (o TaskDefinitionContainerDefinitionOutput) EnvironmentFiles() TaskDefinitionEnvironmentFileArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionEnvironmentFile { return v.EnvironmentFiles }).(TaskDefinitionEnvironmentFileArrayOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) Essential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *bool { return v.Essential }).(pulumi.BoolPtrOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) ExtraHosts() TaskDefinitionHostEntryArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionHostEntry { return v.ExtraHosts }).(TaskDefinitionHostEntryArrayOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) FirelensConfiguration() TaskDefinitionFirelensConfigurationPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *TaskDefinitionFirelensConfiguration {
		return v.FirelensConfiguration
	}).(TaskDefinitionFirelensConfigurationPtrOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) HealthCheck() TaskDefinitionHealthCheckPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *TaskDefinitionHealthCheck { return v.HealthCheck }).(TaskDefinitionHealthCheckPtrOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The image used to start a container. This string is passed directly to the Docker daemon.
func (o TaskDefinitionContainerDefinitionOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) string { return v.Image }).(pulumi.StringOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) Interactive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *bool { return v.Interactive }).(pulumi.BoolPtrOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) Links() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []string { return v.Links }).(pulumi.StringArrayOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) LinuxParameters() TaskDefinitionLinuxParametersPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *TaskDefinitionLinuxParameters { return v.LinuxParameters }).(TaskDefinitionLinuxParametersPtrOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) LogConfiguration() TaskDefinitionLogConfigurationPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *TaskDefinitionLogConfiguration { return v.LogConfiguration }).(TaskDefinitionLogConfigurationPtrOutput)
}

// The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed.
func (o TaskDefinitionContainerDefinitionOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) MemoryReservation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *int { return v.MemoryReservation }).(pulumi.IntPtrOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) MountPoints() TaskDefinitionMountPointArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionMountPoint { return v.MountPoints }).(TaskDefinitionMountPointArrayOutput)
}

// The name of a container. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed
func (o TaskDefinitionContainerDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) string { return v.Name }).(pulumi.StringOutput)
}

// Port mappings allow containers to access ports on the host container instance to send or receive traffic.
func (o TaskDefinitionContainerDefinitionOutput) PortMappings() TaskDefinitionPortMappingArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionPortMapping { return v.PortMappings }).(TaskDefinitionPortMappingArrayOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) PseudoTerminal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *bool { return v.PseudoTerminal }).(pulumi.BoolPtrOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) ReadonlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *bool { return v.ReadonlyRootFilesystem }).(pulumi.BoolPtrOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) RepositoryCredentials() TaskDefinitionRepositoryCredentialsPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *TaskDefinitionRepositoryCredentials {
		return v.RepositoryCredentials
	}).(TaskDefinitionRepositoryCredentialsPtrOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) ResourceRequirements() TaskDefinitionResourceRequirementArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionResourceRequirement {
		return v.ResourceRequirements
	}).(TaskDefinitionResourceRequirementArrayOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) Secrets() TaskDefinitionSecretArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionSecret { return v.Secrets }).(TaskDefinitionSecretArrayOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) StartTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *int { return v.StartTimeout }).(pulumi.IntPtrOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) StopTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *int { return v.StopTimeout }).(pulumi.IntPtrOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) SystemControls() TaskDefinitionSystemControlArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionSystemControl { return v.SystemControls }).(TaskDefinitionSystemControlArrayOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) Ulimits() TaskDefinitionUlimitArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionUlimit { return v.Ulimits }).(TaskDefinitionUlimitArrayOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *string { return v.User }).(pulumi.StringPtrOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) VolumesFrom() TaskDefinitionVolumeFromArrayOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) []TaskDefinitionVolumeFrom { return v.VolumesFrom }).(TaskDefinitionVolumeFromArrayOutput)
}

func (o TaskDefinitionContainerDefinitionOutput) WorkingDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDefinition) *string { return v.WorkingDirectory }).(pulumi.StringPtrOutput)
}

type TaskDefinitionContainerDefinitionPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionContainerDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionContainerDefinition)(nil)).Elem()
}

func (o TaskDefinitionContainerDefinitionPtrOutput) ToTaskDefinitionContainerDefinitionPtrOutput() TaskDefinitionContainerDefinitionPtrOutput {
	return o
}

func (o TaskDefinitionContainerDefinitionPtrOutput) ToTaskDefinitionContainerDefinitionPtrOutputWithContext(ctx context.Context) TaskDefinitionContainerDefinitionPtrOutput {
	return o
}

func (o TaskDefinitionContainerDefinitionPtrOutput) Elem() TaskDefinitionContainerDefinitionOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) TaskDefinitionContainerDefinition {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionContainerDefinition
		return ret
	}).(TaskDefinitionContainerDefinitionOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *int {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.IntPtrOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) DependsOn() TaskDefinitionContainerDependencyArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) []TaskDefinitionContainerDependency {
		if v == nil {
			return nil
		}
		return v.DependsOn
	}).(TaskDefinitionContainerDependencyArrayOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) DisableNetworking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.DisableNetworking
	}).(pulumi.BoolPtrOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) DnsSearchDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) []string {
		if v == nil {
			return nil
		}
		return v.DnsSearchDomains
	}).(pulumi.StringArrayOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) []string {
		if v == nil {
			return nil
		}
		return v.DnsServers
	}).(pulumi.StringArrayOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) DockerLabels() pulumi.AnyOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) interface{} {
		if v == nil {
			return nil
		}
		return v.DockerLabels
	}).(pulumi.AnyOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) DockerSecurityOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) []string {
		if v == nil {
			return nil
		}
		return v.DockerSecurityOptions
	}).(pulumi.StringArrayOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) EntryPoint() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) []string {
		if v == nil {
			return nil
		}
		return v.EntryPoint
	}).(pulumi.StringArrayOutput)
}

// The environment variables to pass to a container
func (o TaskDefinitionContainerDefinitionPtrOutput) Environment() TaskDefinitionKeyValuePairArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) []TaskDefinitionKeyValuePair {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(TaskDefinitionKeyValuePairArrayOutput)
}

// The list of one or more files that contain the environment variables to pass to a container
func (o TaskDefinitionContainerDefinitionPtrOutput) EnvironmentFiles() TaskDefinitionEnvironmentFileArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) []TaskDefinitionEnvironmentFile {
		if v == nil {
			return nil
		}
		return v.EnvironmentFiles
	}).(TaskDefinitionEnvironmentFileArrayOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) Essential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.Essential
	}).(pulumi.BoolPtrOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) ExtraHosts() TaskDefinitionHostEntryArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) []TaskDefinitionHostEntry {
		if v == nil {
			return nil
		}
		return v.ExtraHosts
	}).(TaskDefinitionHostEntryArrayOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) FirelensConfiguration() TaskDefinitionFirelensConfigurationPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *TaskDefinitionFirelensConfiguration {
		if v == nil {
			return nil
		}
		return v.FirelensConfiguration
	}).(TaskDefinitionFirelensConfigurationPtrOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) HealthCheck() TaskDefinitionHealthCheckPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *TaskDefinitionHealthCheck {
		if v == nil {
			return nil
		}
		return v.HealthCheck
	}).(TaskDefinitionHealthCheckPtrOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The image used to start a container. This string is passed directly to the Docker daemon.
func (o TaskDefinitionContainerDefinitionPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.Image
	}).(pulumi.StringPtrOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) Interactive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.Interactive
	}).(pulumi.BoolPtrOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) Links() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) []string {
		if v == nil {
			return nil
		}
		return v.Links
	}).(pulumi.StringArrayOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) LinuxParameters() TaskDefinitionLinuxParametersPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *TaskDefinitionLinuxParameters {
		if v == nil {
			return nil
		}
		return v.LinuxParameters
	}).(TaskDefinitionLinuxParametersPtrOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) LogConfiguration() TaskDefinitionLogConfigurationPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *TaskDefinitionLogConfiguration {
		if v == nil {
			return nil
		}
		return v.LogConfiguration
	}).(TaskDefinitionLogConfigurationPtrOutput)
}

// The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed.
func (o TaskDefinitionContainerDefinitionPtrOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *int {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.IntPtrOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) MemoryReservation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *int {
		if v == nil {
			return nil
		}
		return v.MemoryReservation
	}).(pulumi.IntPtrOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) MountPoints() TaskDefinitionMountPointArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) []TaskDefinitionMountPoint {
		if v == nil {
			return nil
		}
		return v.MountPoints
	}).(TaskDefinitionMountPointArrayOutput)
}

// The name of a container. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed
func (o TaskDefinitionContainerDefinitionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Port mappings allow containers to access ports on the host container instance to send or receive traffic.
func (o TaskDefinitionContainerDefinitionPtrOutput) PortMappings() TaskDefinitionPortMappingArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) []TaskDefinitionPortMapping {
		if v == nil {
			return nil
		}
		return v.PortMappings
	}).(TaskDefinitionPortMappingArrayOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.Privileged
	}).(pulumi.BoolPtrOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) PseudoTerminal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.PseudoTerminal
	}).(pulumi.BoolPtrOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) ReadonlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.ReadonlyRootFilesystem
	}).(pulumi.BoolPtrOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) RepositoryCredentials() TaskDefinitionRepositoryCredentialsPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *TaskDefinitionRepositoryCredentials {
		if v == nil {
			return nil
		}
		return v.RepositoryCredentials
	}).(TaskDefinitionRepositoryCredentialsPtrOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) ResourceRequirements() TaskDefinitionResourceRequirementArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) []TaskDefinitionResourceRequirement {
		if v == nil {
			return nil
		}
		return v.ResourceRequirements
	}).(TaskDefinitionResourceRequirementArrayOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) Secrets() TaskDefinitionSecretArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) []TaskDefinitionSecret {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(TaskDefinitionSecretArrayOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) StartTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *int {
		if v == nil {
			return nil
		}
		return v.StartTimeout
	}).(pulumi.IntPtrOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) StopTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *int {
		if v == nil {
			return nil
		}
		return v.StopTimeout
	}).(pulumi.IntPtrOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) SystemControls() TaskDefinitionSystemControlArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) []TaskDefinitionSystemControl {
		if v == nil {
			return nil
		}
		return v.SystemControls
	}).(TaskDefinitionSystemControlArrayOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) Ulimits() TaskDefinitionUlimitArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) []TaskDefinitionUlimit {
		if v == nil {
			return nil
		}
		return v.Ulimits
	}).(TaskDefinitionUlimitArrayOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) VolumesFrom() TaskDefinitionVolumeFromArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) []TaskDefinitionVolumeFrom {
		if v == nil {
			return nil
		}
		return v.VolumesFrom
	}).(TaskDefinitionVolumeFromArrayOutput)
}

func (o TaskDefinitionContainerDefinitionPtrOutput) WorkingDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionContainerDefinition) *string {
		if v == nil {
			return nil
		}
		return v.WorkingDirectory
	}).(pulumi.StringPtrOutput)
}

type TaskDefinitionContainerDefinitionMapOutput struct{ *pulumi.OutputState }

func (TaskDefinitionContainerDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TaskDefinitionContainerDefinition)(nil)).Elem()
}

func (o TaskDefinitionContainerDefinitionMapOutput) ToTaskDefinitionContainerDefinitionMapOutput() TaskDefinitionContainerDefinitionMapOutput {
	return o
}

func (o TaskDefinitionContainerDefinitionMapOutput) ToTaskDefinitionContainerDefinitionMapOutputWithContext(ctx context.Context) TaskDefinitionContainerDefinitionMapOutput {
	return o
}

func (o TaskDefinitionContainerDefinitionMapOutput) MapIndex(k pulumi.StringInput) TaskDefinitionContainerDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TaskDefinitionContainerDefinition {
		return vs[0].(map[string]TaskDefinitionContainerDefinition)[vs[1].(string)]
	}).(TaskDefinitionContainerDefinitionOutput)
}

type TaskDefinitionContainerDependency struct {
	Condition     *string `pulumi:"condition"`
	ContainerName *string `pulumi:"containerName"`
}

// TaskDefinitionContainerDependencyInput is an input type that accepts TaskDefinitionContainerDependencyArgs and TaskDefinitionContainerDependencyOutput values.
// You can construct a concrete instance of `TaskDefinitionContainerDependencyInput` via:
//
//	TaskDefinitionContainerDependencyArgs{...}
type TaskDefinitionContainerDependencyInput interface {
	pulumi.Input

	ToTaskDefinitionContainerDependencyOutput() TaskDefinitionContainerDependencyOutput
	ToTaskDefinitionContainerDependencyOutputWithContext(context.Context) TaskDefinitionContainerDependencyOutput
}

type TaskDefinitionContainerDependencyArgs struct {
	Condition     pulumi.StringPtrInput `pulumi:"condition"`
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
}

func (TaskDefinitionContainerDependencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionContainerDependency)(nil)).Elem()
}

func (i TaskDefinitionContainerDependencyArgs) ToTaskDefinitionContainerDependencyOutput() TaskDefinitionContainerDependencyOutput {
	return i.ToTaskDefinitionContainerDependencyOutputWithContext(context.Background())
}

func (i TaskDefinitionContainerDependencyArgs) ToTaskDefinitionContainerDependencyOutputWithContext(ctx context.Context) TaskDefinitionContainerDependencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionContainerDependencyOutput)
}

// TaskDefinitionContainerDependencyArrayInput is an input type that accepts TaskDefinitionContainerDependencyArray and TaskDefinitionContainerDependencyArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionContainerDependencyArrayInput` via:
//
//	TaskDefinitionContainerDependencyArray{ TaskDefinitionContainerDependencyArgs{...} }
type TaskDefinitionContainerDependencyArrayInput interface {
	pulumi.Input

	ToTaskDefinitionContainerDependencyArrayOutput() TaskDefinitionContainerDependencyArrayOutput
	ToTaskDefinitionContainerDependencyArrayOutputWithContext(context.Context) TaskDefinitionContainerDependencyArrayOutput
}

type TaskDefinitionContainerDependencyArray []TaskDefinitionContainerDependencyInput

func (TaskDefinitionContainerDependencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionContainerDependency)(nil)).Elem()
}

func (i TaskDefinitionContainerDependencyArray) ToTaskDefinitionContainerDependencyArrayOutput() TaskDefinitionContainerDependencyArrayOutput {
	return i.ToTaskDefinitionContainerDependencyArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionContainerDependencyArray) ToTaskDefinitionContainerDependencyArrayOutputWithContext(ctx context.Context) TaskDefinitionContainerDependencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionContainerDependencyArrayOutput)
}

type TaskDefinitionContainerDependencyOutput struct{ *pulumi.OutputState }

func (TaskDefinitionContainerDependencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionContainerDependency)(nil)).Elem()
}

func (o TaskDefinitionContainerDependencyOutput) ToTaskDefinitionContainerDependencyOutput() TaskDefinitionContainerDependencyOutput {
	return o
}

func (o TaskDefinitionContainerDependencyOutput) ToTaskDefinitionContainerDependencyOutputWithContext(ctx context.Context) TaskDefinitionContainerDependencyOutput {
	return o
}

func (o TaskDefinitionContainerDependencyOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDependency) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

func (o TaskDefinitionContainerDependencyOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionContainerDependency) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

type TaskDefinitionContainerDependencyArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionContainerDependencyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionContainerDependency)(nil)).Elem()
}

func (o TaskDefinitionContainerDependencyArrayOutput) ToTaskDefinitionContainerDependencyArrayOutput() TaskDefinitionContainerDependencyArrayOutput {
	return o
}

func (o TaskDefinitionContainerDependencyArrayOutput) ToTaskDefinitionContainerDependencyArrayOutputWithContext(ctx context.Context) TaskDefinitionContainerDependencyArrayOutput {
	return o
}

func (o TaskDefinitionContainerDependencyArrayOutput) Index(i pulumi.IntInput) TaskDefinitionContainerDependencyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionContainerDependency {
		return vs[0].([]TaskDefinitionContainerDependency)[vs[1].(int)]
	}).(TaskDefinitionContainerDependencyOutput)
}

type TaskDefinitionDevice struct {
	ContainerPath *string  `pulumi:"containerPath"`
	HostPath      *string  `pulumi:"hostPath"`
	Permissions   []string `pulumi:"permissions"`
}

// TaskDefinitionDeviceInput is an input type that accepts TaskDefinitionDeviceArgs and TaskDefinitionDeviceOutput values.
// You can construct a concrete instance of `TaskDefinitionDeviceInput` via:
//
//	TaskDefinitionDeviceArgs{...}
type TaskDefinitionDeviceInput interface {
	pulumi.Input

	ToTaskDefinitionDeviceOutput() TaskDefinitionDeviceOutput
	ToTaskDefinitionDeviceOutputWithContext(context.Context) TaskDefinitionDeviceOutput
}

type TaskDefinitionDeviceArgs struct {
	ContainerPath pulumi.StringPtrInput   `pulumi:"containerPath"`
	HostPath      pulumi.StringPtrInput   `pulumi:"hostPath"`
	Permissions   pulumi.StringArrayInput `pulumi:"permissions"`
}

func (TaskDefinitionDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionDevice)(nil)).Elem()
}

func (i TaskDefinitionDeviceArgs) ToTaskDefinitionDeviceOutput() TaskDefinitionDeviceOutput {
	return i.ToTaskDefinitionDeviceOutputWithContext(context.Background())
}

func (i TaskDefinitionDeviceArgs) ToTaskDefinitionDeviceOutputWithContext(ctx context.Context) TaskDefinitionDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionDeviceOutput)
}

// TaskDefinitionDeviceArrayInput is an input type that accepts TaskDefinitionDeviceArray and TaskDefinitionDeviceArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionDeviceArrayInput` via:
//
//	TaskDefinitionDeviceArray{ TaskDefinitionDeviceArgs{...} }
type TaskDefinitionDeviceArrayInput interface {
	pulumi.Input

	ToTaskDefinitionDeviceArrayOutput() TaskDefinitionDeviceArrayOutput
	ToTaskDefinitionDeviceArrayOutputWithContext(context.Context) TaskDefinitionDeviceArrayOutput
}

type TaskDefinitionDeviceArray []TaskDefinitionDeviceInput

func (TaskDefinitionDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionDevice)(nil)).Elem()
}

func (i TaskDefinitionDeviceArray) ToTaskDefinitionDeviceArrayOutput() TaskDefinitionDeviceArrayOutput {
	return i.ToTaskDefinitionDeviceArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionDeviceArray) ToTaskDefinitionDeviceArrayOutputWithContext(ctx context.Context) TaskDefinitionDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionDeviceArrayOutput)
}

type TaskDefinitionDeviceOutput struct{ *pulumi.OutputState }

func (TaskDefinitionDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionDevice)(nil)).Elem()
}

func (o TaskDefinitionDeviceOutput) ToTaskDefinitionDeviceOutput() TaskDefinitionDeviceOutput {
	return o
}

func (o TaskDefinitionDeviceOutput) ToTaskDefinitionDeviceOutputWithContext(ctx context.Context) TaskDefinitionDeviceOutput {
	return o
}

func (o TaskDefinitionDeviceOutput) ContainerPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionDevice) *string { return v.ContainerPath }).(pulumi.StringPtrOutput)
}

func (o TaskDefinitionDeviceOutput) HostPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionDevice) *string { return v.HostPath }).(pulumi.StringPtrOutput)
}

func (o TaskDefinitionDeviceOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionDevice) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type TaskDefinitionDeviceArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionDevice)(nil)).Elem()
}

func (o TaskDefinitionDeviceArrayOutput) ToTaskDefinitionDeviceArrayOutput() TaskDefinitionDeviceArrayOutput {
	return o
}

func (o TaskDefinitionDeviceArrayOutput) ToTaskDefinitionDeviceArrayOutputWithContext(ctx context.Context) TaskDefinitionDeviceArrayOutput {
	return o
}

func (o TaskDefinitionDeviceArrayOutput) Index(i pulumi.IntInput) TaskDefinitionDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionDevice {
		return vs[0].([]TaskDefinitionDevice)[vs[1].(int)]
	}).(TaskDefinitionDeviceOutput)
}

type TaskDefinitionEnvironmentFile struct {
	Type  *string `pulumi:"type"`
	Value *string `pulumi:"value"`
}

// TaskDefinitionEnvironmentFileInput is an input type that accepts TaskDefinitionEnvironmentFileArgs and TaskDefinitionEnvironmentFileOutput values.
// You can construct a concrete instance of `TaskDefinitionEnvironmentFileInput` via:
//
//	TaskDefinitionEnvironmentFileArgs{...}
type TaskDefinitionEnvironmentFileInput interface {
	pulumi.Input

	ToTaskDefinitionEnvironmentFileOutput() TaskDefinitionEnvironmentFileOutput
	ToTaskDefinitionEnvironmentFileOutputWithContext(context.Context) TaskDefinitionEnvironmentFileOutput
}

type TaskDefinitionEnvironmentFileArgs struct {
	Type  pulumi.StringPtrInput `pulumi:"type"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TaskDefinitionEnvironmentFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionEnvironmentFile)(nil)).Elem()
}

func (i TaskDefinitionEnvironmentFileArgs) ToTaskDefinitionEnvironmentFileOutput() TaskDefinitionEnvironmentFileOutput {
	return i.ToTaskDefinitionEnvironmentFileOutputWithContext(context.Background())
}

func (i TaskDefinitionEnvironmentFileArgs) ToTaskDefinitionEnvironmentFileOutputWithContext(ctx context.Context) TaskDefinitionEnvironmentFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEnvironmentFileOutput)
}

// TaskDefinitionEnvironmentFileArrayInput is an input type that accepts TaskDefinitionEnvironmentFileArray and TaskDefinitionEnvironmentFileArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionEnvironmentFileArrayInput` via:
//
//	TaskDefinitionEnvironmentFileArray{ TaskDefinitionEnvironmentFileArgs{...} }
type TaskDefinitionEnvironmentFileArrayInput interface {
	pulumi.Input

	ToTaskDefinitionEnvironmentFileArrayOutput() TaskDefinitionEnvironmentFileArrayOutput
	ToTaskDefinitionEnvironmentFileArrayOutputWithContext(context.Context) TaskDefinitionEnvironmentFileArrayOutput
}

type TaskDefinitionEnvironmentFileArray []TaskDefinitionEnvironmentFileInput

func (TaskDefinitionEnvironmentFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionEnvironmentFile)(nil)).Elem()
}

func (i TaskDefinitionEnvironmentFileArray) ToTaskDefinitionEnvironmentFileArrayOutput() TaskDefinitionEnvironmentFileArrayOutput {
	return i.ToTaskDefinitionEnvironmentFileArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionEnvironmentFileArray) ToTaskDefinitionEnvironmentFileArrayOutputWithContext(ctx context.Context) TaskDefinitionEnvironmentFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionEnvironmentFileArrayOutput)
}

type TaskDefinitionEnvironmentFileOutput struct{ *pulumi.OutputState }

func (TaskDefinitionEnvironmentFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionEnvironmentFile)(nil)).Elem()
}

func (o TaskDefinitionEnvironmentFileOutput) ToTaskDefinitionEnvironmentFileOutput() TaskDefinitionEnvironmentFileOutput {
	return o
}

func (o TaskDefinitionEnvironmentFileOutput) ToTaskDefinitionEnvironmentFileOutputWithContext(ctx context.Context) TaskDefinitionEnvironmentFileOutput {
	return o
}

func (o TaskDefinitionEnvironmentFileOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionEnvironmentFile) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o TaskDefinitionEnvironmentFileOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionEnvironmentFile) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TaskDefinitionEnvironmentFileArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionEnvironmentFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionEnvironmentFile)(nil)).Elem()
}

func (o TaskDefinitionEnvironmentFileArrayOutput) ToTaskDefinitionEnvironmentFileArrayOutput() TaskDefinitionEnvironmentFileArrayOutput {
	return o
}

func (o TaskDefinitionEnvironmentFileArrayOutput) ToTaskDefinitionEnvironmentFileArrayOutputWithContext(ctx context.Context) TaskDefinitionEnvironmentFileArrayOutput {
	return o
}

func (o TaskDefinitionEnvironmentFileArrayOutput) Index(i pulumi.IntInput) TaskDefinitionEnvironmentFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionEnvironmentFile {
		return vs[0].([]TaskDefinitionEnvironmentFile)[vs[1].(int)]
	}).(TaskDefinitionEnvironmentFileOutput)
}

type TaskDefinitionFirelensConfiguration struct {
	Options interface{} `pulumi:"options"`
	Type    *string     `pulumi:"type"`
}

// TaskDefinitionFirelensConfigurationInput is an input type that accepts TaskDefinitionFirelensConfigurationArgs and TaskDefinitionFirelensConfigurationOutput values.
// You can construct a concrete instance of `TaskDefinitionFirelensConfigurationInput` via:
//
//	TaskDefinitionFirelensConfigurationArgs{...}
type TaskDefinitionFirelensConfigurationInput interface {
	pulumi.Input

	ToTaskDefinitionFirelensConfigurationOutput() TaskDefinitionFirelensConfigurationOutput
	ToTaskDefinitionFirelensConfigurationOutputWithContext(context.Context) TaskDefinitionFirelensConfigurationOutput
}

type TaskDefinitionFirelensConfigurationArgs struct {
	Options pulumi.Input          `pulumi:"options"`
	Type    pulumi.StringPtrInput `pulumi:"type"`
}

func (TaskDefinitionFirelensConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionFirelensConfiguration)(nil)).Elem()
}

func (i TaskDefinitionFirelensConfigurationArgs) ToTaskDefinitionFirelensConfigurationOutput() TaskDefinitionFirelensConfigurationOutput {
	return i.ToTaskDefinitionFirelensConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionFirelensConfigurationArgs) ToTaskDefinitionFirelensConfigurationOutputWithContext(ctx context.Context) TaskDefinitionFirelensConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionFirelensConfigurationOutput)
}

func (i TaskDefinitionFirelensConfigurationArgs) ToTaskDefinitionFirelensConfigurationPtrOutput() TaskDefinitionFirelensConfigurationPtrOutput {
	return i.ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionFirelensConfigurationArgs) ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionFirelensConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionFirelensConfigurationOutput).ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(ctx)
}

// TaskDefinitionFirelensConfigurationPtrInput is an input type that accepts TaskDefinitionFirelensConfigurationArgs, TaskDefinitionFirelensConfigurationPtr and TaskDefinitionFirelensConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionFirelensConfigurationPtrInput` via:
//
//	        TaskDefinitionFirelensConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionFirelensConfigurationPtrInput interface {
	pulumi.Input

	ToTaskDefinitionFirelensConfigurationPtrOutput() TaskDefinitionFirelensConfigurationPtrOutput
	ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(context.Context) TaskDefinitionFirelensConfigurationPtrOutput
}

type taskDefinitionFirelensConfigurationPtrType TaskDefinitionFirelensConfigurationArgs

func TaskDefinitionFirelensConfigurationPtr(v *TaskDefinitionFirelensConfigurationArgs) TaskDefinitionFirelensConfigurationPtrInput {
	return (*taskDefinitionFirelensConfigurationPtrType)(v)
}

func (*taskDefinitionFirelensConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionFirelensConfiguration)(nil)).Elem()
}

func (i *taskDefinitionFirelensConfigurationPtrType) ToTaskDefinitionFirelensConfigurationPtrOutput() TaskDefinitionFirelensConfigurationPtrOutput {
	return i.ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionFirelensConfigurationPtrType) ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionFirelensConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionFirelensConfigurationPtrOutput)
}

type TaskDefinitionFirelensConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionFirelensConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionFirelensConfiguration)(nil)).Elem()
}

func (o TaskDefinitionFirelensConfigurationOutput) ToTaskDefinitionFirelensConfigurationOutput() TaskDefinitionFirelensConfigurationOutput {
	return o
}

func (o TaskDefinitionFirelensConfigurationOutput) ToTaskDefinitionFirelensConfigurationOutputWithContext(ctx context.Context) TaskDefinitionFirelensConfigurationOutput {
	return o
}

func (o TaskDefinitionFirelensConfigurationOutput) ToTaskDefinitionFirelensConfigurationPtrOutput() TaskDefinitionFirelensConfigurationPtrOutput {
	return o.ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionFirelensConfigurationOutput) ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionFirelensConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionFirelensConfiguration) *TaskDefinitionFirelensConfiguration {
		return &v
	}).(TaskDefinitionFirelensConfigurationPtrOutput)
}

func (o TaskDefinitionFirelensConfigurationOutput) Options() pulumi.AnyOutput {
	return o.ApplyT(func(v TaskDefinitionFirelensConfiguration) interface{} { return v.Options }).(pulumi.AnyOutput)
}

func (o TaskDefinitionFirelensConfigurationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionFirelensConfiguration) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type TaskDefinitionFirelensConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionFirelensConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionFirelensConfiguration)(nil)).Elem()
}

func (o TaskDefinitionFirelensConfigurationPtrOutput) ToTaskDefinitionFirelensConfigurationPtrOutput() TaskDefinitionFirelensConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionFirelensConfigurationPtrOutput) ToTaskDefinitionFirelensConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionFirelensConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionFirelensConfigurationPtrOutput) Elem() TaskDefinitionFirelensConfigurationOutput {
	return o.ApplyT(func(v *TaskDefinitionFirelensConfiguration) TaskDefinitionFirelensConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionFirelensConfiguration
		return ret
	}).(TaskDefinitionFirelensConfigurationOutput)
}

func (o TaskDefinitionFirelensConfigurationPtrOutput) Options() pulumi.AnyOutput {
	return o.ApplyT(func(v *TaskDefinitionFirelensConfiguration) interface{} {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.AnyOutput)
}

func (o TaskDefinitionFirelensConfigurationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionFirelensConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The health check command and associated configuration parameters for the container.
type TaskDefinitionHealthCheck struct {
	// A string array representing the command that the container runs to determine if it is healthy.
	Command []string `pulumi:"command"`
	// The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.
	Interval *int `pulumi:"interval"`
	// The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is three retries.
	Retries *int `pulumi:"retries"`
	// The optional grace period within which to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You may specify between 0 and 300 seconds. The startPeriod is disabled by default.
	StartPeriod *int `pulumi:"startPeriod"`
	// The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5 seconds.
	Timeout *int `pulumi:"timeout"`
}

// TaskDefinitionHealthCheckInput is an input type that accepts TaskDefinitionHealthCheckArgs and TaskDefinitionHealthCheckOutput values.
// You can construct a concrete instance of `TaskDefinitionHealthCheckInput` via:
//
//	TaskDefinitionHealthCheckArgs{...}
type TaskDefinitionHealthCheckInput interface {
	pulumi.Input

	ToTaskDefinitionHealthCheckOutput() TaskDefinitionHealthCheckOutput
	ToTaskDefinitionHealthCheckOutputWithContext(context.Context) TaskDefinitionHealthCheckOutput
}

// The health check command and associated configuration parameters for the container.
type TaskDefinitionHealthCheckArgs struct {
	// A string array representing the command that the container runs to determine if it is healthy.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is three retries.
	Retries pulumi.IntPtrInput `pulumi:"retries"`
	// The optional grace period within which to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You may specify between 0 and 300 seconds. The startPeriod is disabled by default.
	StartPeriod pulumi.IntPtrInput `pulumi:"startPeriod"`
	// The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5 seconds.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
}

func (TaskDefinitionHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionHealthCheck)(nil)).Elem()
}

func (i TaskDefinitionHealthCheckArgs) ToTaskDefinitionHealthCheckOutput() TaskDefinitionHealthCheckOutput {
	return i.ToTaskDefinitionHealthCheckOutputWithContext(context.Background())
}

func (i TaskDefinitionHealthCheckArgs) ToTaskDefinitionHealthCheckOutputWithContext(ctx context.Context) TaskDefinitionHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHealthCheckOutput)
}

func (i TaskDefinitionHealthCheckArgs) ToTaskDefinitionHealthCheckPtrOutput() TaskDefinitionHealthCheckPtrOutput {
	return i.ToTaskDefinitionHealthCheckPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionHealthCheckArgs) ToTaskDefinitionHealthCheckPtrOutputWithContext(ctx context.Context) TaskDefinitionHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHealthCheckOutput).ToTaskDefinitionHealthCheckPtrOutputWithContext(ctx)
}

// TaskDefinitionHealthCheckPtrInput is an input type that accepts TaskDefinitionHealthCheckArgs, TaskDefinitionHealthCheckPtr and TaskDefinitionHealthCheckPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionHealthCheckPtrInput` via:
//
//	        TaskDefinitionHealthCheckArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionHealthCheckPtrInput interface {
	pulumi.Input

	ToTaskDefinitionHealthCheckPtrOutput() TaskDefinitionHealthCheckPtrOutput
	ToTaskDefinitionHealthCheckPtrOutputWithContext(context.Context) TaskDefinitionHealthCheckPtrOutput
}

type taskDefinitionHealthCheckPtrType TaskDefinitionHealthCheckArgs

func TaskDefinitionHealthCheckPtr(v *TaskDefinitionHealthCheckArgs) TaskDefinitionHealthCheckPtrInput {
	return (*taskDefinitionHealthCheckPtrType)(v)
}

func (*taskDefinitionHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionHealthCheck)(nil)).Elem()
}

func (i *taskDefinitionHealthCheckPtrType) ToTaskDefinitionHealthCheckPtrOutput() TaskDefinitionHealthCheckPtrOutput {
	return i.ToTaskDefinitionHealthCheckPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionHealthCheckPtrType) ToTaskDefinitionHealthCheckPtrOutputWithContext(ctx context.Context) TaskDefinitionHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHealthCheckPtrOutput)
}

// The health check command and associated configuration parameters for the container.
type TaskDefinitionHealthCheckOutput struct{ *pulumi.OutputState }

func (TaskDefinitionHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionHealthCheck)(nil)).Elem()
}

func (o TaskDefinitionHealthCheckOutput) ToTaskDefinitionHealthCheckOutput() TaskDefinitionHealthCheckOutput {
	return o
}

func (o TaskDefinitionHealthCheckOutput) ToTaskDefinitionHealthCheckOutputWithContext(ctx context.Context) TaskDefinitionHealthCheckOutput {
	return o
}

func (o TaskDefinitionHealthCheckOutput) ToTaskDefinitionHealthCheckPtrOutput() TaskDefinitionHealthCheckPtrOutput {
	return o.ToTaskDefinitionHealthCheckPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionHealthCheckOutput) ToTaskDefinitionHealthCheckPtrOutputWithContext(ctx context.Context) TaskDefinitionHealthCheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionHealthCheck) *TaskDefinitionHealthCheck {
		return &v
	}).(TaskDefinitionHealthCheckPtrOutput)
}

// A string array representing the command that the container runs to determine if it is healthy.
func (o TaskDefinitionHealthCheckOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionHealthCheck) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.
func (o TaskDefinitionHealthCheckOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHealthCheck) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is three retries.
func (o TaskDefinitionHealthCheckOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHealthCheck) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

// The optional grace period within which to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You may specify between 0 and 300 seconds. The startPeriod is disabled by default.
func (o TaskDefinitionHealthCheckOutput) StartPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHealthCheck) *int { return v.StartPeriod }).(pulumi.IntPtrOutput)
}

// The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5 seconds.
func (o TaskDefinitionHealthCheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHealthCheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type TaskDefinitionHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionHealthCheck)(nil)).Elem()
}

func (o TaskDefinitionHealthCheckPtrOutput) ToTaskDefinitionHealthCheckPtrOutput() TaskDefinitionHealthCheckPtrOutput {
	return o
}

func (o TaskDefinitionHealthCheckPtrOutput) ToTaskDefinitionHealthCheckPtrOutputWithContext(ctx context.Context) TaskDefinitionHealthCheckPtrOutput {
	return o
}

func (o TaskDefinitionHealthCheckPtrOutput) Elem() TaskDefinitionHealthCheckOutput {
	return o.ApplyT(func(v *TaskDefinitionHealthCheck) TaskDefinitionHealthCheck {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionHealthCheck
		return ret
	}).(TaskDefinitionHealthCheckOutput)
}

// A string array representing the command that the container runs to determine if it is healthy.
func (o TaskDefinitionHealthCheckPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionHealthCheck) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.
func (o TaskDefinitionHealthCheckPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is three retries.
func (o TaskDefinitionHealthCheckPtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

// The optional grace period within which to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You may specify between 0 and 300 seconds. The startPeriod is disabled by default.
func (o TaskDefinitionHealthCheckPtrOutput) StartPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.StartPeriod
	}).(pulumi.IntPtrOutput)
}

// The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5 seconds.
func (o TaskDefinitionHealthCheckPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

type TaskDefinitionHostEntry struct {
	Hostname  *string `pulumi:"hostname"`
	IpAddress *string `pulumi:"ipAddress"`
}

// TaskDefinitionHostEntryInput is an input type that accepts TaskDefinitionHostEntryArgs and TaskDefinitionHostEntryOutput values.
// You can construct a concrete instance of `TaskDefinitionHostEntryInput` via:
//
//	TaskDefinitionHostEntryArgs{...}
type TaskDefinitionHostEntryInput interface {
	pulumi.Input

	ToTaskDefinitionHostEntryOutput() TaskDefinitionHostEntryOutput
	ToTaskDefinitionHostEntryOutputWithContext(context.Context) TaskDefinitionHostEntryOutput
}

type TaskDefinitionHostEntryArgs struct {
	Hostname  pulumi.StringPtrInput `pulumi:"hostname"`
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
}

func (TaskDefinitionHostEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionHostEntry)(nil)).Elem()
}

func (i TaskDefinitionHostEntryArgs) ToTaskDefinitionHostEntryOutput() TaskDefinitionHostEntryOutput {
	return i.ToTaskDefinitionHostEntryOutputWithContext(context.Background())
}

func (i TaskDefinitionHostEntryArgs) ToTaskDefinitionHostEntryOutputWithContext(ctx context.Context) TaskDefinitionHostEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHostEntryOutput)
}

// TaskDefinitionHostEntryArrayInput is an input type that accepts TaskDefinitionHostEntryArray and TaskDefinitionHostEntryArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionHostEntryArrayInput` via:
//
//	TaskDefinitionHostEntryArray{ TaskDefinitionHostEntryArgs{...} }
type TaskDefinitionHostEntryArrayInput interface {
	pulumi.Input

	ToTaskDefinitionHostEntryArrayOutput() TaskDefinitionHostEntryArrayOutput
	ToTaskDefinitionHostEntryArrayOutputWithContext(context.Context) TaskDefinitionHostEntryArrayOutput
}

type TaskDefinitionHostEntryArray []TaskDefinitionHostEntryInput

func (TaskDefinitionHostEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionHostEntry)(nil)).Elem()
}

func (i TaskDefinitionHostEntryArray) ToTaskDefinitionHostEntryArrayOutput() TaskDefinitionHostEntryArrayOutput {
	return i.ToTaskDefinitionHostEntryArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionHostEntryArray) ToTaskDefinitionHostEntryArrayOutputWithContext(ctx context.Context) TaskDefinitionHostEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionHostEntryArrayOutput)
}

type TaskDefinitionHostEntryOutput struct{ *pulumi.OutputState }

func (TaskDefinitionHostEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionHostEntry)(nil)).Elem()
}

func (o TaskDefinitionHostEntryOutput) ToTaskDefinitionHostEntryOutput() TaskDefinitionHostEntryOutput {
	return o
}

func (o TaskDefinitionHostEntryOutput) ToTaskDefinitionHostEntryOutputWithContext(ctx context.Context) TaskDefinitionHostEntryOutput {
	return o
}

func (o TaskDefinitionHostEntryOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHostEntry) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

func (o TaskDefinitionHostEntryOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionHostEntry) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

type TaskDefinitionHostEntryArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionHostEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionHostEntry)(nil)).Elem()
}

func (o TaskDefinitionHostEntryArrayOutput) ToTaskDefinitionHostEntryArrayOutput() TaskDefinitionHostEntryArrayOutput {
	return o
}

func (o TaskDefinitionHostEntryArrayOutput) ToTaskDefinitionHostEntryArrayOutputWithContext(ctx context.Context) TaskDefinitionHostEntryArrayOutput {
	return o
}

func (o TaskDefinitionHostEntryArrayOutput) Index(i pulumi.IntInput) TaskDefinitionHostEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionHostEntry {
		return vs[0].([]TaskDefinitionHostEntry)[vs[1].(int)]
	}).(TaskDefinitionHostEntryOutput)
}

type TaskDefinitionKernelCapabilities struct {
	Add  []string `pulumi:"add"`
	Drop []string `pulumi:"drop"`
}

// TaskDefinitionKernelCapabilitiesInput is an input type that accepts TaskDefinitionKernelCapabilitiesArgs and TaskDefinitionKernelCapabilitiesOutput values.
// You can construct a concrete instance of `TaskDefinitionKernelCapabilitiesInput` via:
//
//	TaskDefinitionKernelCapabilitiesArgs{...}
type TaskDefinitionKernelCapabilitiesInput interface {
	pulumi.Input

	ToTaskDefinitionKernelCapabilitiesOutput() TaskDefinitionKernelCapabilitiesOutput
	ToTaskDefinitionKernelCapabilitiesOutputWithContext(context.Context) TaskDefinitionKernelCapabilitiesOutput
}

type TaskDefinitionKernelCapabilitiesArgs struct {
	Add  pulumi.StringArrayInput `pulumi:"add"`
	Drop pulumi.StringArrayInput `pulumi:"drop"`
}

func (TaskDefinitionKernelCapabilitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionKernelCapabilities)(nil)).Elem()
}

func (i TaskDefinitionKernelCapabilitiesArgs) ToTaskDefinitionKernelCapabilitiesOutput() TaskDefinitionKernelCapabilitiesOutput {
	return i.ToTaskDefinitionKernelCapabilitiesOutputWithContext(context.Background())
}

func (i TaskDefinitionKernelCapabilitiesArgs) ToTaskDefinitionKernelCapabilitiesOutputWithContext(ctx context.Context) TaskDefinitionKernelCapabilitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionKernelCapabilitiesOutput)
}

func (i TaskDefinitionKernelCapabilitiesArgs) ToTaskDefinitionKernelCapabilitiesPtrOutput() TaskDefinitionKernelCapabilitiesPtrOutput {
	return i.ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionKernelCapabilitiesArgs) ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(ctx context.Context) TaskDefinitionKernelCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionKernelCapabilitiesOutput).ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(ctx)
}

// TaskDefinitionKernelCapabilitiesPtrInput is an input type that accepts TaskDefinitionKernelCapabilitiesArgs, TaskDefinitionKernelCapabilitiesPtr and TaskDefinitionKernelCapabilitiesPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionKernelCapabilitiesPtrInput` via:
//
//	        TaskDefinitionKernelCapabilitiesArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionKernelCapabilitiesPtrInput interface {
	pulumi.Input

	ToTaskDefinitionKernelCapabilitiesPtrOutput() TaskDefinitionKernelCapabilitiesPtrOutput
	ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(context.Context) TaskDefinitionKernelCapabilitiesPtrOutput
}

type taskDefinitionKernelCapabilitiesPtrType TaskDefinitionKernelCapabilitiesArgs

func TaskDefinitionKernelCapabilitiesPtr(v *TaskDefinitionKernelCapabilitiesArgs) TaskDefinitionKernelCapabilitiesPtrInput {
	return (*taskDefinitionKernelCapabilitiesPtrType)(v)
}

func (*taskDefinitionKernelCapabilitiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionKernelCapabilities)(nil)).Elem()
}

func (i *taskDefinitionKernelCapabilitiesPtrType) ToTaskDefinitionKernelCapabilitiesPtrOutput() TaskDefinitionKernelCapabilitiesPtrOutput {
	return i.ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionKernelCapabilitiesPtrType) ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(ctx context.Context) TaskDefinitionKernelCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionKernelCapabilitiesPtrOutput)
}

type TaskDefinitionKernelCapabilitiesOutput struct{ *pulumi.OutputState }

func (TaskDefinitionKernelCapabilitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionKernelCapabilities)(nil)).Elem()
}

func (o TaskDefinitionKernelCapabilitiesOutput) ToTaskDefinitionKernelCapabilitiesOutput() TaskDefinitionKernelCapabilitiesOutput {
	return o
}

func (o TaskDefinitionKernelCapabilitiesOutput) ToTaskDefinitionKernelCapabilitiesOutputWithContext(ctx context.Context) TaskDefinitionKernelCapabilitiesOutput {
	return o
}

func (o TaskDefinitionKernelCapabilitiesOutput) ToTaskDefinitionKernelCapabilitiesPtrOutput() TaskDefinitionKernelCapabilitiesPtrOutput {
	return o.ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionKernelCapabilitiesOutput) ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(ctx context.Context) TaskDefinitionKernelCapabilitiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionKernelCapabilities) *TaskDefinitionKernelCapabilities {
		return &v
	}).(TaskDefinitionKernelCapabilitiesPtrOutput)
}

func (o TaskDefinitionKernelCapabilitiesOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionKernelCapabilities) []string { return v.Add }).(pulumi.StringArrayOutput)
}

func (o TaskDefinitionKernelCapabilitiesOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionKernelCapabilities) []string { return v.Drop }).(pulumi.StringArrayOutput)
}

type TaskDefinitionKernelCapabilitiesPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionKernelCapabilitiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionKernelCapabilities)(nil)).Elem()
}

func (o TaskDefinitionKernelCapabilitiesPtrOutput) ToTaskDefinitionKernelCapabilitiesPtrOutput() TaskDefinitionKernelCapabilitiesPtrOutput {
	return o
}

func (o TaskDefinitionKernelCapabilitiesPtrOutput) ToTaskDefinitionKernelCapabilitiesPtrOutputWithContext(ctx context.Context) TaskDefinitionKernelCapabilitiesPtrOutput {
	return o
}

func (o TaskDefinitionKernelCapabilitiesPtrOutput) Elem() TaskDefinitionKernelCapabilitiesOutput {
	return o.ApplyT(func(v *TaskDefinitionKernelCapabilities) TaskDefinitionKernelCapabilities {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionKernelCapabilities
		return ret
	}).(TaskDefinitionKernelCapabilitiesOutput)
}

func (o TaskDefinitionKernelCapabilitiesPtrOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionKernelCapabilities) []string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringArrayOutput)
}

func (o TaskDefinitionKernelCapabilitiesPtrOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionKernelCapabilities) []string {
		if v == nil {
			return nil
		}
		return v.Drop
	}).(pulumi.StringArrayOutput)
}

type TaskDefinitionKeyValuePair struct {
	Name  *string `pulumi:"name"`
	Value *string `pulumi:"value"`
}

// TaskDefinitionKeyValuePairInput is an input type that accepts TaskDefinitionKeyValuePairArgs and TaskDefinitionKeyValuePairOutput values.
// You can construct a concrete instance of `TaskDefinitionKeyValuePairInput` via:
//
//	TaskDefinitionKeyValuePairArgs{...}
type TaskDefinitionKeyValuePairInput interface {
	pulumi.Input

	ToTaskDefinitionKeyValuePairOutput() TaskDefinitionKeyValuePairOutput
	ToTaskDefinitionKeyValuePairOutputWithContext(context.Context) TaskDefinitionKeyValuePairOutput
}

type TaskDefinitionKeyValuePairArgs struct {
	Name  pulumi.StringPtrInput `pulumi:"name"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TaskDefinitionKeyValuePairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionKeyValuePair)(nil)).Elem()
}

func (i TaskDefinitionKeyValuePairArgs) ToTaskDefinitionKeyValuePairOutput() TaskDefinitionKeyValuePairOutput {
	return i.ToTaskDefinitionKeyValuePairOutputWithContext(context.Background())
}

func (i TaskDefinitionKeyValuePairArgs) ToTaskDefinitionKeyValuePairOutputWithContext(ctx context.Context) TaskDefinitionKeyValuePairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionKeyValuePairOutput)
}

// TaskDefinitionKeyValuePairArrayInput is an input type that accepts TaskDefinitionKeyValuePairArray and TaskDefinitionKeyValuePairArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionKeyValuePairArrayInput` via:
//
//	TaskDefinitionKeyValuePairArray{ TaskDefinitionKeyValuePairArgs{...} }
type TaskDefinitionKeyValuePairArrayInput interface {
	pulumi.Input

	ToTaskDefinitionKeyValuePairArrayOutput() TaskDefinitionKeyValuePairArrayOutput
	ToTaskDefinitionKeyValuePairArrayOutputWithContext(context.Context) TaskDefinitionKeyValuePairArrayOutput
}

type TaskDefinitionKeyValuePairArray []TaskDefinitionKeyValuePairInput

func (TaskDefinitionKeyValuePairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionKeyValuePair)(nil)).Elem()
}

func (i TaskDefinitionKeyValuePairArray) ToTaskDefinitionKeyValuePairArrayOutput() TaskDefinitionKeyValuePairArrayOutput {
	return i.ToTaskDefinitionKeyValuePairArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionKeyValuePairArray) ToTaskDefinitionKeyValuePairArrayOutputWithContext(ctx context.Context) TaskDefinitionKeyValuePairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionKeyValuePairArrayOutput)
}

type TaskDefinitionKeyValuePairOutput struct{ *pulumi.OutputState }

func (TaskDefinitionKeyValuePairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionKeyValuePair)(nil)).Elem()
}

func (o TaskDefinitionKeyValuePairOutput) ToTaskDefinitionKeyValuePairOutput() TaskDefinitionKeyValuePairOutput {
	return o
}

func (o TaskDefinitionKeyValuePairOutput) ToTaskDefinitionKeyValuePairOutputWithContext(ctx context.Context) TaskDefinitionKeyValuePairOutput {
	return o
}

func (o TaskDefinitionKeyValuePairOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionKeyValuePair) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o TaskDefinitionKeyValuePairOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionKeyValuePair) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TaskDefinitionKeyValuePairArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionKeyValuePairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionKeyValuePair)(nil)).Elem()
}

func (o TaskDefinitionKeyValuePairArrayOutput) ToTaskDefinitionKeyValuePairArrayOutput() TaskDefinitionKeyValuePairArrayOutput {
	return o
}

func (o TaskDefinitionKeyValuePairArrayOutput) ToTaskDefinitionKeyValuePairArrayOutputWithContext(ctx context.Context) TaskDefinitionKeyValuePairArrayOutput {
	return o
}

func (o TaskDefinitionKeyValuePairArrayOutput) Index(i pulumi.IntInput) TaskDefinitionKeyValuePairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionKeyValuePair {
		return vs[0].([]TaskDefinitionKeyValuePair)[vs[1].(int)]
	}).(TaskDefinitionKeyValuePairOutput)
}

type TaskDefinitionLinuxParameters struct {
	Capabilities       *TaskDefinitionKernelCapabilities `pulumi:"capabilities"`
	Devices            []TaskDefinitionDevice            `pulumi:"devices"`
	InitProcessEnabled *bool                             `pulumi:"initProcessEnabled"`
	MaxSwap            *int                              `pulumi:"maxSwap"`
	SharedMemorySize   *int                              `pulumi:"sharedMemorySize"`
	Swappiness         *int                              `pulumi:"swappiness"`
	Tmpfs              []TaskDefinitionTmpfs             `pulumi:"tmpfs"`
}

// TaskDefinitionLinuxParametersInput is an input type that accepts TaskDefinitionLinuxParametersArgs and TaskDefinitionLinuxParametersOutput values.
// You can construct a concrete instance of `TaskDefinitionLinuxParametersInput` via:
//
//	TaskDefinitionLinuxParametersArgs{...}
type TaskDefinitionLinuxParametersInput interface {
	pulumi.Input

	ToTaskDefinitionLinuxParametersOutput() TaskDefinitionLinuxParametersOutput
	ToTaskDefinitionLinuxParametersOutputWithContext(context.Context) TaskDefinitionLinuxParametersOutput
}

type TaskDefinitionLinuxParametersArgs struct {
	Capabilities       TaskDefinitionKernelCapabilitiesPtrInput `pulumi:"capabilities"`
	Devices            TaskDefinitionDeviceArrayInput           `pulumi:"devices"`
	InitProcessEnabled pulumi.BoolPtrInput                      `pulumi:"initProcessEnabled"`
	MaxSwap            pulumi.IntPtrInput                       `pulumi:"maxSwap"`
	SharedMemorySize   pulumi.IntPtrInput                       `pulumi:"sharedMemorySize"`
	Swappiness         pulumi.IntPtrInput                       `pulumi:"swappiness"`
	Tmpfs              TaskDefinitionTmpfsArrayInput            `pulumi:"tmpfs"`
}

func (TaskDefinitionLinuxParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionLinuxParameters)(nil)).Elem()
}

func (i TaskDefinitionLinuxParametersArgs) ToTaskDefinitionLinuxParametersOutput() TaskDefinitionLinuxParametersOutput {
	return i.ToTaskDefinitionLinuxParametersOutputWithContext(context.Background())
}

func (i TaskDefinitionLinuxParametersArgs) ToTaskDefinitionLinuxParametersOutputWithContext(ctx context.Context) TaskDefinitionLinuxParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionLinuxParametersOutput)
}

func (i TaskDefinitionLinuxParametersArgs) ToTaskDefinitionLinuxParametersPtrOutput() TaskDefinitionLinuxParametersPtrOutput {
	return i.ToTaskDefinitionLinuxParametersPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionLinuxParametersArgs) ToTaskDefinitionLinuxParametersPtrOutputWithContext(ctx context.Context) TaskDefinitionLinuxParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionLinuxParametersOutput).ToTaskDefinitionLinuxParametersPtrOutputWithContext(ctx)
}

// TaskDefinitionLinuxParametersPtrInput is an input type that accepts TaskDefinitionLinuxParametersArgs, TaskDefinitionLinuxParametersPtr and TaskDefinitionLinuxParametersPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionLinuxParametersPtrInput` via:
//
//	        TaskDefinitionLinuxParametersArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionLinuxParametersPtrInput interface {
	pulumi.Input

	ToTaskDefinitionLinuxParametersPtrOutput() TaskDefinitionLinuxParametersPtrOutput
	ToTaskDefinitionLinuxParametersPtrOutputWithContext(context.Context) TaskDefinitionLinuxParametersPtrOutput
}

type taskDefinitionLinuxParametersPtrType TaskDefinitionLinuxParametersArgs

func TaskDefinitionLinuxParametersPtr(v *TaskDefinitionLinuxParametersArgs) TaskDefinitionLinuxParametersPtrInput {
	return (*taskDefinitionLinuxParametersPtrType)(v)
}

func (*taskDefinitionLinuxParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionLinuxParameters)(nil)).Elem()
}

func (i *taskDefinitionLinuxParametersPtrType) ToTaskDefinitionLinuxParametersPtrOutput() TaskDefinitionLinuxParametersPtrOutput {
	return i.ToTaskDefinitionLinuxParametersPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionLinuxParametersPtrType) ToTaskDefinitionLinuxParametersPtrOutputWithContext(ctx context.Context) TaskDefinitionLinuxParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionLinuxParametersPtrOutput)
}

type TaskDefinitionLinuxParametersOutput struct{ *pulumi.OutputState }

func (TaskDefinitionLinuxParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionLinuxParameters)(nil)).Elem()
}

func (o TaskDefinitionLinuxParametersOutput) ToTaskDefinitionLinuxParametersOutput() TaskDefinitionLinuxParametersOutput {
	return o
}

func (o TaskDefinitionLinuxParametersOutput) ToTaskDefinitionLinuxParametersOutputWithContext(ctx context.Context) TaskDefinitionLinuxParametersOutput {
	return o
}

func (o TaskDefinitionLinuxParametersOutput) ToTaskDefinitionLinuxParametersPtrOutput() TaskDefinitionLinuxParametersPtrOutput {
	return o.ToTaskDefinitionLinuxParametersPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionLinuxParametersOutput) ToTaskDefinitionLinuxParametersPtrOutputWithContext(ctx context.Context) TaskDefinitionLinuxParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionLinuxParameters) *TaskDefinitionLinuxParameters {
		return &v
	}).(TaskDefinitionLinuxParametersPtrOutput)
}

func (o TaskDefinitionLinuxParametersOutput) Capabilities() TaskDefinitionKernelCapabilitiesPtrOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) *TaskDefinitionKernelCapabilities { return v.Capabilities }).(TaskDefinitionKernelCapabilitiesPtrOutput)
}

func (o TaskDefinitionLinuxParametersOutput) Devices() TaskDefinitionDeviceArrayOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) []TaskDefinitionDevice { return v.Devices }).(TaskDefinitionDeviceArrayOutput)
}

func (o TaskDefinitionLinuxParametersOutput) InitProcessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) *bool { return v.InitProcessEnabled }).(pulumi.BoolPtrOutput)
}

func (o TaskDefinitionLinuxParametersOutput) MaxSwap() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) *int { return v.MaxSwap }).(pulumi.IntPtrOutput)
}

func (o TaskDefinitionLinuxParametersOutput) SharedMemorySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) *int { return v.SharedMemorySize }).(pulumi.IntPtrOutput)
}

func (o TaskDefinitionLinuxParametersOutput) Swappiness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) *int { return v.Swappiness }).(pulumi.IntPtrOutput)
}

func (o TaskDefinitionLinuxParametersOutput) Tmpfs() TaskDefinitionTmpfsArrayOutput {
	return o.ApplyT(func(v TaskDefinitionLinuxParameters) []TaskDefinitionTmpfs { return v.Tmpfs }).(TaskDefinitionTmpfsArrayOutput)
}

type TaskDefinitionLinuxParametersPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionLinuxParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionLinuxParameters)(nil)).Elem()
}

func (o TaskDefinitionLinuxParametersPtrOutput) ToTaskDefinitionLinuxParametersPtrOutput() TaskDefinitionLinuxParametersPtrOutput {
	return o
}

func (o TaskDefinitionLinuxParametersPtrOutput) ToTaskDefinitionLinuxParametersPtrOutputWithContext(ctx context.Context) TaskDefinitionLinuxParametersPtrOutput {
	return o
}

func (o TaskDefinitionLinuxParametersPtrOutput) Elem() TaskDefinitionLinuxParametersOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) TaskDefinitionLinuxParameters {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionLinuxParameters
		return ret
	}).(TaskDefinitionLinuxParametersOutput)
}

func (o TaskDefinitionLinuxParametersPtrOutput) Capabilities() TaskDefinitionKernelCapabilitiesPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) *TaskDefinitionKernelCapabilities {
		if v == nil {
			return nil
		}
		return v.Capabilities
	}).(TaskDefinitionKernelCapabilitiesPtrOutput)
}

func (o TaskDefinitionLinuxParametersPtrOutput) Devices() TaskDefinitionDeviceArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) []TaskDefinitionDevice {
		if v == nil {
			return nil
		}
		return v.Devices
	}).(TaskDefinitionDeviceArrayOutput)
}

func (o TaskDefinitionLinuxParametersPtrOutput) InitProcessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) *bool {
		if v == nil {
			return nil
		}
		return v.InitProcessEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o TaskDefinitionLinuxParametersPtrOutput) MaxSwap() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaxSwap
	}).(pulumi.IntPtrOutput)
}

func (o TaskDefinitionLinuxParametersPtrOutput) SharedMemorySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) *int {
		if v == nil {
			return nil
		}
		return v.SharedMemorySize
	}).(pulumi.IntPtrOutput)
}

func (o TaskDefinitionLinuxParametersPtrOutput) Swappiness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) *int {
		if v == nil {
			return nil
		}
		return v.Swappiness
	}).(pulumi.IntPtrOutput)
}

func (o TaskDefinitionLinuxParametersPtrOutput) Tmpfs() TaskDefinitionTmpfsArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionLinuxParameters) []TaskDefinitionTmpfs {
		if v == nil {
			return nil
		}
		return v.Tmpfs
	}).(TaskDefinitionTmpfsArrayOutput)
}

type TaskDefinitionLogConfiguration struct {
	LogDriver     string                 `pulumi:"logDriver"`
	Options       interface{}            `pulumi:"options"`
	SecretOptions []TaskDefinitionSecret `pulumi:"secretOptions"`
}

// TaskDefinitionLogConfigurationInput is an input type that accepts TaskDefinitionLogConfigurationArgs and TaskDefinitionLogConfigurationOutput values.
// You can construct a concrete instance of `TaskDefinitionLogConfigurationInput` via:
//
//	TaskDefinitionLogConfigurationArgs{...}
type TaskDefinitionLogConfigurationInput interface {
	pulumi.Input

	ToTaskDefinitionLogConfigurationOutput() TaskDefinitionLogConfigurationOutput
	ToTaskDefinitionLogConfigurationOutputWithContext(context.Context) TaskDefinitionLogConfigurationOutput
}

type TaskDefinitionLogConfigurationArgs struct {
	LogDriver     pulumi.StringInput             `pulumi:"logDriver"`
	Options       pulumi.Input                   `pulumi:"options"`
	SecretOptions TaskDefinitionSecretArrayInput `pulumi:"secretOptions"`
}

func (TaskDefinitionLogConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionLogConfiguration)(nil)).Elem()
}

func (i TaskDefinitionLogConfigurationArgs) ToTaskDefinitionLogConfigurationOutput() TaskDefinitionLogConfigurationOutput {
	return i.ToTaskDefinitionLogConfigurationOutputWithContext(context.Background())
}

func (i TaskDefinitionLogConfigurationArgs) ToTaskDefinitionLogConfigurationOutputWithContext(ctx context.Context) TaskDefinitionLogConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionLogConfigurationOutput)
}

func (i TaskDefinitionLogConfigurationArgs) ToTaskDefinitionLogConfigurationPtrOutput() TaskDefinitionLogConfigurationPtrOutput {
	return i.ToTaskDefinitionLogConfigurationPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionLogConfigurationArgs) ToTaskDefinitionLogConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionLogConfigurationOutput).ToTaskDefinitionLogConfigurationPtrOutputWithContext(ctx)
}

// TaskDefinitionLogConfigurationPtrInput is an input type that accepts TaskDefinitionLogConfigurationArgs, TaskDefinitionLogConfigurationPtr and TaskDefinitionLogConfigurationPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionLogConfigurationPtrInput` via:
//
//	        TaskDefinitionLogConfigurationArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionLogConfigurationPtrInput interface {
	pulumi.Input

	ToTaskDefinitionLogConfigurationPtrOutput() TaskDefinitionLogConfigurationPtrOutput
	ToTaskDefinitionLogConfigurationPtrOutputWithContext(context.Context) TaskDefinitionLogConfigurationPtrOutput
}

type taskDefinitionLogConfigurationPtrType TaskDefinitionLogConfigurationArgs

func TaskDefinitionLogConfigurationPtr(v *TaskDefinitionLogConfigurationArgs) TaskDefinitionLogConfigurationPtrInput {
	return (*taskDefinitionLogConfigurationPtrType)(v)
}

func (*taskDefinitionLogConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionLogConfiguration)(nil)).Elem()
}

func (i *taskDefinitionLogConfigurationPtrType) ToTaskDefinitionLogConfigurationPtrOutput() TaskDefinitionLogConfigurationPtrOutput {
	return i.ToTaskDefinitionLogConfigurationPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionLogConfigurationPtrType) ToTaskDefinitionLogConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionLogConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionLogConfigurationPtrOutput)
}

type TaskDefinitionLogConfigurationOutput struct{ *pulumi.OutputState }

func (TaskDefinitionLogConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionLogConfiguration)(nil)).Elem()
}

func (o TaskDefinitionLogConfigurationOutput) ToTaskDefinitionLogConfigurationOutput() TaskDefinitionLogConfigurationOutput {
	return o
}

func (o TaskDefinitionLogConfigurationOutput) ToTaskDefinitionLogConfigurationOutputWithContext(ctx context.Context) TaskDefinitionLogConfigurationOutput {
	return o
}

func (o TaskDefinitionLogConfigurationOutput) ToTaskDefinitionLogConfigurationPtrOutput() TaskDefinitionLogConfigurationPtrOutput {
	return o.ToTaskDefinitionLogConfigurationPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionLogConfigurationOutput) ToTaskDefinitionLogConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionLogConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionLogConfiguration) *TaskDefinitionLogConfiguration {
		return &v
	}).(TaskDefinitionLogConfigurationPtrOutput)
}

func (o TaskDefinitionLogConfigurationOutput) LogDriver() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionLogConfiguration) string { return v.LogDriver }).(pulumi.StringOutput)
}

func (o TaskDefinitionLogConfigurationOutput) Options() pulumi.AnyOutput {
	return o.ApplyT(func(v TaskDefinitionLogConfiguration) interface{} { return v.Options }).(pulumi.AnyOutput)
}

func (o TaskDefinitionLogConfigurationOutput) SecretOptions() TaskDefinitionSecretArrayOutput {
	return o.ApplyT(func(v TaskDefinitionLogConfiguration) []TaskDefinitionSecret { return v.SecretOptions }).(TaskDefinitionSecretArrayOutput)
}

type TaskDefinitionLogConfigurationPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionLogConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionLogConfiguration)(nil)).Elem()
}

func (o TaskDefinitionLogConfigurationPtrOutput) ToTaskDefinitionLogConfigurationPtrOutput() TaskDefinitionLogConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionLogConfigurationPtrOutput) ToTaskDefinitionLogConfigurationPtrOutputWithContext(ctx context.Context) TaskDefinitionLogConfigurationPtrOutput {
	return o
}

func (o TaskDefinitionLogConfigurationPtrOutput) Elem() TaskDefinitionLogConfigurationOutput {
	return o.ApplyT(func(v *TaskDefinitionLogConfiguration) TaskDefinitionLogConfiguration {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionLogConfiguration
		return ret
	}).(TaskDefinitionLogConfigurationOutput)
}

func (o TaskDefinitionLogConfigurationPtrOutput) LogDriver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionLogConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.LogDriver
	}).(pulumi.StringPtrOutput)
}

func (o TaskDefinitionLogConfigurationPtrOutput) Options() pulumi.AnyOutput {
	return o.ApplyT(func(v *TaskDefinitionLogConfiguration) interface{} {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.AnyOutput)
}

func (o TaskDefinitionLogConfigurationPtrOutput) SecretOptions() TaskDefinitionSecretArrayOutput {
	return o.ApplyT(func(v *TaskDefinitionLogConfiguration) []TaskDefinitionSecret {
		if v == nil {
			return nil
		}
		return v.SecretOptions
	}).(TaskDefinitionSecretArrayOutput)
}

type TaskDefinitionMountPoint struct {
	ContainerPath *string `pulumi:"containerPath"`
	ReadOnly      *bool   `pulumi:"readOnly"`
	SourceVolume  *string `pulumi:"sourceVolume"`
}

// TaskDefinitionMountPointInput is an input type that accepts TaskDefinitionMountPointArgs and TaskDefinitionMountPointOutput values.
// You can construct a concrete instance of `TaskDefinitionMountPointInput` via:
//
//	TaskDefinitionMountPointArgs{...}
type TaskDefinitionMountPointInput interface {
	pulumi.Input

	ToTaskDefinitionMountPointOutput() TaskDefinitionMountPointOutput
	ToTaskDefinitionMountPointOutputWithContext(context.Context) TaskDefinitionMountPointOutput
}

type TaskDefinitionMountPointArgs struct {
	ContainerPath pulumi.StringPtrInput `pulumi:"containerPath"`
	ReadOnly      pulumi.BoolPtrInput   `pulumi:"readOnly"`
	SourceVolume  pulumi.StringPtrInput `pulumi:"sourceVolume"`
}

func (TaskDefinitionMountPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionMountPoint)(nil)).Elem()
}

func (i TaskDefinitionMountPointArgs) ToTaskDefinitionMountPointOutput() TaskDefinitionMountPointOutput {
	return i.ToTaskDefinitionMountPointOutputWithContext(context.Background())
}

func (i TaskDefinitionMountPointArgs) ToTaskDefinitionMountPointOutputWithContext(ctx context.Context) TaskDefinitionMountPointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionMountPointOutput)
}

// TaskDefinitionMountPointArrayInput is an input type that accepts TaskDefinitionMountPointArray and TaskDefinitionMountPointArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionMountPointArrayInput` via:
//
//	TaskDefinitionMountPointArray{ TaskDefinitionMountPointArgs{...} }
type TaskDefinitionMountPointArrayInput interface {
	pulumi.Input

	ToTaskDefinitionMountPointArrayOutput() TaskDefinitionMountPointArrayOutput
	ToTaskDefinitionMountPointArrayOutputWithContext(context.Context) TaskDefinitionMountPointArrayOutput
}

type TaskDefinitionMountPointArray []TaskDefinitionMountPointInput

func (TaskDefinitionMountPointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionMountPoint)(nil)).Elem()
}

func (i TaskDefinitionMountPointArray) ToTaskDefinitionMountPointArrayOutput() TaskDefinitionMountPointArrayOutput {
	return i.ToTaskDefinitionMountPointArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionMountPointArray) ToTaskDefinitionMountPointArrayOutputWithContext(ctx context.Context) TaskDefinitionMountPointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionMountPointArrayOutput)
}

type TaskDefinitionMountPointOutput struct{ *pulumi.OutputState }

func (TaskDefinitionMountPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionMountPoint)(nil)).Elem()
}

func (o TaskDefinitionMountPointOutput) ToTaskDefinitionMountPointOutput() TaskDefinitionMountPointOutput {
	return o
}

func (o TaskDefinitionMountPointOutput) ToTaskDefinitionMountPointOutputWithContext(ctx context.Context) TaskDefinitionMountPointOutput {
	return o
}

func (o TaskDefinitionMountPointOutput) ContainerPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionMountPoint) *string { return v.ContainerPath }).(pulumi.StringPtrOutput)
}

func (o TaskDefinitionMountPointOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionMountPoint) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o TaskDefinitionMountPointOutput) SourceVolume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionMountPoint) *string { return v.SourceVolume }).(pulumi.StringPtrOutput)
}

type TaskDefinitionMountPointArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionMountPointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionMountPoint)(nil)).Elem()
}

func (o TaskDefinitionMountPointArrayOutput) ToTaskDefinitionMountPointArrayOutput() TaskDefinitionMountPointArrayOutput {
	return o
}

func (o TaskDefinitionMountPointArrayOutput) ToTaskDefinitionMountPointArrayOutputWithContext(ctx context.Context) TaskDefinitionMountPointArrayOutput {
	return o
}

func (o TaskDefinitionMountPointArrayOutput) Index(i pulumi.IntInput) TaskDefinitionMountPointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionMountPoint {
		return vs[0].([]TaskDefinitionMountPoint)[vs[1].(int)]
	}).(TaskDefinitionMountPointOutput)
}

type TaskDefinitionPortMapping struct {
	AppProtocol        *TaskDefinitionPortMappingAppProtocol `pulumi:"appProtocol"`
	ContainerPort      *int                                  `pulumi:"containerPort"`
	ContainerPortRange *string                               `pulumi:"containerPortRange"`
	HostPort           *int                                  `pulumi:"hostPort"`
	Name               *string                               `pulumi:"name"`
	Protocol           *string                               `pulumi:"protocol"`
	TargetGroup        *lb.TargetGroup                       `pulumi:"targetGroup"`
}

// TaskDefinitionPortMappingInput is an input type that accepts TaskDefinitionPortMappingArgs and TaskDefinitionPortMappingOutput values.
// You can construct a concrete instance of `TaskDefinitionPortMappingInput` via:
//
//	TaskDefinitionPortMappingArgs{...}
type TaskDefinitionPortMappingInput interface {
	pulumi.Input

	ToTaskDefinitionPortMappingOutput() TaskDefinitionPortMappingOutput
	ToTaskDefinitionPortMappingOutputWithContext(context.Context) TaskDefinitionPortMappingOutput
}

type TaskDefinitionPortMappingArgs struct {
	AppProtocol        TaskDefinitionPortMappingAppProtocolPtrInput `pulumi:"appProtocol"`
	ContainerPort      pulumi.IntPtrInput                           `pulumi:"containerPort"`
	ContainerPortRange pulumi.StringPtrInput                        `pulumi:"containerPortRange"`
	HostPort           pulumi.IntPtrInput                           `pulumi:"hostPort"`
	Name               pulumi.StringPtrInput                        `pulumi:"name"`
	Protocol           pulumi.StringPtrInput                        `pulumi:"protocol"`
	TargetGroup        lb.TargetGroupInput                          `pulumi:"targetGroup"`
}

func (TaskDefinitionPortMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionPortMapping)(nil)).Elem()
}

func (i TaskDefinitionPortMappingArgs) ToTaskDefinitionPortMappingOutput() TaskDefinitionPortMappingOutput {
	return i.ToTaskDefinitionPortMappingOutputWithContext(context.Background())
}

func (i TaskDefinitionPortMappingArgs) ToTaskDefinitionPortMappingOutputWithContext(ctx context.Context) TaskDefinitionPortMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionPortMappingOutput)
}

// TaskDefinitionPortMappingArrayInput is an input type that accepts TaskDefinitionPortMappingArray and TaskDefinitionPortMappingArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionPortMappingArrayInput` via:
//
//	TaskDefinitionPortMappingArray{ TaskDefinitionPortMappingArgs{...} }
type TaskDefinitionPortMappingArrayInput interface {
	pulumi.Input

	ToTaskDefinitionPortMappingArrayOutput() TaskDefinitionPortMappingArrayOutput
	ToTaskDefinitionPortMappingArrayOutputWithContext(context.Context) TaskDefinitionPortMappingArrayOutput
}

type TaskDefinitionPortMappingArray []TaskDefinitionPortMappingInput

func (TaskDefinitionPortMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionPortMapping)(nil)).Elem()
}

func (i TaskDefinitionPortMappingArray) ToTaskDefinitionPortMappingArrayOutput() TaskDefinitionPortMappingArrayOutput {
	return i.ToTaskDefinitionPortMappingArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionPortMappingArray) ToTaskDefinitionPortMappingArrayOutputWithContext(ctx context.Context) TaskDefinitionPortMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionPortMappingArrayOutput)
}

type TaskDefinitionPortMappingOutput struct{ *pulumi.OutputState }

func (TaskDefinitionPortMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionPortMapping)(nil)).Elem()
}

func (o TaskDefinitionPortMappingOutput) ToTaskDefinitionPortMappingOutput() TaskDefinitionPortMappingOutput {
	return o
}

func (o TaskDefinitionPortMappingOutput) ToTaskDefinitionPortMappingOutputWithContext(ctx context.Context) TaskDefinitionPortMappingOutput {
	return o
}

func (o TaskDefinitionPortMappingOutput) AppProtocol() TaskDefinitionPortMappingAppProtocolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPortMapping) *TaskDefinitionPortMappingAppProtocol { return v.AppProtocol }).(TaskDefinitionPortMappingAppProtocolPtrOutput)
}

func (o TaskDefinitionPortMappingOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPortMapping) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

func (o TaskDefinitionPortMappingOutput) ContainerPortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPortMapping) *string { return v.ContainerPortRange }).(pulumi.StringPtrOutput)
}

func (o TaskDefinitionPortMappingOutput) HostPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPortMapping) *int { return v.HostPort }).(pulumi.IntPtrOutput)
}

func (o TaskDefinitionPortMappingOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPortMapping) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o TaskDefinitionPortMappingOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionPortMapping) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o TaskDefinitionPortMappingOutput) TargetGroup() lb.TargetGroupOutput {
	return o.ApplyT(func(v TaskDefinitionPortMapping) *lb.TargetGroup { return v.TargetGroup }).(lb.TargetGroupOutput)
}

type TaskDefinitionPortMappingArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionPortMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionPortMapping)(nil)).Elem()
}

func (o TaskDefinitionPortMappingArrayOutput) ToTaskDefinitionPortMappingArrayOutput() TaskDefinitionPortMappingArrayOutput {
	return o
}

func (o TaskDefinitionPortMappingArrayOutput) ToTaskDefinitionPortMappingArrayOutputWithContext(ctx context.Context) TaskDefinitionPortMappingArrayOutput {
	return o
}

func (o TaskDefinitionPortMappingArrayOutput) Index(i pulumi.IntInput) TaskDefinitionPortMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionPortMapping {
		return vs[0].([]TaskDefinitionPortMapping)[vs[1].(int)]
	}).(TaskDefinitionPortMappingOutput)
}

type TaskDefinitionRepositoryCredentials struct {
	CredentialsParameter *string `pulumi:"credentialsParameter"`
}

// TaskDefinitionRepositoryCredentialsInput is an input type that accepts TaskDefinitionRepositoryCredentialsArgs and TaskDefinitionRepositoryCredentialsOutput values.
// You can construct a concrete instance of `TaskDefinitionRepositoryCredentialsInput` via:
//
//	TaskDefinitionRepositoryCredentialsArgs{...}
type TaskDefinitionRepositoryCredentialsInput interface {
	pulumi.Input

	ToTaskDefinitionRepositoryCredentialsOutput() TaskDefinitionRepositoryCredentialsOutput
	ToTaskDefinitionRepositoryCredentialsOutputWithContext(context.Context) TaskDefinitionRepositoryCredentialsOutput
}

type TaskDefinitionRepositoryCredentialsArgs struct {
	CredentialsParameter pulumi.StringPtrInput `pulumi:"credentialsParameter"`
}

func (TaskDefinitionRepositoryCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionRepositoryCredentials)(nil)).Elem()
}

func (i TaskDefinitionRepositoryCredentialsArgs) ToTaskDefinitionRepositoryCredentialsOutput() TaskDefinitionRepositoryCredentialsOutput {
	return i.ToTaskDefinitionRepositoryCredentialsOutputWithContext(context.Background())
}

func (i TaskDefinitionRepositoryCredentialsArgs) ToTaskDefinitionRepositoryCredentialsOutputWithContext(ctx context.Context) TaskDefinitionRepositoryCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRepositoryCredentialsOutput)
}

func (i TaskDefinitionRepositoryCredentialsArgs) ToTaskDefinitionRepositoryCredentialsPtrOutput() TaskDefinitionRepositoryCredentialsPtrOutput {
	return i.ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(context.Background())
}

func (i TaskDefinitionRepositoryCredentialsArgs) ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(ctx context.Context) TaskDefinitionRepositoryCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRepositoryCredentialsOutput).ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(ctx)
}

// TaskDefinitionRepositoryCredentialsPtrInput is an input type that accepts TaskDefinitionRepositoryCredentialsArgs, TaskDefinitionRepositoryCredentialsPtr and TaskDefinitionRepositoryCredentialsPtrOutput values.
// You can construct a concrete instance of `TaskDefinitionRepositoryCredentialsPtrInput` via:
//
//	        TaskDefinitionRepositoryCredentialsArgs{...}
//
//	or:
//
//	        nil
type TaskDefinitionRepositoryCredentialsPtrInput interface {
	pulumi.Input

	ToTaskDefinitionRepositoryCredentialsPtrOutput() TaskDefinitionRepositoryCredentialsPtrOutput
	ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(context.Context) TaskDefinitionRepositoryCredentialsPtrOutput
}

type taskDefinitionRepositoryCredentialsPtrType TaskDefinitionRepositoryCredentialsArgs

func TaskDefinitionRepositoryCredentialsPtr(v *TaskDefinitionRepositoryCredentialsArgs) TaskDefinitionRepositoryCredentialsPtrInput {
	return (*taskDefinitionRepositoryCredentialsPtrType)(v)
}

func (*taskDefinitionRepositoryCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionRepositoryCredentials)(nil)).Elem()
}

func (i *taskDefinitionRepositoryCredentialsPtrType) ToTaskDefinitionRepositoryCredentialsPtrOutput() TaskDefinitionRepositoryCredentialsPtrOutput {
	return i.ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(context.Background())
}

func (i *taskDefinitionRepositoryCredentialsPtrType) ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(ctx context.Context) TaskDefinitionRepositoryCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionRepositoryCredentialsPtrOutput)
}

type TaskDefinitionRepositoryCredentialsOutput struct{ *pulumi.OutputState }

func (TaskDefinitionRepositoryCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionRepositoryCredentials)(nil)).Elem()
}

func (o TaskDefinitionRepositoryCredentialsOutput) ToTaskDefinitionRepositoryCredentialsOutput() TaskDefinitionRepositoryCredentialsOutput {
	return o
}

func (o TaskDefinitionRepositoryCredentialsOutput) ToTaskDefinitionRepositoryCredentialsOutputWithContext(ctx context.Context) TaskDefinitionRepositoryCredentialsOutput {
	return o
}

func (o TaskDefinitionRepositoryCredentialsOutput) ToTaskDefinitionRepositoryCredentialsPtrOutput() TaskDefinitionRepositoryCredentialsPtrOutput {
	return o.ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(context.Background())
}

func (o TaskDefinitionRepositoryCredentialsOutput) ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(ctx context.Context) TaskDefinitionRepositoryCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskDefinitionRepositoryCredentials) *TaskDefinitionRepositoryCredentials {
		return &v
	}).(TaskDefinitionRepositoryCredentialsPtrOutput)
}

func (o TaskDefinitionRepositoryCredentialsOutput) CredentialsParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionRepositoryCredentials) *string { return v.CredentialsParameter }).(pulumi.StringPtrOutput)
}

type TaskDefinitionRepositoryCredentialsPtrOutput struct{ *pulumi.OutputState }

func (TaskDefinitionRepositoryCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskDefinitionRepositoryCredentials)(nil)).Elem()
}

func (o TaskDefinitionRepositoryCredentialsPtrOutput) ToTaskDefinitionRepositoryCredentialsPtrOutput() TaskDefinitionRepositoryCredentialsPtrOutput {
	return o
}

func (o TaskDefinitionRepositoryCredentialsPtrOutput) ToTaskDefinitionRepositoryCredentialsPtrOutputWithContext(ctx context.Context) TaskDefinitionRepositoryCredentialsPtrOutput {
	return o
}

func (o TaskDefinitionRepositoryCredentialsPtrOutput) Elem() TaskDefinitionRepositoryCredentialsOutput {
	return o.ApplyT(func(v *TaskDefinitionRepositoryCredentials) TaskDefinitionRepositoryCredentials {
		if v != nil {
			return *v
		}
		var ret TaskDefinitionRepositoryCredentials
		return ret
	}).(TaskDefinitionRepositoryCredentialsOutput)
}

func (o TaskDefinitionRepositoryCredentialsPtrOutput) CredentialsParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskDefinitionRepositoryCredentials) *string {
		if v == nil {
			return nil
		}
		return v.CredentialsParameter
	}).(pulumi.StringPtrOutput)
}

type TaskDefinitionResourceRequirement struct {
	Type  string `pulumi:"type"`
	Value string `pulumi:"value"`
}

// TaskDefinitionResourceRequirementInput is an input type that accepts TaskDefinitionResourceRequirementArgs and TaskDefinitionResourceRequirementOutput values.
// You can construct a concrete instance of `TaskDefinitionResourceRequirementInput` via:
//
//	TaskDefinitionResourceRequirementArgs{...}
type TaskDefinitionResourceRequirementInput interface {
	pulumi.Input

	ToTaskDefinitionResourceRequirementOutput() TaskDefinitionResourceRequirementOutput
	ToTaskDefinitionResourceRequirementOutputWithContext(context.Context) TaskDefinitionResourceRequirementOutput
}

type TaskDefinitionResourceRequirementArgs struct {
	Type  pulumi.StringInput `pulumi:"type"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (TaskDefinitionResourceRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionResourceRequirement)(nil)).Elem()
}

func (i TaskDefinitionResourceRequirementArgs) ToTaskDefinitionResourceRequirementOutput() TaskDefinitionResourceRequirementOutput {
	return i.ToTaskDefinitionResourceRequirementOutputWithContext(context.Background())
}

func (i TaskDefinitionResourceRequirementArgs) ToTaskDefinitionResourceRequirementOutputWithContext(ctx context.Context) TaskDefinitionResourceRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionResourceRequirementOutput)
}

// TaskDefinitionResourceRequirementArrayInput is an input type that accepts TaskDefinitionResourceRequirementArray and TaskDefinitionResourceRequirementArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionResourceRequirementArrayInput` via:
//
//	TaskDefinitionResourceRequirementArray{ TaskDefinitionResourceRequirementArgs{...} }
type TaskDefinitionResourceRequirementArrayInput interface {
	pulumi.Input

	ToTaskDefinitionResourceRequirementArrayOutput() TaskDefinitionResourceRequirementArrayOutput
	ToTaskDefinitionResourceRequirementArrayOutputWithContext(context.Context) TaskDefinitionResourceRequirementArrayOutput
}

type TaskDefinitionResourceRequirementArray []TaskDefinitionResourceRequirementInput

func (TaskDefinitionResourceRequirementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionResourceRequirement)(nil)).Elem()
}

func (i TaskDefinitionResourceRequirementArray) ToTaskDefinitionResourceRequirementArrayOutput() TaskDefinitionResourceRequirementArrayOutput {
	return i.ToTaskDefinitionResourceRequirementArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionResourceRequirementArray) ToTaskDefinitionResourceRequirementArrayOutputWithContext(ctx context.Context) TaskDefinitionResourceRequirementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionResourceRequirementArrayOutput)
}

type TaskDefinitionResourceRequirementOutput struct{ *pulumi.OutputState }

func (TaskDefinitionResourceRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionResourceRequirement)(nil)).Elem()
}

func (o TaskDefinitionResourceRequirementOutput) ToTaskDefinitionResourceRequirementOutput() TaskDefinitionResourceRequirementOutput {
	return o
}

func (o TaskDefinitionResourceRequirementOutput) ToTaskDefinitionResourceRequirementOutputWithContext(ctx context.Context) TaskDefinitionResourceRequirementOutput {
	return o
}

func (o TaskDefinitionResourceRequirementOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionResourceRequirement) string { return v.Type }).(pulumi.StringOutput)
}

func (o TaskDefinitionResourceRequirementOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionResourceRequirement) string { return v.Value }).(pulumi.StringOutput)
}

type TaskDefinitionResourceRequirementArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionResourceRequirementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionResourceRequirement)(nil)).Elem()
}

func (o TaskDefinitionResourceRequirementArrayOutput) ToTaskDefinitionResourceRequirementArrayOutput() TaskDefinitionResourceRequirementArrayOutput {
	return o
}

func (o TaskDefinitionResourceRequirementArrayOutput) ToTaskDefinitionResourceRequirementArrayOutputWithContext(ctx context.Context) TaskDefinitionResourceRequirementArrayOutput {
	return o
}

func (o TaskDefinitionResourceRequirementArrayOutput) Index(i pulumi.IntInput) TaskDefinitionResourceRequirementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionResourceRequirement {
		return vs[0].([]TaskDefinitionResourceRequirement)[vs[1].(int)]
	}).(TaskDefinitionResourceRequirementOutput)
}

type TaskDefinitionSecret struct {
	Name      string `pulumi:"name"`
	ValueFrom string `pulumi:"valueFrom"`
}

// TaskDefinitionSecretInput is an input type that accepts TaskDefinitionSecretArgs and TaskDefinitionSecretOutput values.
// You can construct a concrete instance of `TaskDefinitionSecretInput` via:
//
//	TaskDefinitionSecretArgs{...}
type TaskDefinitionSecretInput interface {
	pulumi.Input

	ToTaskDefinitionSecretOutput() TaskDefinitionSecretOutput
	ToTaskDefinitionSecretOutputWithContext(context.Context) TaskDefinitionSecretOutput
}

type TaskDefinitionSecretArgs struct {
	Name      pulumi.StringInput `pulumi:"name"`
	ValueFrom pulumi.StringInput `pulumi:"valueFrom"`
}

func (TaskDefinitionSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionSecret)(nil)).Elem()
}

func (i TaskDefinitionSecretArgs) ToTaskDefinitionSecretOutput() TaskDefinitionSecretOutput {
	return i.ToTaskDefinitionSecretOutputWithContext(context.Background())
}

func (i TaskDefinitionSecretArgs) ToTaskDefinitionSecretOutputWithContext(ctx context.Context) TaskDefinitionSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionSecretOutput)
}

// TaskDefinitionSecretArrayInput is an input type that accepts TaskDefinitionSecretArray and TaskDefinitionSecretArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionSecretArrayInput` via:
//
//	TaskDefinitionSecretArray{ TaskDefinitionSecretArgs{...} }
type TaskDefinitionSecretArrayInput interface {
	pulumi.Input

	ToTaskDefinitionSecretArrayOutput() TaskDefinitionSecretArrayOutput
	ToTaskDefinitionSecretArrayOutputWithContext(context.Context) TaskDefinitionSecretArrayOutput
}

type TaskDefinitionSecretArray []TaskDefinitionSecretInput

func (TaskDefinitionSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionSecret)(nil)).Elem()
}

func (i TaskDefinitionSecretArray) ToTaskDefinitionSecretArrayOutput() TaskDefinitionSecretArrayOutput {
	return i.ToTaskDefinitionSecretArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionSecretArray) ToTaskDefinitionSecretArrayOutputWithContext(ctx context.Context) TaskDefinitionSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionSecretArrayOutput)
}

type TaskDefinitionSecretOutput struct{ *pulumi.OutputState }

func (TaskDefinitionSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionSecret)(nil)).Elem()
}

func (o TaskDefinitionSecretOutput) ToTaskDefinitionSecretOutput() TaskDefinitionSecretOutput {
	return o
}

func (o TaskDefinitionSecretOutput) ToTaskDefinitionSecretOutputWithContext(ctx context.Context) TaskDefinitionSecretOutput {
	return o
}

func (o TaskDefinitionSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionSecret) string { return v.Name }).(pulumi.StringOutput)
}

func (o TaskDefinitionSecretOutput) ValueFrom() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionSecret) string { return v.ValueFrom }).(pulumi.StringOutput)
}

type TaskDefinitionSecretArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionSecret)(nil)).Elem()
}

func (o TaskDefinitionSecretArrayOutput) ToTaskDefinitionSecretArrayOutput() TaskDefinitionSecretArrayOutput {
	return o
}

func (o TaskDefinitionSecretArrayOutput) ToTaskDefinitionSecretArrayOutputWithContext(ctx context.Context) TaskDefinitionSecretArrayOutput {
	return o
}

func (o TaskDefinitionSecretArrayOutput) Index(i pulumi.IntInput) TaskDefinitionSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionSecret {
		return vs[0].([]TaskDefinitionSecret)[vs[1].(int)]
	}).(TaskDefinitionSecretOutput)
}

type TaskDefinitionSystemControl struct {
	Namespace *string `pulumi:"namespace"`
	Value     *string `pulumi:"value"`
}

// TaskDefinitionSystemControlInput is an input type that accepts TaskDefinitionSystemControlArgs and TaskDefinitionSystemControlOutput values.
// You can construct a concrete instance of `TaskDefinitionSystemControlInput` via:
//
//	TaskDefinitionSystemControlArgs{...}
type TaskDefinitionSystemControlInput interface {
	pulumi.Input

	ToTaskDefinitionSystemControlOutput() TaskDefinitionSystemControlOutput
	ToTaskDefinitionSystemControlOutputWithContext(context.Context) TaskDefinitionSystemControlOutput
}

type TaskDefinitionSystemControlArgs struct {
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	Value     pulumi.StringPtrInput `pulumi:"value"`
}

func (TaskDefinitionSystemControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionSystemControl)(nil)).Elem()
}

func (i TaskDefinitionSystemControlArgs) ToTaskDefinitionSystemControlOutput() TaskDefinitionSystemControlOutput {
	return i.ToTaskDefinitionSystemControlOutputWithContext(context.Background())
}

func (i TaskDefinitionSystemControlArgs) ToTaskDefinitionSystemControlOutputWithContext(ctx context.Context) TaskDefinitionSystemControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionSystemControlOutput)
}

// TaskDefinitionSystemControlArrayInput is an input type that accepts TaskDefinitionSystemControlArray and TaskDefinitionSystemControlArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionSystemControlArrayInput` via:
//
//	TaskDefinitionSystemControlArray{ TaskDefinitionSystemControlArgs{...} }
type TaskDefinitionSystemControlArrayInput interface {
	pulumi.Input

	ToTaskDefinitionSystemControlArrayOutput() TaskDefinitionSystemControlArrayOutput
	ToTaskDefinitionSystemControlArrayOutputWithContext(context.Context) TaskDefinitionSystemControlArrayOutput
}

type TaskDefinitionSystemControlArray []TaskDefinitionSystemControlInput

func (TaskDefinitionSystemControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionSystemControl)(nil)).Elem()
}

func (i TaskDefinitionSystemControlArray) ToTaskDefinitionSystemControlArrayOutput() TaskDefinitionSystemControlArrayOutput {
	return i.ToTaskDefinitionSystemControlArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionSystemControlArray) ToTaskDefinitionSystemControlArrayOutputWithContext(ctx context.Context) TaskDefinitionSystemControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionSystemControlArrayOutput)
}

type TaskDefinitionSystemControlOutput struct{ *pulumi.OutputState }

func (TaskDefinitionSystemControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionSystemControl)(nil)).Elem()
}

func (o TaskDefinitionSystemControlOutput) ToTaskDefinitionSystemControlOutput() TaskDefinitionSystemControlOutput {
	return o
}

func (o TaskDefinitionSystemControlOutput) ToTaskDefinitionSystemControlOutputWithContext(ctx context.Context) TaskDefinitionSystemControlOutput {
	return o
}

func (o TaskDefinitionSystemControlOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionSystemControl) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o TaskDefinitionSystemControlOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionSystemControl) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TaskDefinitionSystemControlArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionSystemControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionSystemControl)(nil)).Elem()
}

func (o TaskDefinitionSystemControlArrayOutput) ToTaskDefinitionSystemControlArrayOutput() TaskDefinitionSystemControlArrayOutput {
	return o
}

func (o TaskDefinitionSystemControlArrayOutput) ToTaskDefinitionSystemControlArrayOutputWithContext(ctx context.Context) TaskDefinitionSystemControlArrayOutput {
	return o
}

func (o TaskDefinitionSystemControlArrayOutput) Index(i pulumi.IntInput) TaskDefinitionSystemControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionSystemControl {
		return vs[0].([]TaskDefinitionSystemControl)[vs[1].(int)]
	}).(TaskDefinitionSystemControlOutput)
}

type TaskDefinitionTmpfs struct {
	ContainerPath *string  `pulumi:"containerPath"`
	MountOptions  []string `pulumi:"mountOptions"`
	Size          int      `pulumi:"size"`
}

// TaskDefinitionTmpfsInput is an input type that accepts TaskDefinitionTmpfsArgs and TaskDefinitionTmpfsOutput values.
// You can construct a concrete instance of `TaskDefinitionTmpfsInput` via:
//
//	TaskDefinitionTmpfsArgs{...}
type TaskDefinitionTmpfsInput interface {
	pulumi.Input

	ToTaskDefinitionTmpfsOutput() TaskDefinitionTmpfsOutput
	ToTaskDefinitionTmpfsOutputWithContext(context.Context) TaskDefinitionTmpfsOutput
}

type TaskDefinitionTmpfsArgs struct {
	ContainerPath pulumi.StringPtrInput   `pulumi:"containerPath"`
	MountOptions  pulumi.StringArrayInput `pulumi:"mountOptions"`
	Size          pulumi.IntInput         `pulumi:"size"`
}

func (TaskDefinitionTmpfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionTmpfs)(nil)).Elem()
}

func (i TaskDefinitionTmpfsArgs) ToTaskDefinitionTmpfsOutput() TaskDefinitionTmpfsOutput {
	return i.ToTaskDefinitionTmpfsOutputWithContext(context.Background())
}

func (i TaskDefinitionTmpfsArgs) ToTaskDefinitionTmpfsOutputWithContext(ctx context.Context) TaskDefinitionTmpfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionTmpfsOutput)
}

// TaskDefinitionTmpfsArrayInput is an input type that accepts TaskDefinitionTmpfsArray and TaskDefinitionTmpfsArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionTmpfsArrayInput` via:
//
//	TaskDefinitionTmpfsArray{ TaskDefinitionTmpfsArgs{...} }
type TaskDefinitionTmpfsArrayInput interface {
	pulumi.Input

	ToTaskDefinitionTmpfsArrayOutput() TaskDefinitionTmpfsArrayOutput
	ToTaskDefinitionTmpfsArrayOutputWithContext(context.Context) TaskDefinitionTmpfsArrayOutput
}

type TaskDefinitionTmpfsArray []TaskDefinitionTmpfsInput

func (TaskDefinitionTmpfsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionTmpfs)(nil)).Elem()
}

func (i TaskDefinitionTmpfsArray) ToTaskDefinitionTmpfsArrayOutput() TaskDefinitionTmpfsArrayOutput {
	return i.ToTaskDefinitionTmpfsArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionTmpfsArray) ToTaskDefinitionTmpfsArrayOutputWithContext(ctx context.Context) TaskDefinitionTmpfsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionTmpfsArrayOutput)
}

type TaskDefinitionTmpfsOutput struct{ *pulumi.OutputState }

func (TaskDefinitionTmpfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionTmpfs)(nil)).Elem()
}

func (o TaskDefinitionTmpfsOutput) ToTaskDefinitionTmpfsOutput() TaskDefinitionTmpfsOutput {
	return o
}

func (o TaskDefinitionTmpfsOutput) ToTaskDefinitionTmpfsOutputWithContext(ctx context.Context) TaskDefinitionTmpfsOutput {
	return o
}

func (o TaskDefinitionTmpfsOutput) ContainerPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionTmpfs) *string { return v.ContainerPath }).(pulumi.StringPtrOutput)
}

func (o TaskDefinitionTmpfsOutput) MountOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskDefinitionTmpfs) []string { return v.MountOptions }).(pulumi.StringArrayOutput)
}

func (o TaskDefinitionTmpfsOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v TaskDefinitionTmpfs) int { return v.Size }).(pulumi.IntOutput)
}

type TaskDefinitionTmpfsArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionTmpfsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionTmpfs)(nil)).Elem()
}

func (o TaskDefinitionTmpfsArrayOutput) ToTaskDefinitionTmpfsArrayOutput() TaskDefinitionTmpfsArrayOutput {
	return o
}

func (o TaskDefinitionTmpfsArrayOutput) ToTaskDefinitionTmpfsArrayOutputWithContext(ctx context.Context) TaskDefinitionTmpfsArrayOutput {
	return o
}

func (o TaskDefinitionTmpfsArrayOutput) Index(i pulumi.IntInput) TaskDefinitionTmpfsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionTmpfs {
		return vs[0].([]TaskDefinitionTmpfs)[vs[1].(int)]
	}).(TaskDefinitionTmpfsOutput)
}

type TaskDefinitionUlimit struct {
	HardLimit int    `pulumi:"hardLimit"`
	Name      string `pulumi:"name"`
	SoftLimit int    `pulumi:"softLimit"`
}

// TaskDefinitionUlimitInput is an input type that accepts TaskDefinitionUlimitArgs and TaskDefinitionUlimitOutput values.
// You can construct a concrete instance of `TaskDefinitionUlimitInput` via:
//
//	TaskDefinitionUlimitArgs{...}
type TaskDefinitionUlimitInput interface {
	pulumi.Input

	ToTaskDefinitionUlimitOutput() TaskDefinitionUlimitOutput
	ToTaskDefinitionUlimitOutputWithContext(context.Context) TaskDefinitionUlimitOutput
}

type TaskDefinitionUlimitArgs struct {
	HardLimit pulumi.IntInput    `pulumi:"hardLimit"`
	Name      pulumi.StringInput `pulumi:"name"`
	SoftLimit pulumi.IntInput    `pulumi:"softLimit"`
}

func (TaskDefinitionUlimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionUlimit)(nil)).Elem()
}

func (i TaskDefinitionUlimitArgs) ToTaskDefinitionUlimitOutput() TaskDefinitionUlimitOutput {
	return i.ToTaskDefinitionUlimitOutputWithContext(context.Background())
}

func (i TaskDefinitionUlimitArgs) ToTaskDefinitionUlimitOutputWithContext(ctx context.Context) TaskDefinitionUlimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionUlimitOutput)
}

// TaskDefinitionUlimitArrayInput is an input type that accepts TaskDefinitionUlimitArray and TaskDefinitionUlimitArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionUlimitArrayInput` via:
//
//	TaskDefinitionUlimitArray{ TaskDefinitionUlimitArgs{...} }
type TaskDefinitionUlimitArrayInput interface {
	pulumi.Input

	ToTaskDefinitionUlimitArrayOutput() TaskDefinitionUlimitArrayOutput
	ToTaskDefinitionUlimitArrayOutputWithContext(context.Context) TaskDefinitionUlimitArrayOutput
}

type TaskDefinitionUlimitArray []TaskDefinitionUlimitInput

func (TaskDefinitionUlimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionUlimit)(nil)).Elem()
}

func (i TaskDefinitionUlimitArray) ToTaskDefinitionUlimitArrayOutput() TaskDefinitionUlimitArrayOutput {
	return i.ToTaskDefinitionUlimitArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionUlimitArray) ToTaskDefinitionUlimitArrayOutputWithContext(ctx context.Context) TaskDefinitionUlimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionUlimitArrayOutput)
}

type TaskDefinitionUlimitOutput struct{ *pulumi.OutputState }

func (TaskDefinitionUlimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionUlimit)(nil)).Elem()
}

func (o TaskDefinitionUlimitOutput) ToTaskDefinitionUlimitOutput() TaskDefinitionUlimitOutput {
	return o
}

func (o TaskDefinitionUlimitOutput) ToTaskDefinitionUlimitOutputWithContext(ctx context.Context) TaskDefinitionUlimitOutput {
	return o
}

func (o TaskDefinitionUlimitOutput) HardLimit() pulumi.IntOutput {
	return o.ApplyT(func(v TaskDefinitionUlimit) int { return v.HardLimit }).(pulumi.IntOutput)
}

func (o TaskDefinitionUlimitOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TaskDefinitionUlimit) string { return v.Name }).(pulumi.StringOutput)
}

func (o TaskDefinitionUlimitOutput) SoftLimit() pulumi.IntOutput {
	return o.ApplyT(func(v TaskDefinitionUlimit) int { return v.SoftLimit }).(pulumi.IntOutput)
}

type TaskDefinitionUlimitArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionUlimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionUlimit)(nil)).Elem()
}

func (o TaskDefinitionUlimitArrayOutput) ToTaskDefinitionUlimitArrayOutput() TaskDefinitionUlimitArrayOutput {
	return o
}

func (o TaskDefinitionUlimitArrayOutput) ToTaskDefinitionUlimitArrayOutputWithContext(ctx context.Context) TaskDefinitionUlimitArrayOutput {
	return o
}

func (o TaskDefinitionUlimitArrayOutput) Index(i pulumi.IntInput) TaskDefinitionUlimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionUlimit {
		return vs[0].([]TaskDefinitionUlimit)[vs[1].(int)]
	}).(TaskDefinitionUlimitOutput)
}

type TaskDefinitionVolumeFrom struct {
	ReadOnly        *bool   `pulumi:"readOnly"`
	SourceContainer *string `pulumi:"sourceContainer"`
}

// TaskDefinitionVolumeFromInput is an input type that accepts TaskDefinitionVolumeFromArgs and TaskDefinitionVolumeFromOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeFromInput` via:
//
//	TaskDefinitionVolumeFromArgs{...}
type TaskDefinitionVolumeFromInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeFromOutput() TaskDefinitionVolumeFromOutput
	ToTaskDefinitionVolumeFromOutputWithContext(context.Context) TaskDefinitionVolumeFromOutput
}

type TaskDefinitionVolumeFromArgs struct {
	ReadOnly        pulumi.BoolPtrInput   `pulumi:"readOnly"`
	SourceContainer pulumi.StringPtrInput `pulumi:"sourceContainer"`
}

func (TaskDefinitionVolumeFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeFrom)(nil)).Elem()
}

func (i TaskDefinitionVolumeFromArgs) ToTaskDefinitionVolumeFromOutput() TaskDefinitionVolumeFromOutput {
	return i.ToTaskDefinitionVolumeFromOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeFromArgs) ToTaskDefinitionVolumeFromOutputWithContext(ctx context.Context) TaskDefinitionVolumeFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeFromOutput)
}

// TaskDefinitionVolumeFromArrayInput is an input type that accepts TaskDefinitionVolumeFromArray and TaskDefinitionVolumeFromArrayOutput values.
// You can construct a concrete instance of `TaskDefinitionVolumeFromArrayInput` via:
//
//	TaskDefinitionVolumeFromArray{ TaskDefinitionVolumeFromArgs{...} }
type TaskDefinitionVolumeFromArrayInput interface {
	pulumi.Input

	ToTaskDefinitionVolumeFromArrayOutput() TaskDefinitionVolumeFromArrayOutput
	ToTaskDefinitionVolumeFromArrayOutputWithContext(context.Context) TaskDefinitionVolumeFromArrayOutput
}

type TaskDefinitionVolumeFromArray []TaskDefinitionVolumeFromInput

func (TaskDefinitionVolumeFromArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionVolumeFrom)(nil)).Elem()
}

func (i TaskDefinitionVolumeFromArray) ToTaskDefinitionVolumeFromArrayOutput() TaskDefinitionVolumeFromArrayOutput {
	return i.ToTaskDefinitionVolumeFromArrayOutputWithContext(context.Background())
}

func (i TaskDefinitionVolumeFromArray) ToTaskDefinitionVolumeFromArrayOutputWithContext(ctx context.Context) TaskDefinitionVolumeFromArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskDefinitionVolumeFromArrayOutput)
}

type TaskDefinitionVolumeFromOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskDefinitionVolumeFrom)(nil)).Elem()
}

func (o TaskDefinitionVolumeFromOutput) ToTaskDefinitionVolumeFromOutput() TaskDefinitionVolumeFromOutput {
	return o
}

func (o TaskDefinitionVolumeFromOutput) ToTaskDefinitionVolumeFromOutputWithContext(ctx context.Context) TaskDefinitionVolumeFromOutput {
	return o
}

func (o TaskDefinitionVolumeFromOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeFrom) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o TaskDefinitionVolumeFromOutput) SourceContainer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskDefinitionVolumeFrom) *string { return v.SourceContainer }).(pulumi.StringPtrOutput)
}

type TaskDefinitionVolumeFromArrayOutput struct{ *pulumi.OutputState }

func (TaskDefinitionVolumeFromArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TaskDefinitionVolumeFrom)(nil)).Elem()
}

func (o TaskDefinitionVolumeFromArrayOutput) ToTaskDefinitionVolumeFromArrayOutput() TaskDefinitionVolumeFromArrayOutput {
	return o
}

func (o TaskDefinitionVolumeFromArrayOutput) ToTaskDefinitionVolumeFromArrayOutputWithContext(ctx context.Context) TaskDefinitionVolumeFromArrayOutput {
	return o
}

func (o TaskDefinitionVolumeFromArrayOutput) Index(i pulumi.IntInput) TaskDefinitionVolumeFromOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TaskDefinitionVolumeFrom {
		return vs[0].([]TaskDefinitionVolumeFrom)[vs[1].(int)]
	}).(TaskDefinitionVolumeFromOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EC2ServiceTaskDefinitionInput)(nil)).Elem(), EC2ServiceTaskDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EC2ServiceTaskDefinitionPtrInput)(nil)).Elem(), EC2ServiceTaskDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FargateServiceTaskDefinitionInput)(nil)).Elem(), FargateServiceTaskDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FargateServiceTaskDefinitionPtrInput)(nil)).Elem(), FargateServiceTaskDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionContainerDefinitionInput)(nil)).Elem(), TaskDefinitionContainerDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionContainerDefinitionPtrInput)(nil)).Elem(), TaskDefinitionContainerDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionContainerDefinitionMapInput)(nil)).Elem(), TaskDefinitionContainerDefinitionMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionContainerDependencyInput)(nil)).Elem(), TaskDefinitionContainerDependencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionContainerDependencyArrayInput)(nil)).Elem(), TaskDefinitionContainerDependencyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionDeviceInput)(nil)).Elem(), TaskDefinitionDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionDeviceArrayInput)(nil)).Elem(), TaskDefinitionDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionEnvironmentFileInput)(nil)).Elem(), TaskDefinitionEnvironmentFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionEnvironmentFileArrayInput)(nil)).Elem(), TaskDefinitionEnvironmentFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionFirelensConfigurationInput)(nil)).Elem(), TaskDefinitionFirelensConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionFirelensConfigurationPtrInput)(nil)).Elem(), TaskDefinitionFirelensConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionHealthCheckInput)(nil)).Elem(), TaskDefinitionHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionHealthCheckPtrInput)(nil)).Elem(), TaskDefinitionHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionHostEntryInput)(nil)).Elem(), TaskDefinitionHostEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionHostEntryArrayInput)(nil)).Elem(), TaskDefinitionHostEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionKernelCapabilitiesInput)(nil)).Elem(), TaskDefinitionKernelCapabilitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionKernelCapabilitiesPtrInput)(nil)).Elem(), TaskDefinitionKernelCapabilitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionKeyValuePairInput)(nil)).Elem(), TaskDefinitionKeyValuePairArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionKeyValuePairArrayInput)(nil)).Elem(), TaskDefinitionKeyValuePairArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionLinuxParametersInput)(nil)).Elem(), TaskDefinitionLinuxParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionLinuxParametersPtrInput)(nil)).Elem(), TaskDefinitionLinuxParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionLogConfigurationInput)(nil)).Elem(), TaskDefinitionLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionLogConfigurationPtrInput)(nil)).Elem(), TaskDefinitionLogConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionMountPointInput)(nil)).Elem(), TaskDefinitionMountPointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionMountPointArrayInput)(nil)).Elem(), TaskDefinitionMountPointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionPortMappingInput)(nil)).Elem(), TaskDefinitionPortMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionPortMappingArrayInput)(nil)).Elem(), TaskDefinitionPortMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionRepositoryCredentialsInput)(nil)).Elem(), TaskDefinitionRepositoryCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionRepositoryCredentialsPtrInput)(nil)).Elem(), TaskDefinitionRepositoryCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionResourceRequirementInput)(nil)).Elem(), TaskDefinitionResourceRequirementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionResourceRequirementArrayInput)(nil)).Elem(), TaskDefinitionResourceRequirementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionSecretInput)(nil)).Elem(), TaskDefinitionSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionSecretArrayInput)(nil)).Elem(), TaskDefinitionSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionSystemControlInput)(nil)).Elem(), TaskDefinitionSystemControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionSystemControlArrayInput)(nil)).Elem(), TaskDefinitionSystemControlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionTmpfsInput)(nil)).Elem(), TaskDefinitionTmpfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionTmpfsArrayInput)(nil)).Elem(), TaskDefinitionTmpfsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionUlimitInput)(nil)).Elem(), TaskDefinitionUlimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionUlimitArrayInput)(nil)).Elem(), TaskDefinitionUlimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeFromInput)(nil)).Elem(), TaskDefinitionVolumeFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskDefinitionVolumeFromArrayInput)(nil)).Elem(), TaskDefinitionVolumeFromArray{})
	pulumi.RegisterOutputType(EC2ServiceTaskDefinitionOutput{})
	pulumi.RegisterOutputType(EC2ServiceTaskDefinitionPtrOutput{})
	pulumi.RegisterOutputType(FargateServiceTaskDefinitionOutput{})
	pulumi.RegisterOutputType(FargateServiceTaskDefinitionPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionContainerDefinitionOutput{})
	pulumi.RegisterOutputType(TaskDefinitionContainerDefinitionPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionContainerDefinitionMapOutput{})
	pulumi.RegisterOutputType(TaskDefinitionContainerDependencyOutput{})
	pulumi.RegisterOutputType(TaskDefinitionContainerDependencyArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionDeviceOutput{})
	pulumi.RegisterOutputType(TaskDefinitionDeviceArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionEnvironmentFileOutput{})
	pulumi.RegisterOutputType(TaskDefinitionEnvironmentFileArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionFirelensConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionFirelensConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionHealthCheckOutput{})
	pulumi.RegisterOutputType(TaskDefinitionHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionHostEntryOutput{})
	pulumi.RegisterOutputType(TaskDefinitionHostEntryArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionKernelCapabilitiesOutput{})
	pulumi.RegisterOutputType(TaskDefinitionKernelCapabilitiesPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionKeyValuePairOutput{})
	pulumi.RegisterOutputType(TaskDefinitionKeyValuePairArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionLinuxParametersOutput{})
	pulumi.RegisterOutputType(TaskDefinitionLinuxParametersPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionLogConfigurationOutput{})
	pulumi.RegisterOutputType(TaskDefinitionLogConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionMountPointOutput{})
	pulumi.RegisterOutputType(TaskDefinitionMountPointArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionPortMappingOutput{})
	pulumi.RegisterOutputType(TaskDefinitionPortMappingArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionRepositoryCredentialsOutput{})
	pulumi.RegisterOutputType(TaskDefinitionRepositoryCredentialsPtrOutput{})
	pulumi.RegisterOutputType(TaskDefinitionResourceRequirementOutput{})
	pulumi.RegisterOutputType(TaskDefinitionResourceRequirementArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionSecretOutput{})
	pulumi.RegisterOutputType(TaskDefinitionSecretArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionSystemControlOutput{})
	pulumi.RegisterOutputType(TaskDefinitionSystemControlArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionTmpfsOutput{})
	pulumi.RegisterOutputType(TaskDefinitionTmpfsArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionUlimitOutput{})
	pulumi.RegisterOutputType(TaskDefinitionUlimitArrayOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeFromOutput{})
	pulumi.RegisterOutputType(TaskDefinitionVolumeFromArrayOutput{})
}
