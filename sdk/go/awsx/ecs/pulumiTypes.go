// *** WARNING: this file was generated by pulumi-gen-awsx. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ecs"
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/lb"
	"github.com/pulumi/pulumi-awsx/sdk/go/awsx/awsx"
)

// Create a TaskDefinition resource with the given unique name, arguments, and options.
// Creates required log-group and task & execution roles.
// Presents required Service load balancers if target group included in port mappings.
type EC2ServiceTaskDefinition struct {
	// Single container to make a TaskDefinition from.  Useful for simple cases where there aren't
	// multiple containers, especially when creating a TaskDefinition to call [run] on.
	//
	// Either [container] or [containers] must be provided.
	Container *TaskDefinitionContainerDefinition `pulumi:"container"`
	// All the containers to make a TaskDefinition from.  Useful when creating a Service that will
	// contain many containers within.
	//
	// Either [container] or [containers] must be provided.
	Containers map[string]TaskDefinitionContainerDefinition `pulumi:"containers"`
	// The number of cpu units used by the task. If not provided, a default will be computed based on the cumulative needs specified by [containerDefinitions]
	Cpu *string `pulumi:"cpu"`
	// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
	EphemeralStorage *ecs.TaskDefinitionEphemeralStorage `pulumi:"ephemeralStorage"`
	// The execution role that the Amazon ECS container agent and the Docker daemon can assume.
	// Will be created automatically if not defined.
	ExecutionRole *awsx.DefaultRoleWithPolicy `pulumi:"executionRole"`
	// An optional unique name for your task definition. If not specified, then a default will be created.
	Family *string `pulumi:"family"`
	// Configuration block(s) with Inference Accelerators settings. Detailed below.
	InferenceAccelerators []ecs.TaskDefinitionInferenceAccelerator `pulumi:"inferenceAccelerators"`
	// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
	IpcMode *string `pulumi:"ipcMode"`
	// A set of volume blocks that containers in your task may use.
	LogGroup *awsx.DefaultLogGroup `pulumi:"logGroup"`
	// The amount (in MiB) of memory used by the task.  If not provided, a default will be computed
	// based on the cumulative needs specified by [containerDefinitions]
	Memory *string `pulumi:"memory"`
	// Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
	NetworkMode *string `pulumi:"networkMode"`
	// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
	PidMode *string `pulumi:"pidMode"`
	// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`. Detailed below.
	PlacementConstraints []ecs.TaskDefinitionPlacementConstraint `pulumi:"placementConstraints"`
	// Configuration block for the App Mesh proxy. Detailed below.
	ProxyConfiguration *ecs.TaskDefinitionProxyConfiguration `pulumi:"proxyConfiguration"`
	// Configuration block for runtime_platform that containers in your task may use.
	RuntimePlatform *ecs.TaskDefinitionRuntimePlatform `pulumi:"runtimePlatform"`
	SkipDestroy     *bool                              `pulumi:"skipDestroy"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
	// IAM role that allows your Amazon ECS container task to make calls to other AWS services.
	// Will be created automatically if not defined.
	TaskRole *awsx.DefaultRoleWithPolicy `pulumi:"taskRole"`
	// Configuration block for volumes that containers in your task may use. Detailed below.
	Volumes []ecs.TaskDefinitionVolume `pulumi:"volumes"`
}

// Create a TaskDefinition resource with the given unique name, arguments, and options.
// Creates required log-group and task & execution roles.
// Presents required Service load balancers if target group included in port mappings.
type FargateServiceTaskDefinition struct {
	// Single container to make a TaskDefinition from.  Useful for simple cases where there aren't
	// multiple containers, especially when creating a TaskDefinition to call [run] on.
	//
	// Either [container] or [containers] must be provided.
	Container *TaskDefinitionContainerDefinition `pulumi:"container"`
	// All the containers to make a TaskDefinition from.  Useful when creating a Service that will
	// contain many containers within.
	//
	// Either [container] or [containers] must be provided.
	Containers map[string]TaskDefinitionContainerDefinition `pulumi:"containers"`
	// The number of cpu units used by the task. If not provided, a default will be computed based on the cumulative needs specified by [containerDefinitions]
	Cpu *string `pulumi:"cpu"`
	// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
	EphemeralStorage *ecs.TaskDefinitionEphemeralStorage `pulumi:"ephemeralStorage"`
	// The execution role that the Amazon ECS container agent and the Docker daemon can assume.
	// Will be created automatically if not defined.
	ExecutionRole *awsx.DefaultRoleWithPolicy `pulumi:"executionRole"`
	// An optional unique name for your task definition. If not specified, then a default will be created.
	Family *string `pulumi:"family"`
	// Configuration block(s) with Inference Accelerators settings. Detailed below.
	InferenceAccelerators []ecs.TaskDefinitionInferenceAccelerator `pulumi:"inferenceAccelerators"`
	// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
	IpcMode *string `pulumi:"ipcMode"`
	// A set of volume blocks that containers in your task may use.
	LogGroup *awsx.DefaultLogGroup `pulumi:"logGroup"`
	// The amount (in MiB) of memory used by the task.  If not provided, a default will be computed
	// based on the cumulative needs specified by [containerDefinitions]
	Memory *string `pulumi:"memory"`
	// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
	PidMode *string `pulumi:"pidMode"`
	// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`. Detailed below.
	PlacementConstraints []ecs.TaskDefinitionPlacementConstraint `pulumi:"placementConstraints"`
	// Configuration block for the App Mesh proxy. Detailed below.
	ProxyConfiguration *ecs.TaskDefinitionProxyConfiguration `pulumi:"proxyConfiguration"`
	// Configuration block for runtime_platform that containers in your task may use.
	RuntimePlatform *ecs.TaskDefinitionRuntimePlatform `pulumi:"runtimePlatform"`
	SkipDestroy     *bool                              `pulumi:"skipDestroy"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
	// IAM role that allows your Amazon ECS container task to make calls to other AWS services.
	// Will be created automatically if not defined.
	TaskRole *awsx.DefaultRoleWithPolicy `pulumi:"taskRole"`
	// Configuration block for volumes that containers in your task may use. Detailed below.
	Volumes []ecs.TaskDefinitionVolume `pulumi:"volumes"`
}

// List of container definitions that are passed to the Docker daemon on a container instance
type TaskDefinitionContainerDefinition struct {
	Command               []string                            `pulumi:"command"`
	Cpu                   *int                                `pulumi:"cpu"`
	DependsOn             []TaskDefinitionContainerDependency `pulumi:"dependsOn"`
	DisableNetworking     *bool                               `pulumi:"disableNetworking"`
	DnsSearchDomains      []string                            `pulumi:"dnsSearchDomains"`
	DnsServers            []string                            `pulumi:"dnsServers"`
	DockerLabels          interface{}                         `pulumi:"dockerLabels"`
	DockerSecurityOptions []string                            `pulumi:"dockerSecurityOptions"`
	EntryPoint            []string                            `pulumi:"entryPoint"`
	// The environment variables to pass to a container
	Environment []TaskDefinitionKeyValuePair `pulumi:"environment"`
	// The list of one or more files that contain the environment variables to pass to a container
	EnvironmentFiles      []TaskDefinitionEnvironmentFile      `pulumi:"environmentFiles"`
	Essential             *bool                                `pulumi:"essential"`
	ExtraHosts            []TaskDefinitionHostEntry            `pulumi:"extraHosts"`
	FirelensConfiguration *TaskDefinitionFirelensConfiguration `pulumi:"firelensConfiguration"`
	HealthCheck           *TaskDefinitionHealthCheck           `pulumi:"healthCheck"`
	Hostname              *string                              `pulumi:"hostname"`
	// The image used to start a container. This string is passed directly to the Docker daemon.
	Image            *string                         `pulumi:"image"`
	Interactive      *bool                           `pulumi:"interactive"`
	Links            []string                        `pulumi:"links"`
	LinuxParameters  *TaskDefinitionLinuxParameters  `pulumi:"linuxParameters"`
	LogConfiguration *TaskDefinitionLogConfiguration `pulumi:"logConfiguration"`
	// The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed.
	Memory            *int                       `pulumi:"memory"`
	MemoryReservation *int                       `pulumi:"memoryReservation"`
	MountPoints       []TaskDefinitionMountPoint `pulumi:"mountPoints"`
	// The name of a container. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed
	Name *string `pulumi:"name"`
	// Port mappings allow containers to access ports on the host container instance to send or receive traffic.
	PortMappings           []TaskDefinitionPortMapping          `pulumi:"portMappings"`
	Privileged             *bool                                `pulumi:"privileged"`
	PseudoTerminal         *bool                                `pulumi:"pseudoTerminal"`
	ReadonlyRootFilesystem *bool                                `pulumi:"readonlyRootFilesystem"`
	RepositoryCredentials  *TaskDefinitionRepositoryCredentials `pulumi:"repositoryCredentials"`
	ResourceRequirements   []TaskDefinitionResourceRequirement  `pulumi:"resourceRequirements"`
	Secrets                []TaskDefinitionSecret               `pulumi:"secrets"`
	StartTimeout           *int                                 `pulumi:"startTimeout"`
	StopTimeout            *int                                 `pulumi:"stopTimeout"`
	SystemControls         []TaskDefinitionSystemControl        `pulumi:"systemControls"`
	Ulimits                []TaskDefinitionUlimit               `pulumi:"ulimits"`
	User                   *string                              `pulumi:"user"`
	VolumesFrom            []TaskDefinitionVolumeFrom           `pulumi:"volumesFrom"`
	WorkingDirectory       *string                              `pulumi:"workingDirectory"`
}

type TaskDefinitionContainerDependency struct {
	Condition     *string `pulumi:"condition"`
	ContainerName *string `pulumi:"containerName"`
}

type TaskDefinitionDevice struct {
	ContainerPath *string  `pulumi:"containerPath"`
	HostPath      *string  `pulumi:"hostPath"`
	Permissions   []string `pulumi:"permissions"`
}

type TaskDefinitionEnvironmentFile struct {
	Type  *string `pulumi:"type"`
	Value *string `pulumi:"value"`
}

type TaskDefinitionFirelensConfiguration struct {
	Options interface{} `pulumi:"options"`
	Type    *string     `pulumi:"type"`
}

// The health check command and associated configuration parameters for the container.
type TaskDefinitionHealthCheck struct {
	// A string array representing the command that the container runs to determine if it is healthy.
	Command []string `pulumi:"command"`
	// The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.
	Interval *int `pulumi:"interval"`
	// The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is three retries.
	Retries *int `pulumi:"retries"`
	// The optional grace period within which to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You may specify between 0 and 300 seconds. The startPeriod is disabled by default.
	StartPeriod *int `pulumi:"startPeriod"`
	// The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5 seconds.
	Timeout *int `pulumi:"timeout"`
}

type TaskDefinitionHostEntry struct {
	Hostname  *string `pulumi:"hostname"`
	IpAddress *string `pulumi:"ipAddress"`
}

type TaskDefinitionKernelCapabilities struct {
	Add  []string `pulumi:"add"`
	Drop []string `pulumi:"drop"`
}

type TaskDefinitionKeyValuePair struct {
	Name  *string `pulumi:"name"`
	Value *string `pulumi:"value"`
}

type TaskDefinitionLinuxParameters struct {
	Capabilities       *TaskDefinitionKernelCapabilities `pulumi:"capabilities"`
	Devices            []TaskDefinitionDevice            `pulumi:"devices"`
	InitProcessEnabled *bool                             `pulumi:"initProcessEnabled"`
	MaxSwap            *int                              `pulumi:"maxSwap"`
	SharedMemorySize   *int                              `pulumi:"sharedMemorySize"`
	Swappiness         *int                              `pulumi:"swappiness"`
	Tmpfs              []TaskDefinitionTmpfs             `pulumi:"tmpfs"`
}

type TaskDefinitionLogConfiguration struct {
	LogDriver     string                 `pulumi:"logDriver"`
	Options       interface{}            `pulumi:"options"`
	SecretOptions []TaskDefinitionSecret `pulumi:"secretOptions"`
}

type TaskDefinitionMountPoint struct {
	ContainerPath *string `pulumi:"containerPath"`
	ReadOnly      *bool   `pulumi:"readOnly"`
	SourceVolume  *string `pulumi:"sourceVolume"`
}

type TaskDefinitionPortMapping struct {
	ContainerPort *int            `pulumi:"containerPort"`
	HostPort      *int            `pulumi:"hostPort"`
	Protocol      *string         `pulumi:"protocol"`
	TargetGroup   *lb.TargetGroup `pulumi:"targetGroup"`
}

type TaskDefinitionRepositoryCredentials struct {
	CredentialsParameter *string `pulumi:"credentialsParameter"`
}

type TaskDefinitionResourceRequirement struct {
	Type  string `pulumi:"type"`
	Value string `pulumi:"value"`
}

type TaskDefinitionSecret struct {
	Name      string `pulumi:"name"`
	ValueFrom string `pulumi:"valueFrom"`
}

type TaskDefinitionSystemControl struct {
	Namespace *string `pulumi:"namespace"`
	Value     *string `pulumi:"value"`
}

type TaskDefinitionTmpfs struct {
	ContainerPath *string  `pulumi:"containerPath"`
	MountOptions  []string `pulumi:"mountOptions"`
	Size          int      `pulumi:"size"`
}

type TaskDefinitionUlimit struct {
	HardLimit int    `pulumi:"hardLimit"`
	Name      string `pulumi:"name"`
	SoftLimit int    `pulumi:"softLimit"`
}

type TaskDefinitionVolumeFrom struct {
	ReadOnly        *bool   `pulumi:"readOnly"`
	SourceContainer *string `pulumi:"sourceContainer"`
}

func init() {
}
