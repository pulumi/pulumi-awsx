// Code generated by pulumi-gen-awsx DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigatewayv2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigatewayv2"
	"github.com/pulumi/pulumi-awsx/sdk/v2/go/awsx/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// Manages an Amazon API Gateway Version 2 domain name.
// More information can be found in the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html).
//
// > **Note:** This resource establishes ownership of and the TLS settings for
// a particular domain name. An API stage can be associated with the domain name using the `aws.apigatewayv2.ApiMapping` resource.
//
// ## Example Usage
// ### Basic
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigatewayv2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := apigatewayv2.NewDomainName(ctx, "example", &apigatewayv2.DomainNameArgs{
//				DomainName: pulumi.String("ws-api.example.com"),
//				DomainNameConfiguration: &apigatewayv2.DomainNameDomainNameConfigurationArgs{
//					CertificateArn: pulumi.Any(aws_acm_certificate.Example.Arn),
//					EndpointType:   pulumi.String("REGIONAL"),
//					SecurityPolicy: pulumi.String("TLS_1_2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Associated Route 53 Resource Record
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigatewayv2"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/route53"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleDomainName, err := apigatewayv2.NewDomainName(ctx, "exampleDomainName", &apigatewayv2.DomainNameArgs{
//				DomainName: pulumi.String("http-api.example.com"),
//				DomainNameConfiguration: &apigatewayv2.DomainNameDomainNameConfigurationArgs{
//					CertificateArn: pulumi.Any(aws_acm_certificate.Example.Arn),
//					EndpointType:   pulumi.String("REGIONAL"),
//					SecurityPolicy: pulumi.String("TLS_1_2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = route53.NewRecord(ctx, "exampleRecord", &route53.RecordArgs{
//				Name:   exampleDomainName.DomainName,
//				Type:   pulumi.String("A"),
//				ZoneId: pulumi.Any(aws_route53_zone.Example.Zone_id),
//				Aliases: route53.RecordAliasArray{
//					&route53.RecordAliasArgs{
//						Name: exampleDomainName.DomainNameConfiguration.ApplyT(func(domainNameConfiguration apigatewayv2.DomainNameDomainNameConfiguration) (*string, error) {
//							return &domainNameConfiguration.TargetDomainName, nil
//						}).(pulumi.StringPtrOutput),
//						ZoneId: exampleDomainName.DomainNameConfiguration.ApplyT(func(domainNameConfiguration apigatewayv2.DomainNameDomainNameConfiguration) (*string, error) {
//							return &domainNameConfiguration.HostedZoneId, nil
//						}).(pulumi.StringPtrOutput),
//						EvaluateTargetHealth: pulumi.Bool(false),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `aws_apigatewayv2_domain_name` using the domain name. For example:
//
// ```sh
//
//	$ pulumi import aws:apigatewayv2/domainName:DomainName example ws-api.example.com
//
// ```
type DomainConfiguration struct {
	// Domain name configuration. See below.
	DomainNameConfiguration *apigatewayv2.DomainNameDomainNameConfiguration `pulumi:"domainNameConfiguration"`
	// Mutual TLS authentication configuration for the domain name.
	MutualTlsAuthentication *apigatewayv2.DomainNameMutualTlsAuthentication `pulumi:"mutualTlsAuthentication"`
	// Map of tags to assign to the domain name. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags map[string]string `pulumi:"tags"`
}

// DomainConfigurationInput is an input type that accepts DomainConfigurationArgs and DomainConfigurationOutput values.
// You can construct a concrete instance of `DomainConfigurationInput` via:
//
//	DomainConfigurationArgs{...}
type DomainConfigurationInput interface {
	pulumi.Input

	ToDomainConfigurationOutput() DomainConfigurationOutput
	ToDomainConfigurationOutputWithContext(context.Context) DomainConfigurationOutput
}

// Manages an Amazon API Gateway Version 2 domain name.
// More information can be found in the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html).
//
// > **Note:** This resource establishes ownership of and the TLS settings for
// a particular domain name. An API stage can be associated with the domain name using the `aws.apigatewayv2.ApiMapping` resource.
//
// ## Example Usage
// ### Basic
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigatewayv2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := apigatewayv2.NewDomainName(ctx, "example", &apigatewayv2.DomainNameArgs{
//				DomainName: pulumi.String("ws-api.example.com"),
//				DomainNameConfiguration: &apigatewayv2.DomainNameDomainNameConfigurationArgs{
//					CertificateArn: pulumi.Any(aws_acm_certificate.Example.Arn),
//					EndpointType:   pulumi.String("REGIONAL"),
//					SecurityPolicy: pulumi.String("TLS_1_2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Associated Route 53 Resource Record
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigatewayv2"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/route53"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleDomainName, err := apigatewayv2.NewDomainName(ctx, "exampleDomainName", &apigatewayv2.DomainNameArgs{
//				DomainName: pulumi.String("http-api.example.com"),
//				DomainNameConfiguration: &apigatewayv2.DomainNameDomainNameConfigurationArgs{
//					CertificateArn: pulumi.Any(aws_acm_certificate.Example.Arn),
//					EndpointType:   pulumi.String("REGIONAL"),
//					SecurityPolicy: pulumi.String("TLS_1_2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = route53.NewRecord(ctx, "exampleRecord", &route53.RecordArgs{
//				Name:   exampleDomainName.DomainName,
//				Type:   pulumi.String("A"),
//				ZoneId: pulumi.Any(aws_route53_zone.Example.Zone_id),
//				Aliases: route53.RecordAliasArray{
//					&route53.RecordAliasArgs{
//						Name: exampleDomainName.DomainNameConfiguration.ApplyT(func(domainNameConfiguration apigatewayv2.DomainNameDomainNameConfiguration) (*string, error) {
//							return &domainNameConfiguration.TargetDomainName, nil
//						}).(pulumi.StringPtrOutput),
//						ZoneId: exampleDomainName.DomainNameConfiguration.ApplyT(func(domainNameConfiguration apigatewayv2.DomainNameDomainNameConfiguration) (*string, error) {
//							return &domainNameConfiguration.HostedZoneId, nil
//						}).(pulumi.StringPtrOutput),
//						EvaluateTargetHealth: pulumi.Bool(false),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `aws_apigatewayv2_domain_name` using the domain name. For example:
//
// ```sh
//
//	$ pulumi import aws:apigatewayv2/domainName:DomainName example ws-api.example.com
//
// ```
type DomainConfigurationArgs struct {
	// Domain name configuration. See below.
	DomainNameConfiguration apigatewayv2.DomainNameDomainNameConfigurationPtrInput `pulumi:"domainNameConfiguration"`
	// Mutual TLS authentication configuration for the domain name.
	MutualTlsAuthentication apigatewayv2.DomainNameMutualTlsAuthenticationPtrInput `pulumi:"mutualTlsAuthentication"`
	// Map of tags to assign to the domain name. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (DomainConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfiguration)(nil)).Elem()
}

func (i DomainConfigurationArgs) ToDomainConfigurationOutput() DomainConfigurationOutput {
	return i.ToDomainConfigurationOutputWithContext(context.Background())
}

func (i DomainConfigurationArgs) ToDomainConfigurationOutputWithContext(ctx context.Context) DomainConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigurationOutput)
}

func (i DomainConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[DomainConfiguration] {
	return pulumix.Output[DomainConfiguration]{
		OutputState: i.ToDomainConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i DomainConfigurationArgs) ToDomainConfigurationPtrOutput() DomainConfigurationPtrOutput {
	return i.ToDomainConfigurationPtrOutputWithContext(context.Background())
}

func (i DomainConfigurationArgs) ToDomainConfigurationPtrOutputWithContext(ctx context.Context) DomainConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigurationOutput).ToDomainConfigurationPtrOutputWithContext(ctx)
}

// DomainConfigurationPtrInput is an input type that accepts DomainConfigurationArgs, DomainConfigurationPtr and DomainConfigurationPtrOutput values.
// You can construct a concrete instance of `DomainConfigurationPtrInput` via:
//
//	        DomainConfigurationArgs{...}
//
//	or:
//
//	        nil
type DomainConfigurationPtrInput interface {
	pulumi.Input

	ToDomainConfigurationPtrOutput() DomainConfigurationPtrOutput
	ToDomainConfigurationPtrOutputWithContext(context.Context) DomainConfigurationPtrOutput
}

type domainConfigurationPtrType DomainConfigurationArgs

func DomainConfigurationPtr(v *DomainConfigurationArgs) DomainConfigurationPtrInput {
	return (*domainConfigurationPtrType)(v)
}

func (*domainConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConfiguration)(nil)).Elem()
}

func (i *domainConfigurationPtrType) ToDomainConfigurationPtrOutput() DomainConfigurationPtrOutput {
	return i.ToDomainConfigurationPtrOutputWithContext(context.Background())
}

func (i *domainConfigurationPtrType) ToDomainConfigurationPtrOutputWithContext(ctx context.Context) DomainConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainConfigurationPtrOutput)
}

func (i *domainConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*DomainConfiguration] {
	return pulumix.Output[*DomainConfiguration]{
		OutputState: i.ToDomainConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Manages an Amazon API Gateway Version 2 domain name.
// More information can be found in the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html).
//
// > **Note:** This resource establishes ownership of and the TLS settings for
// a particular domain name. An API stage can be associated with the domain name using the `aws.apigatewayv2.ApiMapping` resource.
//
// ## Example Usage
// ### Basic
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigatewayv2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := apigatewayv2.NewDomainName(ctx, "example", &apigatewayv2.DomainNameArgs{
//				DomainName: pulumi.String("ws-api.example.com"),
//				DomainNameConfiguration: &apigatewayv2.DomainNameDomainNameConfigurationArgs{
//					CertificateArn: pulumi.Any(aws_acm_certificate.Example.Arn),
//					EndpointType:   pulumi.String("REGIONAL"),
//					SecurityPolicy: pulumi.String("TLS_1_2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Associated Route 53 Resource Record
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/apigatewayv2"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/route53"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleDomainName, err := apigatewayv2.NewDomainName(ctx, "exampleDomainName", &apigatewayv2.DomainNameArgs{
//				DomainName: pulumi.String("http-api.example.com"),
//				DomainNameConfiguration: &apigatewayv2.DomainNameDomainNameConfigurationArgs{
//					CertificateArn: pulumi.Any(aws_acm_certificate.Example.Arn),
//					EndpointType:   pulumi.String("REGIONAL"),
//					SecurityPolicy: pulumi.String("TLS_1_2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = route53.NewRecord(ctx, "exampleRecord", &route53.RecordArgs{
//				Name:   exampleDomainName.DomainName,
//				Type:   pulumi.String("A"),
//				ZoneId: pulumi.Any(aws_route53_zone.Example.Zone_id),
//				Aliases: route53.RecordAliasArray{
//					&route53.RecordAliasArgs{
//						Name: exampleDomainName.DomainNameConfiguration.ApplyT(func(domainNameConfiguration apigatewayv2.DomainNameDomainNameConfiguration) (*string, error) {
//							return &domainNameConfiguration.TargetDomainName, nil
//						}).(pulumi.StringPtrOutput),
//						ZoneId: exampleDomainName.DomainNameConfiguration.ApplyT(func(domainNameConfiguration apigatewayv2.DomainNameDomainNameConfiguration) (*string, error) {
//							return &domainNameConfiguration.HostedZoneId, nil
//						}).(pulumi.StringPtrOutput),
//						EvaluateTargetHealth: pulumi.Bool(false),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `aws_apigatewayv2_domain_name` using the domain name. For example:
//
// ```sh
//
//	$ pulumi import aws:apigatewayv2/domainName:DomainName example ws-api.example.com
//
// ```
type DomainConfigurationOutput struct{ *pulumi.OutputState }

func (DomainConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainConfiguration)(nil)).Elem()
}

func (o DomainConfigurationOutput) ToDomainConfigurationOutput() DomainConfigurationOutput {
	return o
}

func (o DomainConfigurationOutput) ToDomainConfigurationOutputWithContext(ctx context.Context) DomainConfigurationOutput {
	return o
}

func (o DomainConfigurationOutput) ToDomainConfigurationPtrOutput() DomainConfigurationPtrOutput {
	return o.ToDomainConfigurationPtrOutputWithContext(context.Background())
}

func (o DomainConfigurationOutput) ToDomainConfigurationPtrOutputWithContext(ctx context.Context) DomainConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainConfiguration) *DomainConfiguration {
		return &v
	}).(DomainConfigurationPtrOutput)
}

func (o DomainConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DomainConfiguration] {
	return pulumix.Output[DomainConfiguration]{
		OutputState: o.OutputState,
	}
}

// Domain name configuration. See below.
func (o DomainConfigurationOutput) DomainNameConfiguration() apigatewayv2.DomainNameDomainNameConfigurationPtrOutput {
	return o.ApplyT(func(v DomainConfiguration) *apigatewayv2.DomainNameDomainNameConfiguration {
		return v.DomainNameConfiguration
	}).(apigatewayv2.DomainNameDomainNameConfigurationPtrOutput)
}

// Mutual TLS authentication configuration for the domain name.
func (o DomainConfigurationOutput) MutualTlsAuthentication() apigatewayv2.DomainNameMutualTlsAuthenticationPtrOutput {
	return o.ApplyT(func(v DomainConfiguration) *apigatewayv2.DomainNameMutualTlsAuthentication {
		return v.MutualTlsAuthentication
	}).(apigatewayv2.DomainNameMutualTlsAuthenticationPtrOutput)
}

// Map of tags to assign to the domain name. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o DomainConfigurationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DomainConfiguration) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type DomainConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DomainConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainConfiguration)(nil)).Elem()
}

func (o DomainConfigurationPtrOutput) ToDomainConfigurationPtrOutput() DomainConfigurationPtrOutput {
	return o
}

func (o DomainConfigurationPtrOutput) ToDomainConfigurationPtrOutputWithContext(ctx context.Context) DomainConfigurationPtrOutput {
	return o
}

func (o DomainConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainConfiguration] {
	return pulumix.Output[*DomainConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o DomainConfigurationPtrOutput) Elem() DomainConfigurationOutput {
	return o.ApplyT(func(v *DomainConfiguration) DomainConfiguration {
		if v != nil {
			return *v
		}
		var ret DomainConfiguration
		return ret
	}).(DomainConfigurationOutput)
}

// Domain name configuration. See below.
func (o DomainConfigurationPtrOutput) DomainNameConfiguration() apigatewayv2.DomainNameDomainNameConfigurationPtrOutput {
	return o.ApplyT(func(v *DomainConfiguration) *apigatewayv2.DomainNameDomainNameConfiguration {
		if v == nil {
			return nil
		}
		return v.DomainNameConfiguration
	}).(apigatewayv2.DomainNameDomainNameConfigurationPtrOutput)
}

// Mutual TLS authentication configuration for the domain name.
func (o DomainConfigurationPtrOutput) MutualTlsAuthentication() apigatewayv2.DomainNameMutualTlsAuthenticationPtrOutput {
	return o.ApplyT(func(v *DomainConfiguration) *apigatewayv2.DomainNameMutualTlsAuthentication {
		if v == nil {
			return nil
		}
		return v.MutualTlsAuthentication
	}).(apigatewayv2.DomainNameMutualTlsAuthenticationPtrOutput)
}

// Map of tags to assign to the domain name. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
func (o DomainConfigurationPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DomainConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type DomainMapping struct {
	// Configuration of the domain name to create. Cannot be specified together with `domainId`.
	DomainConfiguration *DomainConfiguration `pulumi:"domainConfiguration"`
	// Identifier of an existing domain. Cannot be specified together with `domainConfiguration`.
	DomainId *string `pulumi:"domainId"`
}

// DomainMappingInput is an input type that accepts DomainMappingArgs and DomainMappingOutput values.
// You can construct a concrete instance of `DomainMappingInput` via:
//
//	DomainMappingArgs{...}
type DomainMappingInput interface {
	pulumi.Input

	ToDomainMappingOutput() DomainMappingOutput
	ToDomainMappingOutputWithContext(context.Context) DomainMappingOutput
}

type DomainMappingArgs struct {
	// Configuration of the domain name to create. Cannot be specified together with `domainId`.
	DomainConfiguration DomainConfigurationPtrInput `pulumi:"domainConfiguration"`
	// Identifier of an existing domain. Cannot be specified together with `domainConfiguration`.
	DomainId pulumi.StringPtrInput `pulumi:"domainId"`
}

func (DomainMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainMapping)(nil)).Elem()
}

func (i DomainMappingArgs) ToDomainMappingOutput() DomainMappingOutput {
	return i.ToDomainMappingOutputWithContext(context.Background())
}

func (i DomainMappingArgs) ToDomainMappingOutputWithContext(ctx context.Context) DomainMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainMappingOutput)
}

func (i DomainMappingArgs) ToOutput(ctx context.Context) pulumix.Output[DomainMapping] {
	return pulumix.Output[DomainMapping]{
		OutputState: i.ToDomainMappingOutputWithContext(ctx).OutputState,
	}
}

// DomainMappingMapInput is an input type that accepts DomainMappingMap and DomainMappingMapOutput values.
// You can construct a concrete instance of `DomainMappingMapInput` via:
//
//	DomainMappingMap{ "key": DomainMappingArgs{...} }
type DomainMappingMapInput interface {
	pulumi.Input

	ToDomainMappingMapOutput() DomainMappingMapOutput
	ToDomainMappingMapOutputWithContext(context.Context) DomainMappingMapOutput
}

type DomainMappingMap map[string]DomainMappingInput

func (DomainMappingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DomainMapping)(nil)).Elem()
}

func (i DomainMappingMap) ToDomainMappingMapOutput() DomainMappingMapOutput {
	return i.ToDomainMappingMapOutputWithContext(context.Background())
}

func (i DomainMappingMap) ToDomainMappingMapOutputWithContext(ctx context.Context) DomainMappingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainMappingMapOutput)
}

func (i DomainMappingMap) ToOutput(ctx context.Context) pulumix.Output[map[string]DomainMapping] {
	return pulumix.Output[map[string]DomainMapping]{
		OutputState: i.ToDomainMappingMapOutputWithContext(ctx).OutputState,
	}
}

type DomainMappingOutput struct{ *pulumi.OutputState }

func (DomainMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainMapping)(nil)).Elem()
}

func (o DomainMappingOutput) ToDomainMappingOutput() DomainMappingOutput {
	return o
}

func (o DomainMappingOutput) ToDomainMappingOutputWithContext(ctx context.Context) DomainMappingOutput {
	return o
}

func (o DomainMappingOutput) ToOutput(ctx context.Context) pulumix.Output[DomainMapping] {
	return pulumix.Output[DomainMapping]{
		OutputState: o.OutputState,
	}
}

// Configuration of the domain name to create. Cannot be specified together with `domainId`.
func (o DomainMappingOutput) DomainConfiguration() DomainConfigurationPtrOutput {
	return o.ApplyT(func(v DomainMapping) *DomainConfiguration { return v.DomainConfiguration }).(DomainConfigurationPtrOutput)
}

// Identifier of an existing domain. Cannot be specified together with `domainConfiguration`.
func (o DomainMappingOutput) DomainId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainMapping) *string { return v.DomainId }).(pulumi.StringPtrOutput)
}

type DomainMappingMapOutput struct{ *pulumi.OutputState }

func (DomainMappingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DomainMapping)(nil)).Elem()
}

func (o DomainMappingMapOutput) ToDomainMappingMapOutput() DomainMappingMapOutput {
	return o
}

func (o DomainMappingMapOutput) ToDomainMappingMapOutputWithContext(ctx context.Context) DomainMappingMapOutput {
	return o
}

func (o DomainMappingMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]DomainMapping] {
	return pulumix.Output[map[string]DomainMapping]{
		OutputState: o.OutputState,
	}
}

func (o DomainMappingMapOutput) MapIndex(k pulumi.StringInput) DomainMappingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DomainMapping {
		return vs[0].(map[string]DomainMapping)[vs[1].(string)]
	}).(DomainMappingOutput)
}

type HttpAuthorizer struct {
}

// HttpAuthorizerInput is an input type that accepts HttpAuthorizerArgs and HttpAuthorizerOutput values.
// You can construct a concrete instance of `HttpAuthorizerInput` via:
//
//	HttpAuthorizerArgs{...}
type HttpAuthorizerInput interface {
	pulumi.Input

	ToHttpAuthorizerOutput() HttpAuthorizerOutput
	ToHttpAuthorizerOutputWithContext(context.Context) HttpAuthorizerOutput
}

type HttpAuthorizerArgs struct {
}

func (HttpAuthorizerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpAuthorizer)(nil)).Elem()
}

func (i HttpAuthorizerArgs) ToHttpAuthorizerOutput() HttpAuthorizerOutput {
	return i.ToHttpAuthorizerOutputWithContext(context.Background())
}

func (i HttpAuthorizerArgs) ToHttpAuthorizerOutputWithContext(ctx context.Context) HttpAuthorizerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpAuthorizerOutput)
}

func (i HttpAuthorizerArgs) ToOutput(ctx context.Context) pulumix.Output[HttpAuthorizer] {
	return pulumix.Output[HttpAuthorizer]{
		OutputState: i.ToHttpAuthorizerOutputWithContext(ctx).OutputState,
	}
}

// HttpAuthorizerMapInput is an input type that accepts HttpAuthorizerMap and HttpAuthorizerMapOutput values.
// You can construct a concrete instance of `HttpAuthorizerMapInput` via:
//
//	HttpAuthorizerMap{ "key": HttpAuthorizerArgs{...} }
type HttpAuthorizerMapInput interface {
	pulumi.Input

	ToHttpAuthorizerMapOutput() HttpAuthorizerMapOutput
	ToHttpAuthorizerMapOutputWithContext(context.Context) HttpAuthorizerMapOutput
}

type HttpAuthorizerMap map[string]HttpAuthorizerInput

func (HttpAuthorizerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]HttpAuthorizer)(nil)).Elem()
}

func (i HttpAuthorizerMap) ToHttpAuthorizerMapOutput() HttpAuthorizerMapOutput {
	return i.ToHttpAuthorizerMapOutputWithContext(context.Background())
}

func (i HttpAuthorizerMap) ToHttpAuthorizerMapOutputWithContext(ctx context.Context) HttpAuthorizerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpAuthorizerMapOutput)
}

func (i HttpAuthorizerMap) ToOutput(ctx context.Context) pulumix.Output[map[string]HttpAuthorizer] {
	return pulumix.Output[map[string]HttpAuthorizer]{
		OutputState: i.ToHttpAuthorizerMapOutputWithContext(ctx).OutputState,
	}
}

type HttpAuthorizerOutput struct{ *pulumi.OutputState }

func (HttpAuthorizerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpAuthorizer)(nil)).Elem()
}

func (o HttpAuthorizerOutput) ToHttpAuthorizerOutput() HttpAuthorizerOutput {
	return o
}

func (o HttpAuthorizerOutput) ToHttpAuthorizerOutputWithContext(ctx context.Context) HttpAuthorizerOutput {
	return o
}

func (o HttpAuthorizerOutput) ToOutput(ctx context.Context) pulumix.Output[HttpAuthorizer] {
	return pulumix.Output[HttpAuthorizer]{
		OutputState: o.OutputState,
	}
}

type HttpAuthorizerMapOutput struct{ *pulumi.OutputState }

func (HttpAuthorizerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]HttpAuthorizer)(nil)).Elem()
}

func (o HttpAuthorizerMapOutput) ToHttpAuthorizerMapOutput() HttpAuthorizerMapOutput {
	return o
}

func (o HttpAuthorizerMapOutput) ToHttpAuthorizerMapOutputWithContext(ctx context.Context) HttpAuthorizerMapOutput {
	return o
}

func (o HttpAuthorizerMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]HttpAuthorizer] {
	return pulumix.Output[map[string]HttpAuthorizer]{
		OutputState: o.OutputState,
	}
}

func (o HttpAuthorizerMapOutput) MapIndex(k pulumi.StringInput) HttpAuthorizerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) HttpAuthorizer {
		return vs[0].(map[string]HttpAuthorizer)[vs[1].(string)]
	}).(HttpAuthorizerOutput)
}

type HttpIntegration struct {
}

// HttpIntegrationInput is an input type that accepts HttpIntegrationArgs and HttpIntegrationOutput values.
// You can construct a concrete instance of `HttpIntegrationInput` via:
//
//	HttpIntegrationArgs{...}
type HttpIntegrationInput interface {
	pulumi.Input

	ToHttpIntegrationOutput() HttpIntegrationOutput
	ToHttpIntegrationOutputWithContext(context.Context) HttpIntegrationOutput
}

type HttpIntegrationArgs struct {
}

func (HttpIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpIntegration)(nil)).Elem()
}

func (i HttpIntegrationArgs) ToHttpIntegrationOutput() HttpIntegrationOutput {
	return i.ToHttpIntegrationOutputWithContext(context.Background())
}

func (i HttpIntegrationArgs) ToHttpIntegrationOutputWithContext(ctx context.Context) HttpIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpIntegrationOutput)
}

func (i HttpIntegrationArgs) ToOutput(ctx context.Context) pulumix.Output[HttpIntegration] {
	return pulumix.Output[HttpIntegration]{
		OutputState: i.ToHttpIntegrationOutputWithContext(ctx).OutputState,
	}
}

// HttpIntegrationMapInput is an input type that accepts HttpIntegrationMap and HttpIntegrationMapOutput values.
// You can construct a concrete instance of `HttpIntegrationMapInput` via:
//
//	HttpIntegrationMap{ "key": HttpIntegrationArgs{...} }
type HttpIntegrationMapInput interface {
	pulumi.Input

	ToHttpIntegrationMapOutput() HttpIntegrationMapOutput
	ToHttpIntegrationMapOutputWithContext(context.Context) HttpIntegrationMapOutput
}

type HttpIntegrationMap map[string]HttpIntegrationInput

func (HttpIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]HttpIntegration)(nil)).Elem()
}

func (i HttpIntegrationMap) ToHttpIntegrationMapOutput() HttpIntegrationMapOutput {
	return i.ToHttpIntegrationMapOutputWithContext(context.Background())
}

func (i HttpIntegrationMap) ToHttpIntegrationMapOutputWithContext(ctx context.Context) HttpIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpIntegrationMapOutput)
}

func (i HttpIntegrationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]HttpIntegration] {
	return pulumix.Output[map[string]HttpIntegration]{
		OutputState: i.ToHttpIntegrationMapOutputWithContext(ctx).OutputState,
	}
}

type HttpIntegrationOutput struct{ *pulumi.OutputState }

func (HttpIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpIntegration)(nil)).Elem()
}

func (o HttpIntegrationOutput) ToHttpIntegrationOutput() HttpIntegrationOutput {
	return o
}

func (o HttpIntegrationOutput) ToHttpIntegrationOutputWithContext(ctx context.Context) HttpIntegrationOutput {
	return o
}

func (o HttpIntegrationOutput) ToOutput(ctx context.Context) pulumix.Output[HttpIntegration] {
	return pulumix.Output[HttpIntegration]{
		OutputState: o.OutputState,
	}
}

type HttpIntegrationMapOutput struct{ *pulumi.OutputState }

func (HttpIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]HttpIntegration)(nil)).Elem()
}

func (o HttpIntegrationMapOutput) ToHttpIntegrationMapOutput() HttpIntegrationMapOutput {
	return o
}

func (o HttpIntegrationMapOutput) ToHttpIntegrationMapOutputWithContext(ctx context.Context) HttpIntegrationMapOutput {
	return o
}

func (o HttpIntegrationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]HttpIntegration] {
	return pulumix.Output[map[string]HttpIntegration]{
		OutputState: o.OutputState,
	}
}

func (o HttpIntegrationMapOutput) MapIndex(k pulumi.StringInput) HttpIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) HttpIntegration {
		return vs[0].(map[string]HttpIntegration)[vs[1].(string)]
	}).(HttpIntegrationOutput)
}

type HttpRoute struct {
	// The key of the target authorizer for the route specified in the `authorizers` property. This is used to automatically calculate the `authorizerId` property of the route.
	Authorizer *string `pulumi:"authorizer"`
	// The key of the target integration for the route specified in the `integrations` property. This is used to automatically calculate the `target` property of the route. One of `integration` or `target` must be specified.
	Integration *string `pulumi:"integration"`
}

// HttpRouteInput is an input type that accepts HttpRouteArgs and HttpRouteOutput values.
// You can construct a concrete instance of `HttpRouteInput` via:
//
//	HttpRouteArgs{...}
type HttpRouteInput interface {
	pulumi.Input

	ToHttpRouteOutput() HttpRouteOutput
	ToHttpRouteOutputWithContext(context.Context) HttpRouteOutput
}

type HttpRouteArgs struct {
	// The key of the target authorizer for the route specified in the `authorizers` property. This is used to automatically calculate the `authorizerId` property of the route.
	Authorizer pulumi.StringPtrInput `pulumi:"authorizer"`
	// The key of the target integration for the route specified in the `integrations` property. This is used to automatically calculate the `target` property of the route. One of `integration` or `target` must be specified.
	Integration pulumi.StringPtrInput `pulumi:"integration"`
}

func (HttpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRoute)(nil)).Elem()
}

func (i HttpRouteArgs) ToHttpRouteOutput() HttpRouteOutput {
	return i.ToHttpRouteOutputWithContext(context.Background())
}

func (i HttpRouteArgs) ToHttpRouteOutputWithContext(ctx context.Context) HttpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteOutput)
}

func (i HttpRouteArgs) ToOutput(ctx context.Context) pulumix.Output[HttpRoute] {
	return pulumix.Output[HttpRoute]{
		OutputState: i.ToHttpRouteOutputWithContext(ctx).OutputState,
	}
}

// HttpRouteMapInput is an input type that accepts HttpRouteMap and HttpRouteMapOutput values.
// You can construct a concrete instance of `HttpRouteMapInput` via:
//
//	HttpRouteMap{ "key": HttpRouteArgs{...} }
type HttpRouteMapInput interface {
	pulumi.Input

	ToHttpRouteMapOutput() HttpRouteMapOutput
	ToHttpRouteMapOutputWithContext(context.Context) HttpRouteMapOutput
}

type HttpRouteMap map[string]HttpRouteInput

func (HttpRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]HttpRoute)(nil)).Elem()
}

func (i HttpRouteMap) ToHttpRouteMapOutput() HttpRouteMapOutput {
	return i.ToHttpRouteMapOutputWithContext(context.Background())
}

func (i HttpRouteMap) ToHttpRouteMapOutputWithContext(ctx context.Context) HttpRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteMapOutput)
}

func (i HttpRouteMap) ToOutput(ctx context.Context) pulumix.Output[map[string]HttpRoute] {
	return pulumix.Output[map[string]HttpRoute]{
		OutputState: i.ToHttpRouteMapOutputWithContext(ctx).OutputState,
	}
}

type HttpRouteOutput struct{ *pulumi.OutputState }

func (HttpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRoute)(nil)).Elem()
}

func (o HttpRouteOutput) ToHttpRouteOutput() HttpRouteOutput {
	return o
}

func (o HttpRouteOutput) ToHttpRouteOutputWithContext(ctx context.Context) HttpRouteOutput {
	return o
}

func (o HttpRouteOutput) ToOutput(ctx context.Context) pulumix.Output[HttpRoute] {
	return pulumix.Output[HttpRoute]{
		OutputState: o.OutputState,
	}
}

// The key of the target authorizer for the route specified in the `authorizers` property. This is used to automatically calculate the `authorizerId` property of the route.
func (o HttpRouteOutput) Authorizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRoute) *string { return v.Authorizer }).(pulumi.StringPtrOutput)
}

// The key of the target integration for the route specified in the `integrations` property. This is used to automatically calculate the `target` property of the route. One of `integration` or `target` must be specified.
func (o HttpRouteOutput) Integration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRoute) *string { return v.Integration }).(pulumi.StringPtrOutput)
}

type HttpRouteMapOutput struct{ *pulumi.OutputState }

func (HttpRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]HttpRoute)(nil)).Elem()
}

func (o HttpRouteMapOutput) ToHttpRouteMapOutput() HttpRouteMapOutput {
	return o
}

func (o HttpRouteMapOutput) ToHttpRouteMapOutputWithContext(ctx context.Context) HttpRouteMapOutput {
	return o
}

func (o HttpRouteMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]HttpRoute] {
	return pulumix.Output[map[string]HttpRoute]{
		OutputState: o.OutputState,
	}
}

func (o HttpRouteMapOutput) MapIndex(k pulumi.StringInput) HttpRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) HttpRoute {
		return vs[0].(map[string]HttpRoute)[vs[1].(string)]
	}).(HttpRouteOutput)
}

type HttpStage struct {
}

// HttpStageInput is an input type that accepts HttpStageArgs and HttpStageOutput values.
// You can construct a concrete instance of `HttpStageInput` via:
//
//	HttpStageArgs{...}
type HttpStageInput interface {
	pulumi.Input

	ToHttpStageOutput() HttpStageOutput
	ToHttpStageOutputWithContext(context.Context) HttpStageOutput
}

type HttpStageArgs struct {
}

func (HttpStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpStage)(nil)).Elem()
}

func (i HttpStageArgs) ToHttpStageOutput() HttpStageOutput {
	return i.ToHttpStageOutputWithContext(context.Background())
}

func (i HttpStageArgs) ToHttpStageOutputWithContext(ctx context.Context) HttpStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpStageOutput)
}

func (i HttpStageArgs) ToOutput(ctx context.Context) pulumix.Output[HttpStage] {
	return pulumix.Output[HttpStage]{
		OutputState: i.ToHttpStageOutputWithContext(ctx).OutputState,
	}
}

// HttpStageMapInput is an input type that accepts HttpStageMap and HttpStageMapOutput values.
// You can construct a concrete instance of `HttpStageMapInput` via:
//
//	HttpStageMap{ "key": HttpStageArgs{...} }
type HttpStageMapInput interface {
	pulumi.Input

	ToHttpStageMapOutput() HttpStageMapOutput
	ToHttpStageMapOutputWithContext(context.Context) HttpStageMapOutput
}

type HttpStageMap map[string]HttpStageInput

func (HttpStageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]HttpStage)(nil)).Elem()
}

func (i HttpStageMap) ToHttpStageMapOutput() HttpStageMapOutput {
	return i.ToHttpStageMapOutputWithContext(context.Background())
}

func (i HttpStageMap) ToHttpStageMapOutputWithContext(ctx context.Context) HttpStageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpStageMapOutput)
}

func (i HttpStageMap) ToOutput(ctx context.Context) pulumix.Output[map[string]HttpStage] {
	return pulumix.Output[map[string]HttpStage]{
		OutputState: i.ToHttpStageMapOutputWithContext(ctx).OutputState,
	}
}

type HttpStageOutput struct{ *pulumi.OutputState }

func (HttpStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpStage)(nil)).Elem()
}

func (o HttpStageOutput) ToHttpStageOutput() HttpStageOutput {
	return o
}

func (o HttpStageOutput) ToHttpStageOutputWithContext(ctx context.Context) HttpStageOutput {
	return o
}

func (o HttpStageOutput) ToOutput(ctx context.Context) pulumix.Output[HttpStage] {
	return pulumix.Output[HttpStage]{
		OutputState: o.OutputState,
	}
}

type HttpStageMapOutput struct{ *pulumi.OutputState }

func (HttpStageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]HttpStage)(nil)).Elem()
}

func (o HttpStageMapOutput) ToHttpStageMapOutput() HttpStageMapOutput {
	return o
}

func (o HttpStageMapOutput) ToHttpStageMapOutputWithContext(ctx context.Context) HttpStageMapOutput {
	return o
}

func (o HttpStageMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]HttpStage] {
	return pulumix.Output[map[string]HttpStage]{
		OutputState: o.OutputState,
	}
}

func (o HttpStageMapOutput) MapIndex(k pulumi.StringInput) HttpStageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) HttpStage {
		return vs[0].(map[string]HttpStage)[vs[1].(string)]
	}).(HttpStageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigurationInput)(nil)).Elem(), DomainConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainConfigurationPtrInput)(nil)).Elem(), DomainConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainMappingInput)(nil)).Elem(), DomainMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainMappingMapInput)(nil)).Elem(), DomainMappingMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpAuthorizerInput)(nil)).Elem(), HttpAuthorizerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpAuthorizerMapInput)(nil)).Elem(), HttpAuthorizerMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpIntegrationInput)(nil)).Elem(), HttpIntegrationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpIntegrationMapInput)(nil)).Elem(), HttpIntegrationMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteInput)(nil)).Elem(), HttpRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteMapInput)(nil)).Elem(), HttpRouteMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpStageInput)(nil)).Elem(), HttpStageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpStageMapInput)(nil)).Elem(), HttpStageMap{})
	pulumi.RegisterOutputType(DomainConfigurationOutput{})
	pulumi.RegisterOutputType(DomainConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DomainMappingOutput{})
	pulumi.RegisterOutputType(DomainMappingMapOutput{})
	pulumi.RegisterOutputType(HttpAuthorizerOutput{})
	pulumi.RegisterOutputType(HttpAuthorizerMapOutput{})
	pulumi.RegisterOutputType(HttpIntegrationOutput{})
	pulumi.RegisterOutputType(HttpIntegrationMapOutput{})
	pulumi.RegisterOutputType(HttpRouteOutput{})
	pulumi.RegisterOutputType(HttpRouteMapOutput{})
	pulumi.RegisterOutputType(HttpStageOutput{})
	pulumi.RegisterOutputType(HttpStageMapOutput{})
}
