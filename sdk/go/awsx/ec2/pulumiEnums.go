// Code generated by pulumi-gen-awsx DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// A strategy for creating NAT Gateways for private subnets within a VPC.
type NatGatewayStrategy string

const (
	// Do not create any NAT Gateways. Resources in private subnets will not be able to access the internet.
	NatGatewayStrategyNone = NatGatewayStrategy("None")
	// Create a single NAT Gateway for the entire VPC. This configuration is not recommended for production infrastructure as it creates a single point of failure.
	NatGatewayStrategySingle = NatGatewayStrategy("Single")
	// Create a NAT Gateway in each availability zone. This is the recommended configuration for production infrastructure.
	NatGatewayStrategyOnePerAz = NatGatewayStrategy("OnePerAz")
)

func (NatGatewayStrategy) ElementType() reflect.Type {
	return reflect.TypeOf((*NatGatewayStrategy)(nil)).Elem()
}

func (e NatGatewayStrategy) ToNatGatewayStrategyOutput() NatGatewayStrategyOutput {
	return pulumi.ToOutput(e).(NatGatewayStrategyOutput)
}

func (e NatGatewayStrategy) ToNatGatewayStrategyOutputWithContext(ctx context.Context) NatGatewayStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NatGatewayStrategyOutput)
}

func (e NatGatewayStrategy) ToNatGatewayStrategyPtrOutput() NatGatewayStrategyPtrOutput {
	return e.ToNatGatewayStrategyPtrOutputWithContext(context.Background())
}

func (e NatGatewayStrategy) ToNatGatewayStrategyPtrOutputWithContext(ctx context.Context) NatGatewayStrategyPtrOutput {
	return NatGatewayStrategy(e).ToNatGatewayStrategyOutputWithContext(ctx).ToNatGatewayStrategyPtrOutputWithContext(ctx)
}

func (e NatGatewayStrategy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NatGatewayStrategy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NatGatewayStrategy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NatGatewayStrategy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NatGatewayStrategyOutput struct{ *pulumi.OutputState }

func (NatGatewayStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NatGatewayStrategy)(nil)).Elem()
}

func (o NatGatewayStrategyOutput) ToNatGatewayStrategyOutput() NatGatewayStrategyOutput {
	return o
}

func (o NatGatewayStrategyOutput) ToNatGatewayStrategyOutputWithContext(ctx context.Context) NatGatewayStrategyOutput {
	return o
}

func (o NatGatewayStrategyOutput) ToNatGatewayStrategyPtrOutput() NatGatewayStrategyPtrOutput {
	return o.ToNatGatewayStrategyPtrOutputWithContext(context.Background())
}

func (o NatGatewayStrategyOutput) ToNatGatewayStrategyPtrOutputWithContext(ctx context.Context) NatGatewayStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NatGatewayStrategy) *NatGatewayStrategy {
		return &v
	}).(NatGatewayStrategyPtrOutput)
}

func (o NatGatewayStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[NatGatewayStrategy] {
	return pulumix.Output[NatGatewayStrategy]{
		OutputState: o.OutputState,
	}
}

func (o NatGatewayStrategyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NatGatewayStrategyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NatGatewayStrategy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NatGatewayStrategyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NatGatewayStrategyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NatGatewayStrategy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NatGatewayStrategyPtrOutput struct{ *pulumi.OutputState }

func (NatGatewayStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NatGatewayStrategy)(nil)).Elem()
}

func (o NatGatewayStrategyPtrOutput) ToNatGatewayStrategyPtrOutput() NatGatewayStrategyPtrOutput {
	return o
}

func (o NatGatewayStrategyPtrOutput) ToNatGatewayStrategyPtrOutputWithContext(ctx context.Context) NatGatewayStrategyPtrOutput {
	return o
}

func (o NatGatewayStrategyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NatGatewayStrategy] {
	return pulumix.Output[*NatGatewayStrategy]{
		OutputState: o.OutputState,
	}
}

func (o NatGatewayStrategyPtrOutput) Elem() NatGatewayStrategyOutput {
	return o.ApplyT(func(v *NatGatewayStrategy) NatGatewayStrategy {
		if v != nil {
			return *v
		}
		var ret NatGatewayStrategy
		return ret
	}).(NatGatewayStrategyOutput)
}

func (o NatGatewayStrategyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NatGatewayStrategyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NatGatewayStrategy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NatGatewayStrategyInput is an input type that accepts NatGatewayStrategyArgs and NatGatewayStrategyOutput values.
// You can construct a concrete instance of `NatGatewayStrategyInput` via:
//
//	NatGatewayStrategyArgs{...}
type NatGatewayStrategyInput interface {
	pulumi.Input

	ToNatGatewayStrategyOutput() NatGatewayStrategyOutput
	ToNatGatewayStrategyOutputWithContext(context.Context) NatGatewayStrategyOutput
}

var natGatewayStrategyPtrType = reflect.TypeOf((**NatGatewayStrategy)(nil)).Elem()

type NatGatewayStrategyPtrInput interface {
	pulumi.Input

	ToNatGatewayStrategyPtrOutput() NatGatewayStrategyPtrOutput
	ToNatGatewayStrategyPtrOutputWithContext(context.Context) NatGatewayStrategyPtrOutput
}

type natGatewayStrategyPtr string

func NatGatewayStrategyPtr(v string) NatGatewayStrategyPtrInput {
	return (*natGatewayStrategyPtr)(&v)
}

func (*natGatewayStrategyPtr) ElementType() reflect.Type {
	return natGatewayStrategyPtrType
}

func (in *natGatewayStrategyPtr) ToNatGatewayStrategyPtrOutput() NatGatewayStrategyPtrOutput {
	return pulumi.ToOutput(in).(NatGatewayStrategyPtrOutput)
}

func (in *natGatewayStrategyPtr) ToNatGatewayStrategyPtrOutputWithContext(ctx context.Context) NatGatewayStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NatGatewayStrategyPtrOutput)
}

func (in *natGatewayStrategyPtr) ToOutput(ctx context.Context) pulumix.Output[*NatGatewayStrategy] {
	return pulumix.Output[*NatGatewayStrategy]{
		OutputState: in.ToNatGatewayStrategyPtrOutputWithContext(ctx).OutputState,
	}
}

// Strategy for calculating subnet ranges from the subnet specifications.
type SubnetAllocationStrategy string

const (
	// Group private subnets first, followed by public subnets, followed by isolated subnets.
	SubnetAllocationStrategyLegacy = SubnetAllocationStrategy("Legacy")
	// Order remains as specified by specs, allowing gaps where required.
	SubnetAllocationStrategyAuto = SubnetAllocationStrategy("Auto")
	// Whole range of VPC must be accounted for, using "Unused" spec types for deliberate gaps.
	SubnetAllocationStrategyExact = SubnetAllocationStrategy("Exact")
)

func (SubnetAllocationStrategy) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetAllocationStrategy)(nil)).Elem()
}

func (e SubnetAllocationStrategy) ToSubnetAllocationStrategyOutput() SubnetAllocationStrategyOutput {
	return pulumi.ToOutput(e).(SubnetAllocationStrategyOutput)
}

func (e SubnetAllocationStrategy) ToSubnetAllocationStrategyOutputWithContext(ctx context.Context) SubnetAllocationStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SubnetAllocationStrategyOutput)
}

func (e SubnetAllocationStrategy) ToSubnetAllocationStrategyPtrOutput() SubnetAllocationStrategyPtrOutput {
	return e.ToSubnetAllocationStrategyPtrOutputWithContext(context.Background())
}

func (e SubnetAllocationStrategy) ToSubnetAllocationStrategyPtrOutputWithContext(ctx context.Context) SubnetAllocationStrategyPtrOutput {
	return SubnetAllocationStrategy(e).ToSubnetAllocationStrategyOutputWithContext(ctx).ToSubnetAllocationStrategyPtrOutputWithContext(ctx)
}

func (e SubnetAllocationStrategy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubnetAllocationStrategy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubnetAllocationStrategy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SubnetAllocationStrategy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SubnetAllocationStrategyOutput struct{ *pulumi.OutputState }

func (SubnetAllocationStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetAllocationStrategy)(nil)).Elem()
}

func (o SubnetAllocationStrategyOutput) ToSubnetAllocationStrategyOutput() SubnetAllocationStrategyOutput {
	return o
}

func (o SubnetAllocationStrategyOutput) ToSubnetAllocationStrategyOutputWithContext(ctx context.Context) SubnetAllocationStrategyOutput {
	return o
}

func (o SubnetAllocationStrategyOutput) ToSubnetAllocationStrategyPtrOutput() SubnetAllocationStrategyPtrOutput {
	return o.ToSubnetAllocationStrategyPtrOutputWithContext(context.Background())
}

func (o SubnetAllocationStrategyOutput) ToSubnetAllocationStrategyPtrOutputWithContext(ctx context.Context) SubnetAllocationStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubnetAllocationStrategy) *SubnetAllocationStrategy {
		return &v
	}).(SubnetAllocationStrategyPtrOutput)
}

func (o SubnetAllocationStrategyOutput) ToOutput(ctx context.Context) pulumix.Output[SubnetAllocationStrategy] {
	return pulumix.Output[SubnetAllocationStrategy]{
		OutputState: o.OutputState,
	}
}

func (o SubnetAllocationStrategyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SubnetAllocationStrategyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SubnetAllocationStrategy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SubnetAllocationStrategyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SubnetAllocationStrategyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SubnetAllocationStrategy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SubnetAllocationStrategyPtrOutput struct{ *pulumi.OutputState }

func (SubnetAllocationStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetAllocationStrategy)(nil)).Elem()
}

func (o SubnetAllocationStrategyPtrOutput) ToSubnetAllocationStrategyPtrOutput() SubnetAllocationStrategyPtrOutput {
	return o
}

func (o SubnetAllocationStrategyPtrOutput) ToSubnetAllocationStrategyPtrOutputWithContext(ctx context.Context) SubnetAllocationStrategyPtrOutput {
	return o
}

func (o SubnetAllocationStrategyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubnetAllocationStrategy] {
	return pulumix.Output[*SubnetAllocationStrategy]{
		OutputState: o.OutputState,
	}
}

func (o SubnetAllocationStrategyPtrOutput) Elem() SubnetAllocationStrategyOutput {
	return o.ApplyT(func(v *SubnetAllocationStrategy) SubnetAllocationStrategy {
		if v != nil {
			return *v
		}
		var ret SubnetAllocationStrategy
		return ret
	}).(SubnetAllocationStrategyOutput)
}

func (o SubnetAllocationStrategyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SubnetAllocationStrategyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SubnetAllocationStrategy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SubnetAllocationStrategyInput is an input type that accepts SubnetAllocationStrategyArgs and SubnetAllocationStrategyOutput values.
// You can construct a concrete instance of `SubnetAllocationStrategyInput` via:
//
//	SubnetAllocationStrategyArgs{...}
type SubnetAllocationStrategyInput interface {
	pulumi.Input

	ToSubnetAllocationStrategyOutput() SubnetAllocationStrategyOutput
	ToSubnetAllocationStrategyOutputWithContext(context.Context) SubnetAllocationStrategyOutput
}

var subnetAllocationStrategyPtrType = reflect.TypeOf((**SubnetAllocationStrategy)(nil)).Elem()

type SubnetAllocationStrategyPtrInput interface {
	pulumi.Input

	ToSubnetAllocationStrategyPtrOutput() SubnetAllocationStrategyPtrOutput
	ToSubnetAllocationStrategyPtrOutputWithContext(context.Context) SubnetAllocationStrategyPtrOutput
}

type subnetAllocationStrategyPtr string

func SubnetAllocationStrategyPtr(v string) SubnetAllocationStrategyPtrInput {
	return (*subnetAllocationStrategyPtr)(&v)
}

func (*subnetAllocationStrategyPtr) ElementType() reflect.Type {
	return subnetAllocationStrategyPtrType
}

func (in *subnetAllocationStrategyPtr) ToSubnetAllocationStrategyPtrOutput() SubnetAllocationStrategyPtrOutput {
	return pulumi.ToOutput(in).(SubnetAllocationStrategyPtrOutput)
}

func (in *subnetAllocationStrategyPtr) ToSubnetAllocationStrategyPtrOutputWithContext(ctx context.Context) SubnetAllocationStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SubnetAllocationStrategyPtrOutput)
}

func (in *subnetAllocationStrategyPtr) ToOutput(ctx context.Context) pulumix.Output[*SubnetAllocationStrategy] {
	return pulumix.Output[*SubnetAllocationStrategy]{
		OutputState: in.ToSubnetAllocationStrategyPtrOutputWithContext(ctx).OutputState,
	}
}

// A type of subnet within a VPC.
type SubnetType string

const (
	// A subnet whose hosts can directly communicate with the internet.
	SubnetTypePublic = SubnetType("Public")
	// A subnet whose hosts can not directly communicate with the internet, but can initiate outbound network traffic via a NAT Gateway.
	SubnetTypePrivate = SubnetType("Private")
	// A subnet whose hosts have no connectivity with the internet.
	SubnetTypeIsolated = SubnetType("Isolated")
	// A subnet range which is reserved, but no subnet will be created.
	SubnetTypeUnused = SubnetType("Unused")
)

func (SubnetType) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetType)(nil)).Elem()
}

func (e SubnetType) ToSubnetTypeOutput() SubnetTypeOutput {
	return pulumi.ToOutput(e).(SubnetTypeOutput)
}

func (e SubnetType) ToSubnetTypeOutputWithContext(ctx context.Context) SubnetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SubnetTypeOutput)
}

func (e SubnetType) ToSubnetTypePtrOutput() SubnetTypePtrOutput {
	return e.ToSubnetTypePtrOutputWithContext(context.Background())
}

func (e SubnetType) ToSubnetTypePtrOutputWithContext(ctx context.Context) SubnetTypePtrOutput {
	return SubnetType(e).ToSubnetTypeOutputWithContext(ctx).ToSubnetTypePtrOutputWithContext(ctx)
}

func (e SubnetType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubnetType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubnetType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SubnetType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SubnetTypeOutput struct{ *pulumi.OutputState }

func (SubnetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetType)(nil)).Elem()
}

func (o SubnetTypeOutput) ToSubnetTypeOutput() SubnetTypeOutput {
	return o
}

func (o SubnetTypeOutput) ToSubnetTypeOutputWithContext(ctx context.Context) SubnetTypeOutput {
	return o
}

func (o SubnetTypeOutput) ToSubnetTypePtrOutput() SubnetTypePtrOutput {
	return o.ToSubnetTypePtrOutputWithContext(context.Background())
}

func (o SubnetTypeOutput) ToSubnetTypePtrOutputWithContext(ctx context.Context) SubnetTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubnetType) *SubnetType {
		return &v
	}).(SubnetTypePtrOutput)
}

func (o SubnetTypeOutput) ToOutput(ctx context.Context) pulumix.Output[SubnetType] {
	return pulumix.Output[SubnetType]{
		OutputState: o.OutputState,
	}
}

func (o SubnetTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SubnetTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SubnetType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SubnetTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SubnetTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SubnetType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SubnetTypePtrOutput struct{ *pulumi.OutputState }

func (SubnetTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetType)(nil)).Elem()
}

func (o SubnetTypePtrOutput) ToSubnetTypePtrOutput() SubnetTypePtrOutput {
	return o
}

func (o SubnetTypePtrOutput) ToSubnetTypePtrOutputWithContext(ctx context.Context) SubnetTypePtrOutput {
	return o
}

func (o SubnetTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubnetType] {
	return pulumix.Output[*SubnetType]{
		OutputState: o.OutputState,
	}
}

func (o SubnetTypePtrOutput) Elem() SubnetTypeOutput {
	return o.ApplyT(func(v *SubnetType) SubnetType {
		if v != nil {
			return *v
		}
		var ret SubnetType
		return ret
	}).(SubnetTypeOutput)
}

func (o SubnetTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SubnetTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SubnetType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SubnetTypeInput is an input type that accepts SubnetTypeArgs and SubnetTypeOutput values.
// You can construct a concrete instance of `SubnetTypeInput` via:
//
//	SubnetTypeArgs{...}
type SubnetTypeInput interface {
	pulumi.Input

	ToSubnetTypeOutput() SubnetTypeOutput
	ToSubnetTypeOutputWithContext(context.Context) SubnetTypeOutput
}

var subnetTypePtrType = reflect.TypeOf((**SubnetType)(nil)).Elem()

type SubnetTypePtrInput interface {
	pulumi.Input

	ToSubnetTypePtrOutput() SubnetTypePtrOutput
	ToSubnetTypePtrOutputWithContext(context.Context) SubnetTypePtrOutput
}

type subnetTypePtr string

func SubnetTypePtr(v string) SubnetTypePtrInput {
	return (*subnetTypePtr)(&v)
}

func (*subnetTypePtr) ElementType() reflect.Type {
	return subnetTypePtrType
}

func (in *subnetTypePtr) ToSubnetTypePtrOutput() SubnetTypePtrOutput {
	return pulumi.ToOutput(in).(SubnetTypePtrOutput)
}

func (in *subnetTypePtr) ToSubnetTypePtrOutputWithContext(ctx context.Context) SubnetTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SubnetTypePtrOutput)
}

func (in *subnetTypePtr) ToOutput(ctx context.Context) pulumix.Output[*SubnetType] {
	return pulumix.Output[*SubnetType]{
		OutputState: in.ToSubnetTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NatGatewayStrategyInput)(nil)).Elem(), NatGatewayStrategy("None"))
	pulumi.RegisterInputType(reflect.TypeOf((*NatGatewayStrategyPtrInput)(nil)).Elem(), NatGatewayStrategy("None"))
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetAllocationStrategyInput)(nil)).Elem(), SubnetAllocationStrategy("Legacy"))
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetAllocationStrategyPtrInput)(nil)).Elem(), SubnetAllocationStrategy("Legacy"))
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetTypeInput)(nil)).Elem(), SubnetType("Public"))
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetTypePtrInput)(nil)).Elem(), SubnetType("Public"))
	pulumi.RegisterOutputType(NatGatewayStrategyOutput{})
	pulumi.RegisterOutputType(NatGatewayStrategyPtrOutput{})
	pulumi.RegisterOutputType(SubnetAllocationStrategyOutput{})
	pulumi.RegisterOutputType(SubnetAllocationStrategyPtrOutput{})
	pulumi.RegisterOutputType(SubnetTypeOutput{})
	pulumi.RegisterOutputType(SubnetTypePtrOutput{})
}
