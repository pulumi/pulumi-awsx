# coding=utf-8
# *** WARNING: this file was generated by pulumi-gen-awsx. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._inputs import *

__all__ = [
    'BuildAndPushImageResult',
    'AwaitableBuildAndPushImageResult',
    'build_and_push_image',
    'build_and_push_image_output',
]

@pulumi.output_type
class BuildAndPushImageResult:
    """
    Outputs from the pushed docker image
    """
    def __init__(__self__, image=None):
        if image and not isinstance(image, str):
            raise TypeError("Expected argument 'image' to be a str")
        pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Unique identifier of the pushed image
        """
        return pulumi.get(self, "image")


class AwaitableBuildAndPushImageResult(BuildAndPushImageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return BuildAndPushImageResult(
            image=self.image)


def build_and_push_image(docker: Optional[pulumi.InputType['DockerBuild']] = None,
                         registry_id: Optional[str] = None,
                         repository_name: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableBuildAndPushImageResult:
    """
    Build and push a docker image to ECR


    :param pulumi.InputType['DockerBuild'] docker: Arguments for building the docker image.
    :param str registry_id: The Amazon Web Services account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.
    """
    __args__ = dict()
    __args__['docker'] = docker
    __args__['registryId'] = registry_id
    __args__['repositoryName'] = repository_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('awsx:ecr:buildAndPushImage', __args__, opts=opts, typ=BuildAndPushImageResult).value

    return AwaitableBuildAndPushImageResult(
        image=__ret__.image)


@_utilities.lift_output_func(build_and_push_image)
def build_and_push_image_output(docker: Optional[pulumi.Input[Optional[pulumi.InputType['DockerBuild']]]] = None,
                                registry_id: Optional[pulumi.Input[Optional[str]]] = None,
                                repository_name: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[BuildAndPushImageResult]:
    """
    Build and push a docker image to ECR


    :param pulumi.InputType['DockerBuild'] docker: Arguments for building the docker image.
    :param str registry_id: The Amazon Web Services account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.
    """
    ...
