# coding=utf-8
# *** WARNING: this file was generated by pulumi-gen-awsx. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'DockerBuild',
]

@pulumi.input_type
class DockerBuild:
    def __init__(__self__, *,
                 args: Optional[Mapping[str, str]] = None,
                 cache_from: Optional[Sequence[str]] = None,
                 dockerfile: Optional[str] = None,
                 env: Optional[Mapping[str, str]] = None,
                 extra_options: Optional[Sequence[str]] = None,
                 path: Optional[str] = None,
                 target: Optional[str] = None):
        """
        Arguments for building a docker image
        :param Mapping[str, str] args: An optional map of named build-time argument variables to set during the Docker build.  This flag allows you to pass built-time variables that can be accessed like environment variables inside the `RUN` instruction.
        :param Sequence[str] cache_from: Images to consider as cache sources
        :param str dockerfile: dockerfile may be used to override the default Dockerfile name and/or location.  By default, it is assumed to be a file named Dockerfile in the root of the build context.
        :param Mapping[str, str] env: Environment variables to set on the invocation of `docker build`, for example to support `DOCKER_BUILDKIT=1 docker build`.
        :param Sequence[str] extra_options: An optional catch-all list of arguments to provide extra CLI options to the docker build command.  For example `['--network', 'host']`.
        :param str path: Path to a directory to use for the Docker build context, usually the directory in which the Dockerfile resides (although dockerfile may be used to choose a custom location independent of this choice). If not specified, the context defaults to the current working directory; if a relative path is used, it is relative to the current working directory that Pulumi is evaluating.
        :param str target: The target of the dockerfile to build
        """
        if args is not None:
            pulumi.set(__self__, "args", args)
        if cache_from is not None:
            pulumi.set(__self__, "cache_from", cache_from)
        if dockerfile is not None:
            pulumi.set(__self__, "dockerfile", dockerfile)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if extra_options is not None:
            pulumi.set(__self__, "extra_options", extra_options)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def args(self) -> Optional[Mapping[str, str]]:
        """
        An optional map of named build-time argument variables to set during the Docker build.  This flag allows you to pass built-time variables that can be accessed like environment variables inside the `RUN` instruction.
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[Mapping[str, str]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter(name="cacheFrom")
    def cache_from(self) -> Optional[Sequence[str]]:
        """
        Images to consider as cache sources
        """
        return pulumi.get(self, "cache_from")

    @cache_from.setter
    def cache_from(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "cache_from", value)

    @property
    @pulumi.getter
    def dockerfile(self) -> Optional[str]:
        """
        dockerfile may be used to override the default Dockerfile name and/or location.  By default, it is assumed to be a file named Dockerfile in the root of the build context.
        """
        return pulumi.get(self, "dockerfile")

    @dockerfile.setter
    def dockerfile(self, value: Optional[str]):
        pulumi.set(self, "dockerfile", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        """
        Environment variables to set on the invocation of `docker build`, for example to support `DOCKER_BUILDKIT=1 docker build`.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[Mapping[str, str]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="extraOptions")
    def extra_options(self) -> Optional[Sequence[str]]:
        """
        An optional catch-all list of arguments to provide extra CLI options to the docker build command.  For example `['--network', 'host']`.
        """
        return pulumi.get(self, "extra_options")

    @extra_options.setter
    def extra_options(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "extra_options", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to a directory to use for the Docker build context, usually the directory in which the Dockerfile resides (although dockerfile may be used to choose a custom location independent of this choice). If not specified, the context defaults to the current working directory; if a relative path is used, it is relative to the current working directory that Pulumi is evaluating.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        """
        The target of the dockerfile to build
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[str]):
        pulumi.set(self, "target", value)


