# coding=utf-8
# *** WARNING: this file was generated by pulumi-gen-awsx. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'DefaultLogGroupArgs',
    'ExistingLogGroupArgs',
    'LogGroupArgs',
    'OptionalLogGroupArgs',
]

@pulumi.input_type
class DefaultLogGroupArgs:
    def __init__(__self__, *,
                 args: Optional['LogGroupArgs'] = None,
                 existing: Optional['ExistingLogGroupArgs'] = None,
                 skip: Optional[bool] = None):
        """
        Log group with default setup unless explicitly skipped.
        :param 'LogGroupArgs' args: Arguments to use instead of the default values during creation.
        :param 'ExistingLogGroupArgs' existing: Identity of an existing log group to use. Cannot be used in combination with `args` or `opts`.
        :param bool skip: Skip creation of the log group.
        """
        if args is not None:
            pulumi.set(__self__, "args", args)
        if existing is not None:
            pulumi.set(__self__, "existing", existing)
        if skip is not None:
            pulumi.set(__self__, "skip", skip)

    @property
    @pulumi.getter
    def args(self) -> Optional['LogGroupArgs']:
        """
        Arguments to use instead of the default values during creation.
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional['LogGroupArgs']):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def existing(self) -> Optional['ExistingLogGroupArgs']:
        """
        Identity of an existing log group to use. Cannot be used in combination with `args` or `opts`.
        """
        return pulumi.get(self, "existing")

    @existing.setter
    def existing(self, value: Optional['ExistingLogGroupArgs']):
        pulumi.set(self, "existing", value)

    @property
    @pulumi.getter
    def skip(self) -> Optional[bool]:
        """
        Skip creation of the log group.
        """
        return pulumi.get(self, "skip")

    @skip.setter
    def skip(self, value: Optional[bool]):
        pulumi.set(self, "skip", value)


@pulumi.input_type
class ExistingLogGroupArgs:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        Reference to an existing log group.
        :param pulumi.Input[str] arn: Arn of the log group. Only one of [arn] or [name] can be specified.
        :param pulumi.Input[str] name: Name of the log group. Only one of [arn] or [name] can be specified.
        :param pulumi.Input[str] region: Region of the log group. If not specified, the provider region will be used.
        """
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        """
        Arn of the log group. Only one of [arn] or [name] can be specified.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the log group. Only one of [arn] or [name] can be specified.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region of the log group. If not specified, the provider region will be used.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class LogGroupArgs:
    def __init__(__self__, *,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 retention_in_days: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a LogGroup resource.
        :param pulumi.Input[str] kms_key_id: The ARN of the KMS Key to use when encrypting log data. Please note, after the AWS KMS CMK is disassociated from the log group,
               AWS CloudWatch Logs stops encrypting newly ingested data for the log group. All previously ingested data remains encrypted, and AWS CloudWatch Logs requires
               permissions for the CMK whenever the encrypted data is requested.
        :param pulumi.Input[str] name: The name of the log group. If omitted, this provider will assign a random, unique name.
        :param pulumi.Input[str] name_prefix: Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        :param pulumi.Input[int] retention_in_days: Specifies the number of days
               you want to retain log events in the specified log group.  Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653, and 0.
               If you select 0, the events in the log group are always retained and never expire.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if retention_in_days is not None:
            pulumi.set(__self__, "retention_in_days", retention_in_days)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the KMS Key to use when encrypting log data. Please note, after the AWS KMS CMK is disassociated from the log group,
        AWS CloudWatch Logs stops encrypting newly ingested data for the log group. All previously ingested data remains encrypted, and AWS CloudWatch Logs requires
        permissions for the CMK whenever the encrypted data is requested.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the log group. If omitted, this provider will assign a random, unique name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter(name="retentionInDays")
    def retention_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of days
        you want to retain log events in the specified log group.  Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653, and 0.
        If you select 0, the events in the log group are always retained and never expire.
        """
        return pulumi.get(self, "retention_in_days")

    @retention_in_days.setter
    def retention_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_in_days", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class OptionalLogGroupArgs:
    def __init__(__self__, *,
                 args: Optional['LogGroupArgs'] = None,
                 enable: Optional[bool] = None,
                 existing: Optional['ExistingLogGroupArgs'] = None):
        """
        Log group which is only created if enabled.
        :param 'LogGroupArgs' args: Arguments to use instead of the default values during creation.
        :param bool enable: Enable creation of the log group.
        :param 'ExistingLogGroupArgs' existing: Identity of an existing log group to use. Cannot be used in combination with `args` or `opts`.
        """
        if args is not None:
            pulumi.set(__self__, "args", args)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if existing is not None:
            pulumi.set(__self__, "existing", existing)

    @property
    @pulumi.getter
    def args(self) -> Optional['LogGroupArgs']:
        """
        Arguments to use instead of the default values during creation.
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional['LogGroupArgs']):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        """
        Enable creation of the log group.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[bool]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def existing(self) -> Optional['ExistingLogGroupArgs']:
        """
        Identity of an existing log group to use. Cannot be used in combination with `args` or `opts`.
        """
        return pulumi.get(self, "existing")

    @existing.setter
    def existing(self, value: Optional['ExistingLogGroupArgs']):
        pulumi.set(self, "existing", value)


