// *** WARNING: this file was generated by pulumi-gen-awsx. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Awsx.Ecr
{
    /// <summary>
    /// Builds a docker image and pushes to the ECR repository
    /// </summary>
    [AwsxResourceType("awsx:ecr:Image")]
    public partial class Image : global::Pulumi.ComponentResource
    {
        /// <summary>
        /// Unique identifier of the pushed image
        /// </summary>
        [Output("imageUri")]
        public Output<string> ImageUri { get; private set; } = null!;


        /// <summary>
        /// Create a Image resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Image(string name, ImageArgs args, ComponentResourceOptions? options = null)
            : base("awsx:ecr:Image", name, args ?? new ImageArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ImageArgs : global::Pulumi.ResourceArgs
    {
        [Input("args")]
        private InputMap<string>? _args;

        /// <summary>
        /// An optional map of named build-time argument variables to set during the Docker build.  This flag allows you to pass built-time variables that can be accessed like environment variables inside the `RUN` instruction.
        /// </summary>
        public InputMap<string> Args
        {
            get => _args ?? (_args = new InputMap<string>());
            set => _args = value;
        }

        /// <summary>
        /// The version of the Docker builder.
        /// </summary>
        [Input("builderVersion")]
        public Pulumi.Awsx.Ecr.BuilderVersion? BuilderVersion { get; set; }

        [Input("cacheFrom")]
        private InputList<string>? _cacheFrom;

        /// <summary>
        /// Images to consider as cache sources
        /// </summary>
        public InputList<string> CacheFrom
        {
            get => _cacheFrom ?? (_cacheFrom = new InputList<string>());
            set => _cacheFrom = value;
        }

        /// <summary>
        /// Path to a directory to use for the Docker build context, usually the directory in which the Dockerfile resides (although dockerfile may be used to choose a custom location independent of this choice). If not specified, the context defaults to the current working directory; if a relative path is used, it is relative to the current working directory that Pulumi is evaluating.
        /// </summary>
        [Input("context")]
        public Input<string>? Context { get; set; }

        /// <summary>
        /// dockerfile may be used to override the default Dockerfile name and/or location.  By default, it is assumed to be a file named Dockerfile in the root of the build context.
        /// </summary>
        [Input("dockerfile")]
        public Input<string>? Dockerfile { get; set; }

        /// <summary>
        /// Custom name for the underlying Docker image resource. If omitted, the image tag assigned by the provider will be used
        /// </summary>
        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        /// <summary>
        /// Custom image tag for the resulting docker image. If omitted a random string will be used
        /// </summary>
        [Input("imageTag")]
        public Input<string>? ImageTag { get; set; }

        /// <summary>
        /// The architecture of the platform you want to build this image for, e.g. `linux/arm64`.
        /// </summary>
        [Input("platform")]
        public Input<string>? Platform { get; set; }

        /// <summary>
        /// ID of the ECR registry in which to store the image.  If not provided, this will be inferred from the repository URL)
        /// </summary>
        [Input("registryId")]
        public Input<string>? RegistryId { get; set; }

        /// <summary>
        /// Url of the repository
        /// </summary>
        [Input("repositoryUrl", required: true)]
        public Input<string> RepositoryUrl { get; set; } = null!;

        /// <summary>
        /// The target of the dockerfile to build
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        public ImageArgs()
        {
        }
        public static new ImageArgs Empty => new ImageArgs();
    }
}
