// *** WARNING: this file was generated by pulumi-gen-awsx. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Awsx.Ecr.Inputs
{

    /// <summary>
    /// Arguments for building a docker image
    /// </summary>
    public sealed class DockerBuild : Pulumi.InvokeArgs
    {
        [Input("args")]
        private Dictionary<string, string>? _args;

        /// <summary>
        /// An optional map of named build-time argument variables to set during the Docker build.  This flag allows you to pass built-time variables that can be accessed like environment variables inside the `RUN` instruction.
        /// </summary>
        public Dictionary<string, string> Args
        {
            get => _args ?? (_args = new Dictionary<string, string>());
            set => _args = value;
        }

        [Input("cacheFrom")]
        private List<string>? _cacheFrom;

        /// <summary>
        /// Images to consider as cache sources
        /// </summary>
        public List<string> CacheFrom
        {
            get => _cacheFrom ?? (_cacheFrom = new List<string>());
            set => _cacheFrom = value;
        }

        /// <summary>
        /// dockerfile may be used to override the default Dockerfile name and/or location.  By default, it is assumed to be a file named Dockerfile in the root of the build context.
        /// </summary>
        [Input("dockerfile")]
        public string? Dockerfile { get; set; }

        [Input("env")]
        private Dictionary<string, string>? _env;

        /// <summary>
        /// Environment variables to set on the invocation of `docker build`, for example to support `DOCKER_BUILDKIT=1 docker build`.
        /// </summary>
        public Dictionary<string, string> Env
        {
            get => _env ?? (_env = new Dictionary<string, string>());
            set => _env = value;
        }

        [Input("extraOptions")]
        private List<string>? _extraOptions;

        /// <summary>
        /// An optional catch-all list of arguments to provide extra CLI options to the docker build command.  For example `['--network', 'host']`.
        /// </summary>
        public List<string> ExtraOptions
        {
            get => _extraOptions ?? (_extraOptions = new List<string>());
            set => _extraOptions = value;
        }

        /// <summary>
        /// Path to a directory to use for the Docker build context, usually the directory in which the Dockerfile resides (although dockerfile may be used to choose a custom location independent of this choice). If not specified, the context defaults to the current working directory; if a relative path is used, it is relative to the current working directory that Pulumi is evaluating.
        /// </summary>
        [Input("path")]
        public string? Path { get; set; }

        /// <summary>
        /// The target of the dockerfile to build
        /// </summary>
        [Input("target")]
        public string? Target { get; set; }

        public DockerBuild()
        {
        }
    }
}
