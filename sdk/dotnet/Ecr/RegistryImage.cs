// *** WARNING: this file was generated by pulumi-gen-awsx. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Awsx.Ecr
{
    /// <summary>
    /// Manages the lifecycle of a docker image in a registry. You can upload images to a registry (= `docker push`) and also delete them again. In contrast to [`awsx.ecr.Image`](/registry/packages/awsx/api-docs/ecr/image/), this resource does not require to build the image, but can be used to push an existing image to an ECR repository. The image will be pushed whenever the source image changes or is updated.
    /// 
    /// ## Example Usage
    /// ### Pushing an image to an ECR repository
    /// ```csharp
    /// using Pulumi;
    /// using Pulumi.Awsx.Ecr;
    /// 
    /// return await Pulumi.Deployment.RunAsync(() =&gt;
    /// {
    ///     var repository = new Repository("repository", new RepositoryArgs
    ///     {
    ///         ForceDelete = true,
    ///     });
    /// 
    ///     var registryImage = new RegistryImage("registryImage", new RegistryImageArgs
    ///     {
    ///         RepositoryUrl = repository.Url,
    ///         SourceImage = "my-awesome-image:v1.0.0",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;{};
    /// });
    /// ```
    /// </summary>
    [AwsxResourceType("awsx:ecr:RegistryImage")]
    public partial class RegistryImage : global::Pulumi.ComponentResource
    {
        /// <summary>
        /// The underlying RegistryImage resource.
        /// </summary>
        [Output("image")]
        public Output<Pulumi.Docker.RegistryImage> Image { get; private set; } = null!;


        /// <summary>
        /// Create a RegistryImage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegistryImage(string name, RegistryImageArgs args, ComponentResourceOptions? options = null)
            : base("awsx:ecr:RegistryImage", name, args ?? new RegistryImageArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class RegistryImageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
        /// </summary>
        [Input("insecureSkipVerify")]
        public Input<bool>? InsecureSkipVerify { get; set; }

        /// <summary>
        /// If true, then the Docker image won't be deleted on destroy operation. If this is false, it will delete the image from the docker registry on destroy operation. Defaults to `false`
        /// </summary>
        [Input("keepRemotely")]
        public Input<bool>? KeepRemotely { get; set; }

        /// <summary>
        /// Url of the ECR repository.
        /// </summary>
        [Input("repositoryUrl", required: true)]
        public Input<string> RepositoryUrl { get; set; } = null!;

        /// <summary>
        /// The source image to push to the registry. The image is pushed with its existing tag by default. If the source specifies an image ID without a tag, the pushed image uses the `latest` tag as the default.
        /// You can override the tag by using the `tag` input property.
        /// </summary>
        [Input("sourceImage", required: true)]
        public Input<string> SourceImage { get; set; } = null!;

        /// <summary>
        /// The tag to use for the pushed image. If not provided, the tag of the source image is used.
        /// </summary>
        [Input("tag")]
        public Input<string>? Tag { get; set; }

        [Input("triggers")]
        private InputMap<string>? _triggers;

        /// <summary>
        /// A map of arbitrary strings that, when changed, will force the `docker.RegistryImage` resource to be replaced. This can be used to repush a local image
        /// </summary>
        public InputMap<string> Triggers
        {
            get => _triggers ?? (_triggers = new InputMap<string>());
            set => _triggers = value;
        }

        public RegistryImageArgs()
        {
        }
        public static new RegistryImageArgs Empty => new RegistryImageArgs();
    }
}
